/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-01-19 22:54:25.586282
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[5]);
x14=((1.0)*x6);
x15=((1.0)*x5);
x16=((1.0)*x4);
x17=((1.0)*x8);
x18=((1.0)*x3);
x19=((1.0)*x9);
x20=((0.106)*x5);
x21=((1.0)*x11);
x22=((0.106)*x8);
x23=((0.013)*x1);
x24=((0.314)*x3);
x25=((1.0)*x0);
x26=((0.314)*x0);
x27=((0.106)*x9);
x28=((1.0)*x13);
x29=(x6*x7);
x30=(x2*x7);
x31=(x1*x6);
x32=(x7*x9);
x33=(x0*x4);
x34=(x3*x4);
x35=(x0*x7);
x36=(x1*x2);
x37=(x0*x2);
x38=(x3*x7);
x39=(x16*x3);
x40=(x15*x35);
x41=(x14*x35);
x42=(x15*x38);
x43=(x16*x7*x8);
x44=(x16*x32);
x45=((((-1.0)*x39))+((x0*x36)));
x46=(((x3*x36))+x33);
x47=((((-1.0)*x1*x39))+x37);
x48=(x31+(((-1.0)*x15*x30)));
x49=(((x1*x5))+((x2*x29)));
x50=((((-1.0)*x25*x36))+x39);
x51=((((-1.0)*x0*x1*x16))+(((-1.0)*x18*x2)));
x52=(x45*x6);
x53=((((-1.0)*x18*x36))+(((-1.0)*x0*x16)));
x54=((((-1.0)*x1*x15))+(((-1.0)*x14*x30)));
x55=(x49*x8);
x56=(x47*x8);
x57=(x47*x9);
x58=(x51*x9);
x59=(x51*x8);
x60=(x54*x9);
x61=((((-1.0)*x40))+x52);
x62=((((-1.0)*x42))+((x46*x6)));
x63=((((-1.0)*x14*x46))+x42);
x64=((((-1.0)*x14*x38))+((x5*x53)));
x65=(x61*x8);
x66=(x13*(((((-1.0)*x41))+((x5*x50)))));
x67=(x63*x9);
x68=(x58+x65);
x69=(((x21*((x44+(((-1.0)*x55))))))+(((-1.0)*x28*x48)));
x70=(((x21*(((((-1.0)*x62*x8))+(((-1.0)*x57))))))+(((-1.0)*x28*x64)));
eerot[0]=(((x10*((((x9*((x40+(((-1.0)*x52))))))+x59))))+((x12*((((x11*x68))+x66)))));
eerot[1]=(((x10*((((x11*((((x8*(((((-1.0)*x35*x5))+x52))))+x58))))+x66))))+(((-1.0)*x12*((((x17*x51))+((x19*(((((-1.0)*x14*x45))+x40)))))))));
eerot[2]=(((x13*x68))+((x11*((x41+(((-1.0)*x15*x50)))))));
eetrans[0]=((((-0.012)*x3))+(((-0.013)*x2*x3))+((x13*((((x27*x51))+((x22*x61))))))+((x11*(((((-1.0)*x20*x50))+(((0.106)*x0*x29))))))+((x26*x29))+((x5*((((x26*x36))+(((-1.0)*x24*x4))))))+(((-1.0)*x23*x33))+(((0.421)*x35)));
eerot[3]=(((x12*x70))+((x10*(((((-1.0)*x56))+(((-1.0)*x67)))))));
eerot[4]=(((x10*x70))+((x12*((x56+x67)))));
eerot[5]=(((x13*(((((-1.0)*x19*x47))+(((-1.0)*x17*x62))))))+((x11*x64)));
IkReal x71=((1.0)*x24);
eetrans[1]=(((x13*(((((-1.0)*x27*x47))+(((-1.0)*x22*x62))))))+((x5*(((((-1.0)*x36*x71))+(((-1.0)*x26*x4))))))+((x23*x34))+(((-0.012)*x0))+(((-0.421)*x38))+((x11*((((x20*x53))+(((-0.106)*x29*x3))))))+(((-0.013)*x37))+(((-1.0)*x29*x71)));
eerot[6]=(((x12*x69))+((x10*((x43+(((-1.0)*x19*x54)))))));
eerot[7]=(((x10*x69))+((x12*(((((-1.0)*x43))+x60)))));
eerot[8]=(((x11*x48))+((x13*(((((-1.0)*x17*x49))+x44)))));
IkReal x72=(x4*x7);
eetrans[2]=((0.285)+(((0.314)*x31))+(((-0.314)*x30*x5))+((x11*(((((-1.0)*x20*x30))+(((0.106)*x31))))))+(((0.013)*x72))+(((0.421)*x1))+((x13*((((x27*x72))+(((-1.0)*x22*x49)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-0.106)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=r11;
new_r12=r12;
new_py=((((0.106)*r12))+(((-1.0)*py)));
new_r20=((-1.0)*r20);
new_r21=r21;
new_r22=r22;
new_pz=((0.285)+(((0.106)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x73=((1.0)*px);
IkReal x74=((1.0)*pz);
IkReal x75=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x75))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x74)));
rxp0_2=((((-1.0)*r10*x73))+((py*r00)));
rxp1_0=((((-1.0)*r21*x75))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x74)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x75))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x74)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x73)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x76=((0.024)*py);
IkReal x77=((1.0)*pp);
IkReal x78=((0.013)*cj2);
IkReal x79=((-0.012)+(((-1.0)*x78))+py);
IkReal x80=((0.54025)+(((-1.0)*x77))+x76);
IkReal x81=((0.011474)+(((-1.0)*x77))+x76);
IkReal x82=(x77+x76);
IkReal x83=((-0.012)+(((-1.0)*x78))+(((-1.0)*py)));
IkReal x84=((0.54025)+(((-1.0)*x82)));
IkReal x85=((0.011474)+(((-1.0)*x82)));
IkReal gconst0=x80;
IkReal gconst1=x81;
IkReal gconst2=x79;
IkReal gconst3=x79;
IkReal gconst4=x80;
IkReal gconst5=x81;
IkReal gconst6=x79;
IkReal gconst7=x79;
IkReal gconst8=x84;
IkReal gconst9=x85;
IkReal gconst10=x83;
IkReal gconst11=x83;
IkReal gconst12=x84;
IkReal gconst13=x85;
IkReal gconst14=x83;
IkReal gconst15=x83;
IkReal x86=sj2*sj2;
IkReal x87=px*px;
IkReal x88=(gconst0*px);
IkReal x89=((2.0)*gconst4);
IkReal x90=(gconst15*gconst8);
IkReal x91=(gconst7*gconst9);
IkReal x92=((0.048)*gconst14);
IkReal x93=(gconst0*gconst11);
IkReal x94=(gconst5*gconst6);
IkReal x95=(gconst1*gconst14);
IkReal x96=((1.0)*gconst15);
IkReal x97=(gconst12*gconst7);
IkReal x98=(gconst15*px);
IkReal x99=(gconst12*gconst8);
IkReal x100=(gconst1*gconst10);
IkReal x101=(gconst13*gconst14);
IkReal x102=(gconst14*gconst5);
IkReal x103=(gconst10*gconst7);
IkReal x104=(gconst0*gconst6);
IkReal x105=(gconst15*gconst4);
IkReal x106=(gconst4*gconst7);
IkReal x107=(gconst1*gconst6);
IkReal x108=(gconst11*px);
IkReal x109=((1.0)*gconst8);
IkReal x110=(gconst11*gconst5);
IkReal x111=(gconst12*gconst3);
IkReal x112=(gconst11*gconst15);
IkReal x113=(gconst13*gconst6);
IkReal x114=((0.048)*gconst10);
IkReal x115=(gconst6*gconst8);
IkReal x116=(gconst14*gconst8);
IkReal x117=(gconst2*gconst9);
IkReal x118=(gconst12*gconst15);
IkReal x119=((2.0)*gconst3);
IkReal x120=(gconst6*gconst9);
IkReal x121=(gconst1*gconst2);
IkReal x122=((2.0)*gconst5);
IkReal x123=(gconst15*gconst9);
IkReal x124=(gconst11*gconst13);
IkReal x125=(gconst10*gconst12);
IkReal x126=(gconst1*gconst7);
IkReal x127=(gconst10*gconst13);
IkReal x128=((0.048)*px);
IkReal x129=((2.0)*gconst12);
IkReal x130=(gconst3*gconst6);
IkReal x131=(gconst3*gconst4);
IkReal x132=(gconst2*gconst4);
IkReal x133=(gconst11*gconst4);
IkReal x134=(gconst14*gconst9);
IkReal x135=(gconst12*gconst2);
IkReal x136=(gconst10*gconst9);
IkReal x137=(gconst11*gconst8);
IkReal x138=(gconst11*gconst7);
IkReal x139=((2.0)*px);
IkReal x140=(gconst11*gconst6);
IkReal x141=(gconst3*gconst7);
IkReal x142=(gconst5*px);
IkReal x143=(gconst11*gconst12);
IkReal x144=(gconst13*gconst3);
IkReal x145=(gconst15*gconst3);
IkReal x146=(gconst10*gconst4);
IkReal x147=(gconst0*gconst3);
IkReal x148=(gconst3*gconst8);
IkReal x149=(gconst13*gconst2);
IkReal x150=(gconst7*gconst8);
IkReal x151=(gconst1*gconst15);
IkReal x152=((1.0)*gconst5);
IkReal x153=((0.096)*x87);
IkReal x154=(gconst2*x128);
IkReal x155=((4.0)*x87);
IkReal x156=(gconst13*x139);
IkReal x157=((0.002304)*x87);
IkReal x158=((1.0)*x117);
IkReal x159=((1.0)*x147);
IkReal x160=(px*x129);
IkReal x161=(px*x136);
IkReal x162=(gconst1*x86);
IkReal x163=(gconst4*gconst9*x86);
IkReal x164=(x86*x87);
IkReal x165=((0.037860864)*px*x86);
IkReal x166=(gconst12*gconst9*x86);
IkReal x167=((0.018930432)*px*x86);
IkReal x168=((0.394384)*x166);
IkReal x169=(gconst9*x167);
IkReal x170=(gconst12*x167);
IkReal x171=((0.394384)*x163);
IkReal x172=((0.394384)*gconst12*x162);
IkReal x173=((0.000908660736)*x164);
IkReal x174=(gconst4*x167);
IkReal x175=((0.018930432)*px*x162);
IkReal x176=((0.394384)*gconst4*x162);
IkReal x177=(x175+x174);
IkReal x178=(x170+x169);
IkReal x179=(x171+x173+x172);
op[0]=((((-1.0)*x168))+(((-1.0)*x101*x136))+(((-1.0)*x143*x90))+((x118*x136))+((x101*x137)));
op[1]=(((x160*x90))+(((-1.0)*gconst9*x125*x139))+((x161*x92))+((px*x127*x92))+(((-2.0)*gconst13*gconst8*x108))+(((2.0)*x108*x99))+(((-1.0)*gconst9*x129*x98))+x178+(((0.048)*x143*x98))+(((-1.0)*gconst9*x114*x98))+(((-1.0)*gconst8*x108*x92))+(((-1.0)*gconst12*x114*x98))+(((0.048)*x108*x90))+(((-1.0)*gconst13*x108*x92))+((gconst9*x101*x139))+((gconst9*x127*x139))+(((-1.0)*gconst8*x101*x139)));
op[2]=((((-1.0)*gconst10*gconst14*x157))+((x100*x118))+(((-1.0)*x134*x153))+(((-1.0)*x127*x153))+((x123*x153))+((gconst13*gconst8*x155))+(((-1.0)*x153*x90))+(((-1.0)*gconst12*x93*x96))+((x101*x148))+(((-1.0)*x179))+(((-1.0)*x143*x153))+((x125*x91))+((x102*x137))+((x101*x93))+(((-1.0)*gconst11*x109*x97))+((gconst11*gconst14*x157))+(((-1.0)*x102*x136))+((gconst10*gconst15*x157))+(((-1.0)*x113*x136))+((x116*x153))+((x113*x137))+(((-1.0)*x155*x99))+((x105*x136))+(((-1.0)*x133*x90))+((gconst12*gconst9*x155))+(((-1.0)*x112*x157))+(((-1.0)*x127*x95))+(((-0.788768)*x166))+(((-1.0)*x111*x90))+(((-1.0)*x101*x158))+((x124*x153))+((x117*x118))+((x125*x153))+(((-1.0)*gconst13*gconst9*x155)));
op[3]=((((-1.0)*x160*x91))+((px*x114*x120))+(((-0.048)*x117*x98))+(((-1.0)*gconst4*x114*x98))+(((0.048)*x133*x98))+(((-1.0)*gconst8*x113*x139))+(((-1.0)*px*x114*x91))+(((-1.0)*px*x114*x97))+((x122*x161))+(((-2.0)*x101*x88))+((px*x117*x92))+(((-1.0)*x161*x89))+((gconst8*x108*x89))+(((0.048)*x112*x88))+((x117*x156))+((x100*x156))+(((-1.0)*px*x144*x92))+((gconst9*x102*x139))+((px*x119*x99))+((gconst10*x142*x92))+x177+((gconst12*x165))+(((-1.0)*gconst5*x108*x92))+(((-1.0)*gconst11*x88*x92))+((gconst9*x165))+(((-0.048)*x135*x98))+(((-2.0)*x124*x88))+((gconst3*x128*x90))+(((-1.0)*px*x148*x92))+((px*x100*x92))+((px*x113*x114))+(((0.048)*x108*x97))+((x156*x95))+((gconst8*x139*x97))+((gconst11*x129*x88))+(((-1.0)*x117*x160))+(((-1.0)*gconst8*x108*x122))+(((-1.0)*gconst9*x89*x98))+(((-1.0)*x100*x160))+(((-1.0)*gconst13*gconst8*px*x119))+((gconst9*x113*x139))+(((0.048)*x108*x150))+(((2.0)*x118*x88))+(((0.048)*x111*x98))+((px*x149*x92))+(((-1.0)*gconst1*x129*x98))+(((-1.0)*gconst8*x102*x139))+((px*x89*x90))+(((-0.048)*x100*x98))+(((-0.048)*x108*x113))+(((-0.048)*x108*x115)));
op[4]=(((x113*x93))+((x113*x148))+((x100*x97))+((x140*x157))+((x103*x157))+(((-1.0)*x153*x95))+(((-1.0)*gconst10*gconst6*x157))+(((-1.0)*x168))+(((-1.0)*x138*x157))+((x101*x147))+((x102*x148))+((x135*x91))+((x144*x153))+(((-1.0)*x176))+(((-1.0)*gconst0*gconst12*x155))+(((-1.0)*x93*x97))+(((-1.0)*x133*x153))+((x146*x91))+(((-1.0)*x120*x153))+(((-1.0)*gconst4*x93*x96))+((x102*x93))+(((-1.0)*x131*x90))+(((-1.0)*gconst0*x111*x96))+((x137*x94))+(((-1.0)*x150*x153))+((x153*x91))+((x135*x153))+((x110*x153))+((gconst14*gconst3*x157))+(((-1.0)*gconst4*gconst8*x155))+((gconst1*gconst12*x155))+((x151*x153))+(((-1.0)*gconst10*gconst5*x153))+(((-1.0)*x102*x158))+((gconst0*gconst14*x153))+(((-1.0)*gconst0*gconst15*x153))+((x115*x153))+(((-1.0)*x149*x95))+((x146*x153))+(((-1.0)*x145*x157))+((gconst0*gconst13*x155))+(((-1.0)*x100*x113))+((gconst15*gconst2*x157))+(((-1.0)*x136*x94))+(((-1.0)*gconst10*x152*x95))+((gconst4*gconst9*x155))+(((-1.0)*x111*x153))+(((-1.0)*gconst11*x106*x109))+(((-1.0)*x149*x153))+((x105*x117))+(((-0.001817321472)*x164))+(((-0.788768)*x163))+((gconst5*gconst8*x155))+(((-0.788768)*gconst12*x162))+((x118*x121))+(((-1.0)*gconst5*gconst9*x155))+(((-1.0)*gconst14*gconst2*x157))+(((-1.0)*x113*x158))+(((-1.0)*gconst3*x109*x97))+(((-1.0)*gconst1*gconst13*x155))+((x100*x105)));
op[5]=((((-1.0)*gconst3*x142*x92))+(((-0.048)*x132*x98))+(((-0.048)*x121*x98))+(((-2.0)*x102*x88))+((gconst15*x88*x89))+((gconst6*x100*x128))+((x113*x154))+(((-1.0)*gconst3*x88*x92))+((gconst4*x165))+((px*x150*x89))+(((-1.0)*gconst7*x100*x128))+(((0.048)*x138*x88))+(((-1.0)*gconst8*x139*x94))+((x107*x156))+(((-1.0)*gconst3*x113*x128))+(((-1.0)*x154*x97))+(((-1.0)*x154*x91))+(((-1.0)*gconst1*x89*x98))+((px*x148*x89))+(((0.037860864)*px*x162))+((gconst8*x128*x141))+(((-1.0)*x121*x160))+(((0.048)*x106*x108))+(((0.048)*x131*x98))+((gconst9*x139*x94))+(((-1.0)*gconst1*x139*x97))+(((-2.0)*x110*x88))+((gconst2*x142*x92))+x178+(((-1.0)*gconst13*x119*x88))+(((-1.0)*px*x117*x89))+(((-0.048)*x108*x94))+((x121*x156))+(((-1.0)*gconst3*x115*x128))+(((-1.0)*px*x100*x89))+((gconst3*x128*x97))+((px*x100*x122))+((px*x114*x94))+(((0.048)*x145*x88))+((px*x122*x95))+(((-1.0)*gconst8*x119*x142))+(((2.0)*x88*x97))+(((-1.0)*px*x89*x91))+((px*x117*x122))+(((-1.0)*gconst4*x103*x128))+((gconst6*x117*x128))+(((2.0)*x111*x88))+(((-2.0)*x113*x88))+((gconst11*x88*x89))+(((-0.048)*x140*x88))+((px*x121*x92)));
op[6]=((((-1.0)*x158*x94))+(((-1.0)*x131*x153))+(((-1.0)*x159*x97))+(((-1.0)*gconst2*gconst5*x153))+((gconst3*gconst5*x153))+((x148*x94))+(((-1.0)*gconst2*gconst6*x157))+((x102*x147))+((x126*x153))+(((-1.0)*x179))+(((-1.0)*gconst0*x131*x96))+(((-1.0)*x107*x149))+(((-1.0)*gconst0*gconst4*x155))+((gconst2*gconst7*x157))+(((-1.0)*gconst0*gconst7*x153))+(((-1.0)*gconst1*gconst5*x155))+(((-1.0)*x100*x94))+((x104*x153))+(((-1.0)*x106*x93))+((x104*x144))+((x121*x97))+(((-1.0)*x107*x153))+(((-1.0)*x141*x157))+((x105*x121))+((x93*x94))+((gconst0*gconst5*x155))+((gconst1*gconst4*x155))+(((-1.0)*gconst2*x152*x95))+((x132*x91))+(((-1.0)*gconst3*x106*x109))+((x132*x153))+(((-0.788768)*gconst4*x162))+((x100*x106))+((x130*x157)));
op[7]=((((-1.0)*px*x126*x89))+((gconst1*x139*x94))+((x107*x154))+(((-1.0)*gconst5*x119*x88))+x177+((gconst7*x88*x89))+(((-0.048)*x130*x88))+((gconst3*x106*x128))+(((-2.0)*x88*x94))+(((-1.0)*gconst3*x128*x94))+(((-1.0)*gconst7*x121*x128))+((gconst3*x88*x89))+((px*x121*x122))+(((-1.0)*x106*x154))+(((-1.0)*px*x121*x89))+((x154*x94))+(((0.048)*x141*x88)));
op[8]=(((x147*x94))+(((-1.0)*x176))+((x106*x121))+(((-1.0)*x106*x159))+(((-1.0)*x121*x94)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
{
IkReal j1eval[2];
IkReal x180=py*py;
IkReal x181=cj0*cj0;
IkReal x182=px*px;
IkReal x183=pz*pz;
IkReal x184=((1.0)*sj2);
IkReal x185=(sj2*x180);
IkReal x186=((421.0)*x181);
IkReal x187=(cj0*px*py*sj0*sj2);
j1eval[0]=((((-1.0)*x181*x182*x184))+(((-1.0)*x180*x184))+(((-2.0)*x187))+(((-1.0)*x183*x184))+((x181*x185)));
j1eval[1]=IKsign(((((-842.0)*x187))+(((-421.0)*sj2*x183))+((x185*x186))+(((-1.0)*sj2*x182*x186))+(((-421.0)*x185))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.04566773075934)+(((3.78231992374843)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x188=((78500.0)*sj3);
IkReal x189=(py*sj0);
IkReal x190=(cj0*px);
IkReal x191=((78500.0)*cj3);
j1eval[0]=((-1.043303780807)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-68959.25)+(((-66097.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*x189*x191))+(((-1.0)*pz*x188))+(((-1.0)*x190*x191))+(((-105250.0)*x190))+(((-105250.0)*x189)))))+(IKabs(((((-1.0)*x188*x189))+(((-1.0)*x188*x190))+(((105250.0)*pz))+((pz*x191))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x192=(cj0*px);
IkReal x193=((500.0)*pz);
IkReal x194=((157.0)*cj3);
IkReal x195=(py*sj0);
IkReal x196=((1.0)*cj3);
IkReal x197=(pz*sj3);
j1eval[0]=((((-1.0)*x192*x196))+(((-1.0)*x195*x196))+x197+(((-1.34076433121019)*x195))+(((-1.34076433121019)*x192)));
j1eval[1]=((IKabs((((x193*x195))+((x192*x193))+(((-49.298)*cj3*sj3))+(((-66.097)*sj3)))))+(IKabs(((-88.6205)+(((-49.298)*(cj3*cj3)))+(((-132.194)*cj3))+((pz*x193))))));
j1eval[2]=IKsign(((((-1.0)*x194*x195))+(((-1.0)*x192*x194))+(((157.0)*x197))+(((-210.5)*x192))+(((-210.5)*x195))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x198=cj0*cj0;
IkReal x199=py*py;
IkReal x200=pz*pz;
IkReal x201=px*px;
IkReal x202=(py*sj0);
IkReal x203=(cj0*px);
IkReal x204=((157.0)*cj3);
IkReal x205=((157.0)*sj3);
IkReal x206=(x198*x199);
IkReal x207=(x198*x201);
j1eval[0]=(x199+(((2.0)*x202*x203))+x207+x200+(((-1.0)*x206)));
j1eval[1]=IKsign(((((500.0)*x207))+(((500.0)*x200))+(((1000.0)*x202*x203))+(((-500.0)*x206))+(((500.0)*x199))));
j1eval[2]=((IKabs(((((210.5)*x202))+(((210.5)*x203))+((pz*x205))+((x202*x204))+((x203*x204)))))+(IKabs(((((-1.0)*pz*x204))+(((-210.5)*pz))+((x202*x205))+((x203*x205))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x208=cj0*cj0;
IkReal x209=py*py;
IkReal x210=(cj0*px);
IkReal x211=(py*sj0);
IkReal x212=((157.0)*cj3);
IkReal x213=((157.0)*sj3);
IkReal x214=((500.0)*x208);
CheckValue<IkReal> x215 = IKatan2WithCheck(IkReal((((x210*x212))+((pz*x213))+((x211*x212))+(((210.5)*x211))+(((210.5)*x210)))),IkReal(((((-1.0)*pz*x212))+((x210*x213))+((x211*x213))+(((-210.5)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKsign(((((500.0)*x209))+((x214*(px*px)))+(((500.0)*(pz*pz)))+(((-1.0)*x209*x214))+(((1000.0)*x210*x211)))),-1);
if(!x216.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x215.value)+(((1.5707963267949)*(x216.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x217=IKcos(j1);
IkReal x218=IKsin(j1);
IkReal x219=((0.314)*sj3);
IkReal x220=(cj0*px);
IkReal x221=(py*sj0);
IkReal x222=((1.0)*pz);
IkReal x223=((0.314)*cj3);
IkReal x224=((1.0)*x217);
IkReal x225=((0.842)*x218);
evalcond[0]=(((x218*x219))+(((-0.421)*x217))+(((-1.0)*x217*x223))+(((-1.0)*x222)));
evalcond[1]=((-0.421)+((x218*x220))+((x218*x221))+(((-1.0)*x217*x222))+(((-1.0)*x223)));
evalcond[2]=(x219+(((-1.0)*x220*x224))+(((-1.0)*x218*x222))+(((-1.0)*x221*x224)));
evalcond[3]=(((x218*x223))+(((0.421)*x218))+((x217*x219))+(((-1.0)*x221))+(((-1.0)*x220)));
evalcond[4]=((-0.07862)+(((-0.024)*px*sj0))+(((-1.0)*pp))+((x220*x225))+(((0.024)*cj0*py))+(((-0.842)*pz*x217))+((x221*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1658=(cj0*px);
IkReal x1659=((500.0)*pz);
IkReal x1660=((157.0)*cj3);
IkReal x1661=(py*sj0);
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1660*x1661))+(((-1.0)*x1658*x1660))+(((157.0)*pz*sj3))+(((-210.5)*x1658))+(((-210.5)*x1661)))),-1);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((-88.6205)+((pz*x1659))+(((-49.298)*(cj3*cj3)))+(((-132.194)*cj3)))),IkReal((((x1658*x1659))+((x1659*x1661))+(((-49.298)*cj3*sj3))+(((-66.097)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1662.value)))+(x1663.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1664=IKcos(j1);
IkReal x1665=IKsin(j1);
IkReal x1666=((0.314)*sj3);
IkReal x1667=(cj0*px);
IkReal x1668=(py*sj0);
IkReal x1669=((1.0)*pz);
IkReal x1670=((0.314)*cj3);
IkReal x1671=((1.0)*x1664);
IkReal x1672=((0.842)*x1665);
evalcond[0]=((((-0.421)*x1664))+(((-1.0)*x1669))+(((-1.0)*x1664*x1670))+((x1665*x1666)));
evalcond[1]=((-0.421)+((x1665*x1667))+((x1665*x1668))+(((-1.0)*x1670))+(((-1.0)*x1664*x1669)));
evalcond[2]=((((-1.0)*x1667*x1671))+(((-1.0)*x1668*x1671))+x1666+(((-1.0)*x1665*x1669)));
evalcond[3]=(((x1665*x1670))+(((-1.0)*x1668))+(((-1.0)*x1667))+(((0.421)*x1665))+((x1664*x1666)));
evalcond[4]=((-0.07862)+(((-0.024)*px*sj0))+((x1667*x1672))+((x1668*x1672))+(((-1.0)*pp))+(((0.024)*cj0*py))+(((-0.842)*pz*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1673=((78500.0)*sj3);
IkReal x1674=(py*sj0);
IkReal x1675=((78500.0)*cj3);
IkReal x1676=(cj0*px);
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1673))+(((-1.0)*x1674*x1675))+(((-1.0)*x1675*x1676))+(((-105250.0)*x1674))+(((-105250.0)*x1676)))),IkReal(((((-1.0)*x1673*x1676))+(((-1.0)*x1673*x1674))+((pz*x1675))+(((105250.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(IKsign(((-68959.25)+(((-66097.0)*cj3)))),-1);
if(!x1678.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1677.value)+(((1.5707963267949)*(x1678.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1679=IKcos(j1);
IkReal x1680=IKsin(j1);
IkReal x1681=((0.314)*sj3);
IkReal x1682=(cj0*px);
IkReal x1683=(py*sj0);
IkReal x1684=((1.0)*pz);
IkReal x1685=((0.314)*cj3);
IkReal x1686=((1.0)*x1679);
IkReal x1687=((0.842)*x1680);
evalcond[0]=((((-1.0)*x1684))+((x1680*x1681))+(((-1.0)*x1679*x1685))+(((-0.421)*x1679)));
evalcond[1]=((-0.421)+(((-1.0)*x1685))+((x1680*x1682))+((x1680*x1683))+(((-1.0)*x1679*x1684)));
evalcond[2]=((((-1.0)*x1682*x1686))+x1681+(((-1.0)*x1683*x1686))+(((-1.0)*x1680*x1684)));
evalcond[3]=(((x1680*x1685))+(((-1.0)*x1682))+(((-1.0)*x1683))+((x1679*x1681))+(((0.421)*x1680)));
evalcond[4]=((-0.07862)+(((-0.024)*px*sj0))+(((-0.842)*pz*x1679))+(((-1.0)*pp))+(((0.024)*cj0*py))+((x1682*x1687))+((x1683*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.04330756312692)+(((3.78231992374843)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1688=((78500.0)*sj3);
IkReal x1689=(py*sj0);
IkReal x1690=(cj0*px);
IkReal x1691=((78500.0)*cj3);
j1eval[0]=((-1.043303780807)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-68959.25)+(((-66097.0)*cj3))));
j1eval[2]=((IKabs((((x1688*x1689))+((x1688*x1690))+((pz*x1691))+(((105250.0)*pz)))))+(IKabs(((((-105250.0)*x1690))+(((-105250.0)*x1689))+(((-1.0)*x1690*x1691))+((pz*x1688))+(((-1.0)*x1689*x1691))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1692=(cj0*px);
IkReal x1693=((500.0)*pz);
IkReal x1694=((157.0)*cj3);
IkReal x1695=(py*sj0);
IkReal x1696=((1.0)*cj3);
IkReal x1697=(pz*sj3);
j1eval[0]=((((-1.0)*x1692*x1696))+(((-1.0)*x1697))+(((-1.0)*x1695*x1696))+(((-1.34076433121019)*x1692))+(((-1.34076433121019)*x1695)));
j1eval[1]=((IKabs(((((66.097)*sj3))+((x1692*x1693))+(((49.298)*cj3*sj3))+((x1693*x1695)))))+(IKabs(((-88.6205)+(((-49.298)*(cj3*cj3)))+((pz*x1693))+(((-132.194)*cj3))))));
j1eval[2]=IKsign(((((-1.0)*x1692*x1694))+(((-1.0)*x1694*x1695))+(((-210.5)*x1695))+(((-210.5)*x1692))+(((-157.0)*x1697))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1698=py*py;
IkReal x1699=cj0*cj0;
IkReal x1700=pz*pz;
IkReal x1701=px*px;
IkReal x1702=(cj0*px);
IkReal x1703=(py*sj0);
IkReal x1704=((157.0)*cj3);
IkReal x1705=((157.0)*sj3);
IkReal x1706=(x1699*x1701);
IkReal x1707=(x1698*x1699);
j1eval[0]=(x1707+(((-1.0)*x1706))+(((-1.0)*x1700))+(((-1.0)*x1698))+(((-2.0)*x1702*x1703)));
j1eval[1]=((IKabs(((((210.5)*pz))+((x1703*x1705))+((x1702*x1705))+((pz*x1704)))))+(IKabs(((((-1.0)*x1702*x1704))+(((-1.0)*x1703*x1704))+(((-210.5)*x1703))+(((-210.5)*x1702))+((pz*x1705))))));
j1eval[2]=IKsign(((((-500.0)*x1698))+(((500.0)*x1707))+(((-1000.0)*x1702*x1703))+(((-500.0)*x1700))+(((-500.0)*x1706))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1708=py*py;
IkReal x1709=cj0*cj0;
IkReal x1710=(cj0*px);
IkReal x1711=(py*sj0);
IkReal x1712=((157.0)*cj3);
IkReal x1713=((157.0)*sj3);
IkReal x1714=((500.0)*x1709);
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal(((((-1.0)*x1710*x1712))+(((-1.0)*x1711*x1712))+((pz*x1713))+(((-210.5)*x1711))+(((-210.5)*x1710)))),IkReal((((x1710*x1713))+(((210.5)*pz))+((x1711*x1713))+((pz*x1712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(IKsign(((((-500.0)*(pz*pz)))+(((-1000.0)*x1710*x1711))+(((-1.0)*x1714*(px*px)))+(((-500.0)*x1708))+((x1708*x1714)))),-1);
if(!x1716.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1715.value)+(((1.5707963267949)*(x1716.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1717=IKcos(j1);
IkReal x1718=IKsin(j1);
IkReal x1719=((0.314)*sj3);
IkReal x1720=(cj0*px);
IkReal x1721=(py*sj0);
IkReal x1722=((0.314)*cj3);
IkReal x1723=(pz*x1717);
IkReal x1724=((0.842)*x1718);
evalcond[0]=((((-0.421)*x1717))+(((-1.0)*x1718*x1719))+(((-1.0)*pz))+(((-1.0)*x1717*x1722)));
evalcond[1]=(x1719+((x1717*x1720))+((x1717*x1721))+((pz*x1718)));
evalcond[2]=((-0.421)+((x1718*x1720))+((x1718*x1721))+(((-1.0)*x1723))+(((-1.0)*x1722)));
evalcond[3]=(((x1718*x1722))+(((-1.0)*x1720))+(((-1.0)*x1721))+(((0.421)*x1718))+(((-1.0)*x1717*x1719)));
evalcond[4]=((-0.07862)+(((-0.842)*x1723))+(((-0.024)*px*sj0))+((x1721*x1724))+(((-1.0)*pp))+((x1720*x1724))+(((0.024)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1725=(cj0*px);
IkReal x1726=((500.0)*pz);
IkReal x1727=((157.0)*cj3);
IkReal x1728=(py*sj0);
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(IKsign(((((-157.0)*pz*sj3))+(((-210.5)*x1728))+(((-210.5)*x1725))+(((-1.0)*x1725*x1727))+(((-1.0)*x1727*x1728)))),-1);
if(!x1729.valid){
continue;
}
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal(((-88.6205)+((pz*x1726))+(((-49.298)*(cj3*cj3)))+(((-132.194)*cj3)))),IkReal(((((66.097)*sj3))+((x1725*x1726))+((x1726*x1728))+(((49.298)*cj3*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1729.value)))+(x1730.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1731=IKcos(j1);
IkReal x1732=IKsin(j1);
IkReal x1733=((0.314)*sj3);
IkReal x1734=(cj0*px);
IkReal x1735=(py*sj0);
IkReal x1736=((0.314)*cj3);
IkReal x1737=(pz*x1731);
IkReal x1738=((0.842)*x1732);
evalcond[0]=((((-1.0)*x1731*x1736))+(((-1.0)*pz))+(((-0.421)*x1731))+(((-1.0)*x1732*x1733)));
evalcond[1]=(((x1731*x1734))+((x1731*x1735))+x1733+((pz*x1732)));
evalcond[2]=((-0.421)+((x1732*x1735))+((x1732*x1734))+(((-1.0)*x1737))+(((-1.0)*x1736)));
evalcond[3]=((((-1.0)*x1731*x1733))+(((0.421)*x1732))+((x1732*x1736))+(((-1.0)*x1734))+(((-1.0)*x1735)));
evalcond[4]=((-0.07862)+(((-0.024)*px*sj0))+(((-0.842)*x1737))+((x1734*x1738))+(((-1.0)*pp))+((x1735*x1738))+(((0.024)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1739=((78500.0)*sj3);
IkReal x1740=(py*sj0);
IkReal x1741=((78500.0)*cj3);
IkReal x1742=(cj0*px);
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal(((((-1.0)*x1741*x1742))+(((-1.0)*x1740*x1741))+((pz*x1739))+(((-105250.0)*x1740))+(((-105250.0)*x1742)))),IkReal((((pz*x1741))+((x1739*x1742))+((x1739*x1740))+(((105250.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(IKsign(((-68959.25)+(((-66097.0)*cj3)))),-1);
if(!x1744.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1743.value)+(((1.5707963267949)*(x1744.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1745=IKcos(j1);
IkReal x1746=IKsin(j1);
IkReal x1747=((0.314)*sj3);
IkReal x1748=(cj0*px);
IkReal x1749=(py*sj0);
IkReal x1750=((0.314)*cj3);
IkReal x1751=(pz*x1745);
IkReal x1752=((0.842)*x1746);
evalcond[0]=((((-1.0)*pz))+(((-1.0)*x1746*x1747))+(((-1.0)*x1745*x1750))+(((-0.421)*x1745)));
evalcond[1]=(((pz*x1746))+x1747+((x1745*x1748))+((x1745*x1749)));
evalcond[2]=((-0.421)+((x1746*x1748))+((x1746*x1749))+(((-1.0)*x1750))+(((-1.0)*x1751)));
evalcond[3]=(((x1746*x1750))+(((-1.0)*x1745*x1747))+(((-1.0)*x1749))+(((-1.0)*x1748))+(((0.421)*x1746)));
evalcond[4]=((-0.07862)+(((-0.024)*px*sj0))+((x1749*x1752))+(((-1.0)*pp))+(((0.024)*cj0*py))+((x1748*x1752))+(((-0.842)*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1753=(px*sj0);
IkReal x1754=(cj0*py);
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(sj2,-1);
if(!x1755.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1755.value)*(((-6.0)+(((-6.5)*cj2))+(((-500.0)*x1753))+(((500.0)*x1754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04339833880509)+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1754))+(((0.0907756781699623)*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1755.value)*(((-6.0)+(((-6.5)*cj2))+(((-500.0)*x1753))+(((500.0)*x1754))))))+IKsqr(((-1.04339833880509)+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1754))+(((0.0907756781699623)*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1755.value)*(((-6.0)+(((-6.5)*cj2))+(((-500.0)*x1753))+(((500.0)*x1754))))), ((-1.04339833880509)+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1754))+(((0.0907756781699623)*x1753))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1756=(px*sj0);
IkReal x1757=(cj0*py);
evalcond[0]=((0.275862)+(((-0.024)*x1756))+(((0.264388)*(IKcos(j3))))+(((-1.0)*pp))+(((0.024)*x1757)));
evalcond[1]=((-0.012)+x1757+(((-0.314)*sj2*(IKsin(j3))))+(((-0.013)*cj2))+(((-1.0)*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x1758=(py*sj0);
IkReal x1759=(cj2*sj3);
IkReal x1760=(pz*sj2);
IkReal x1761=((24.1538461538462)*cj3);
IkReal x1762=(cj0*px);
IkReal x1763=((0.314)*cj3);
j1eval[0]=((((-1.0)*x1760))+(((-32.3846153846154)*x1762))+(((24.1538461538462)*pz*x1759))+(((-1.0)*x1761*x1762))+(((-1.0)*x1758*x1761))+(((-32.3846153846154)*x1758)));
j1eval[1]=((IKabs(((((0.004082)*cj3*sj2))+((pz*x1758))+(((-0.132194)*x1759))+(((-0.098596)*cj3*x1759))+((pz*x1762))+(((0.005473)*sj2)))))+(IKabs(((-0.177241)+(((-0.098596)*(cj3*cj3)))+(pz*pz)+(((-0.264388)*cj3))))));
j1eval[2]=IKsign(((((-1.0)*x1762*x1763))+(((-0.421)*x1758))+(((0.314)*pz*x1759))+(((-0.013)*x1760))+(((-0.421)*x1762))+(((-1.0)*x1758*x1763))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1764=cj2*cj2;
IkReal x1765=cj3*cj3;
IkReal x1766=((12.0769230769231)*x1765);
IkReal x1767=((0.098596)*x1765);
IkReal x1768=(cj2*sj2*sj3);
j1eval[0]=((21.7307692307692)+(((-1.0)*x1768))+x1766+(((12.0562224399804)*x1764))+(((32.3846153846154)*cj3))+(((-1.0)*x1764*x1766)));
j1eval[1]=IKsign(((0.17741)+(((0.264388)*cj3))+x1767+(((-0.008164)*x1768))+(((-1.0)*x1764*x1767))+(((0.098427)*x1764))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1769=(py*sj0);
IkReal x1770=((0.013)*sj2);
IkReal x1771=(cj3*pz);
IkReal x1772=(cj0*px);
IkReal x1773=((24.1538461538462)*cj2*sj3);
IkReal x1774=((0.314)*cj2*sj3);
j1eval[0]=((((-1.0)*x1772*x1773))+((sj2*x1769))+(((-24.1538461538462)*x1771))+(((-32.3846153846154)*pz))+((sj2*x1772))+(((-1.0)*x1769*x1773)));
j1eval[1]=IKsign(((((-1.0)*x1772*x1774))+((x1770*x1772))+(((-0.421)*pz))+(((-0.314)*x1771))+(((-1.0)*x1769*x1774))+((x1769*x1770))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1775=py*py;
IkReal x1776=cj0*cj0;
IkReal x1777=(cj0*px);
IkReal x1778=(py*sj0);
IkReal x1779=(cj2*sj3);
IkReal x1780=((0.013)*sj2);
IkReal x1781=((1.0)*pz);
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(IKsign(((((-0.314)*x1777*x1779))+((x1777*x1780))+(((-0.421)*pz))+((x1778*x1780))+(((-0.314)*cj3*pz))+(((-0.314)*x1778*x1779)))),-1);
if(!x1782.valid){
continue;
}
CheckValue<IkReal> x1783 = IKatan2WithCheck(IkReal(((((0.004082)*cj3*sj2))+(((-1.0)*x1777*x1781))+(((-1.0)*x1778*x1781))+(((-0.098596)*cj3*x1779))+(((-0.132194)*x1779))+(((0.005473)*sj2)))),IkReal(((0.177241)+(((0.264388)*cj3))+(((0.098596)*(cj3*cj3)))+(((-1.0)*x1775))+(((-1.0)*x1776*(px*px)))+((x1775*x1776))+(((-2.0)*x1777*x1778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1783.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1782.value)))+(x1783.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1784=IKsin(j1);
IkReal x1785=IKcos(j1);
IkReal x1786=(px*sj0);
IkReal x1787=(cj0*py);
IkReal x1788=((0.314)*sj3);
IkReal x1789=((1.0)*cj2);
IkReal x1790=(cj0*px);
IkReal x1791=(py*sj0);
IkReal x1792=((1.0)*pz);
IkReal x1793=((0.314)*cj3);
IkReal x1794=((1.0)*x1785);
IkReal x1795=(sj2*x1784);
IkReal x1796=((0.842)*x1784);
evalcond[0]=((-0.421)+(((-1.0)*x1793))+(((-1.0)*x1785*x1792))+((x1784*x1790))+((x1784*x1791)));
evalcond[1]=((((-1.0)*x1792))+(((-1.0)*x1785*x1793))+((cj2*x1784*x1788))+(((-0.421)*x1785))+(((-0.013)*x1795)));
evalcond[2]=((-0.07862)+(((-0.842)*pz*x1785))+(((-0.024)*x1786))+(((-1.0)*pp))+(((0.024)*x1787))+((x1790*x1796))+((x1791*x1796)));
evalcond[3]=(((cj2*x1785*x1788))+(((0.421)*x1784))+(((-0.013)*sj2*x1785))+((x1784*x1793))+(((-1.0)*x1791))+(((-1.0)*x1790)));
evalcond[4]=((-0.013)+(((-1.0)*sj2*x1790*x1794))+(((-1.0)*x1792*x1795))+((cj2*x1787))+(((-0.012)*cj2))+(((-1.0)*x1786*x1789))+(((-1.0)*sj2*x1791*x1794)));
evalcond[5]=((((-1.0)*sj2*x1787))+((sj2*x1786))+(((-1.0)*x1785*x1789*x1790))+(((-1.0)*x1785*x1789*x1791))+x1788+(((-1.0)*pz*x1784*x1789))+(((0.012)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1797=cj2*cj2;
IkReal x1798=cj3*cj3;
IkReal x1799=((0.013)*sj2);
IkReal x1800=((0.314)*cj3);
IkReal x1801=(py*sj0);
IkReal x1802=(cj0*px);
IkReal x1803=((0.098596)*x1798);
IkReal x1804=((0.314)*cj2*sj3);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign(((0.17741)+(((0.264388)*cj3))+(((0.098427)*x1797))+(((-0.008164)*cj2*sj2*sj3))+(((-1.0)*x1797*x1803))+x1803)),-1);
if(!x1805.valid){
continue;
}
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal((((x1800*x1802))+((x1800*x1801))+(((0.421)*x1802))+(((0.421)*x1801))+(((-1.0)*pz*x1799))+((pz*x1804)))),IkReal((((x1802*x1804))+((x1801*x1804))+(((-1.0)*x1799*x1801))+(((-1.0)*x1799*x1802))+(((-0.421)*pz))+(((-1.0)*pz*x1800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1805.value)))+(x1806.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1807=IKsin(j1);
IkReal x1808=IKcos(j1);
IkReal x1809=(px*sj0);
IkReal x1810=(cj0*py);
IkReal x1811=((0.314)*sj3);
IkReal x1812=((1.0)*cj2);
IkReal x1813=(cj0*px);
IkReal x1814=(py*sj0);
IkReal x1815=((1.0)*pz);
IkReal x1816=((0.314)*cj3);
IkReal x1817=((1.0)*x1808);
IkReal x1818=(sj2*x1807);
IkReal x1819=((0.842)*x1807);
evalcond[0]=((-0.421)+(((-1.0)*x1816))+(((-1.0)*x1808*x1815))+((x1807*x1814))+((x1807*x1813)));
evalcond[1]=((((-1.0)*x1815))+(((-0.421)*x1808))+(((-1.0)*x1808*x1816))+(((-0.013)*x1818))+((cj2*x1807*x1811)));
evalcond[2]=((-0.07862)+(((-0.842)*pz*x1808))+((x1813*x1819))+(((-1.0)*pp))+(((0.024)*x1810))+((x1814*x1819))+(((-0.024)*x1809)));
evalcond[3]=(((cj2*x1808*x1811))+(((0.421)*x1807))+(((-0.013)*sj2*x1808))+((x1807*x1816))+(((-1.0)*x1814))+(((-1.0)*x1813)));
evalcond[4]=((-0.013)+((cj2*x1810))+(((-1.0)*x1809*x1812))+(((-1.0)*sj2*x1813*x1817))+(((-0.012)*cj2))+(((-1.0)*sj2*x1814*x1817))+(((-1.0)*x1815*x1818)));
evalcond[5]=((((-1.0)*pz*x1807*x1812))+(((-1.0)*x1808*x1812*x1813))+(((-1.0)*x1808*x1812*x1814))+x1811+((sj2*x1809))+(((-1.0)*sj2*x1810))+(((0.012)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1820=(cj2*sj3);
IkReal x1821=(py*sj0);
IkReal x1822=(cj0*px);
IkReal x1823=((0.314)*cj3);
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal(((-0.177241)+(((-0.098596)*(cj3*cj3)))+(pz*pz)+(((-0.264388)*cj3)))),IkReal(((((0.004082)*cj3*sj2))+(((-0.098596)*cj3*x1820))+((pz*x1822))+((pz*x1821))+(((-0.132194)*x1820))+(((0.005473)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(IKsign(((((0.314)*pz*x1820))+(((-1.0)*x1821*x1823))+(((-1.0)*x1822*x1823))+(((-0.421)*x1822))+(((-0.421)*x1821))+(((-0.013)*pz*sj2)))),-1);
if(!x1825.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1824.value)+(((1.5707963267949)*(x1825.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j1);
IkReal x1827=IKcos(j1);
IkReal x1828=(px*sj0);
IkReal x1829=(cj0*py);
IkReal x1830=((0.314)*sj3);
IkReal x1831=((1.0)*cj2);
IkReal x1832=(cj0*px);
IkReal x1833=(py*sj0);
IkReal x1834=((1.0)*pz);
IkReal x1835=((0.314)*cj3);
IkReal x1836=((1.0)*x1827);
IkReal x1837=(sj2*x1826);
IkReal x1838=((0.842)*x1826);
evalcond[0]=((-0.421)+((x1826*x1833))+((x1826*x1832))+(((-1.0)*x1835))+(((-1.0)*x1827*x1834)));
evalcond[1]=(((cj2*x1826*x1830))+(((-1.0)*x1834))+(((-1.0)*x1827*x1835))+(((-0.013)*x1837))+(((-0.421)*x1827)));
evalcond[2]=((-0.07862)+(((-0.842)*pz*x1827))+(((-1.0)*pp))+(((0.024)*x1829))+((x1832*x1838))+((x1833*x1838))+(((-0.024)*x1828)));
evalcond[3]=((((-1.0)*x1832))+(((-1.0)*x1833))+((x1826*x1835))+(((0.421)*x1826))+((cj2*x1827*x1830))+(((-0.013)*sj2*x1827)));
evalcond[4]=((-0.013)+(((-1.0)*x1834*x1837))+(((-1.0)*x1828*x1831))+(((-0.012)*cj2))+((cj2*x1829))+(((-1.0)*sj2*x1833*x1836))+(((-1.0)*sj2*x1832*x1836)));
evalcond[5]=((((-1.0)*x1827*x1831*x1832))+(((-1.0)*x1827*x1831*x1833))+x1830+(((-1.0)*pz*x1826*x1831))+(((0.012)*sj2))+((sj2*x1828))+(((-1.0)*sj2*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1839=cj0*cj0;
IkReal x1840=py*py;
IkReal x1841=px*px;
IkReal x1842=(cj0*sj2);
IkReal x1843=(py*sj0);
IkReal x1844=((12.0)*py);
IkReal x1845=(cj0*cj2);
IkReal x1846=((421.0)*sj0);
IkReal x1847=(px*sj2);
IkReal x1848=((5.052)*cj2);
IkReal x1849=((421.0)*py);
IkReal x1850=((39.31)*sj2);
IkReal x1851=((421.0)*sj2);
IkReal x1852=((12.0)*sj0);
IkReal x1853=(cj2*px);
IkReal x1854=((500.0)*pp*sj2);
IkReal x1855=(x1840*x1851);
IkReal x1856=(px*py*x1839);
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(IKsign(((((-842.0)*px*x1842*x1843))+(((-1.0)*x1851*(pz*pz)))+(((-1.0)*x1839*x1841*x1851))+((x1839*x1855))+(((-1.0)*x1855)))),-1);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(((((24.0)*py*x1839*x1847))+(((-500.0)*pp*px*x1842))+((x1840*x1842*x1852))+(((-39.31)*px*x1842))+(((-1.0)*pz*x1845*x1849))+(((5.473)*pz))+(((-1.0)*x1841*x1842*x1852))+(((-1.0)*x1843*x1854))+(((-1.0)*x1843*x1850))+((pz*x1848))+(((-1.0)*x1844*x1847))+((pz*x1846*x1853)))),IkReal((((pz*x1847*x1852))+(((5.473)*x1843))+(((5.473)*cj0*px))+((pz*x1854))+((pz*x1850))+((x1849*x1853))+(((-842.0)*py*x1839*x1853))+((x1841*x1845*x1846))+(((-1.0)*pz*x1842*x1844))+((x1843*x1848))+(((5.052)*px*x1845))+(((-1.0)*x1840*x1845*x1846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1857.value)))+(x1858.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1859=IKsin(j1);
IkReal x1860=IKcos(j1);
IkReal x1861=(px*sj0);
IkReal x1862=(cj0*py);
IkReal x1863=(cj0*px);
IkReal x1864=(py*sj0);
IkReal x1865=((1.0)*sj2);
IkReal x1866=((0.842)*x1859);
evalcond[0]=((-0.07862)+((x1864*x1866))+(((-0.842)*pz*x1860))+((x1863*x1866))+(((-1.0)*pp))+(((-0.024)*x1861))+(((0.024)*x1862)));
evalcond[1]=((-0.013)+(((-1.0)*cj2*x1861))+(((-1.0)*x1860*x1864*x1865))+(((-1.0)*pz*x1859*x1865))+(((-0.012)*cj2))+(((-1.0)*x1860*x1863*x1865))+((cj2*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1867=((3.18471337579618)*cj1);
if( IKabs((((py*sj0*x1867))+(((3.18471337579618)*pz*sj1))+((cj0*px*x1867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04566773075934)+(((3.78231992374843)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*sj0*x1867))+(((3.18471337579618)*pz*sj1))+((cj0*px*x1867))))+IKsqr(((-1.04566773075934)+(((3.78231992374843)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((py*sj0*x1867))+(((3.18471337579618)*pz*sj1))+((cj0*px*x1867))), ((-1.04566773075934)+(((3.78231992374843)*pp))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1868=IKcos(j3);
IkReal x1869=IKsin(j3);
IkReal x1870=((1.0)*pz);
IkReal x1871=((1.0)*py*sj0);
IkReal x1872=((0.314)*x1868);
IkReal x1873=((0.314)*x1869);
IkReal x1874=((1.0)*cj0*px);
evalcond[0]=((0.276462)+(((0.264388)*x1868))+(((-1.0)*pp)));
evalcond[1]=((-0.328339667458432)+(((-1.0)*x1872))+(((1.18764845605701)*pp)));
evalcond[2]=((((-1.0)*x1870))+((sj1*x1873))+(((-1.0)*cj1*x1872))+(((-0.421)*cj1)));
evalcond[3]=((((-1.0)*sj1*x1870))+(((-1.0)*cj1*x1874))+(((-1.0)*cj1*x1871))+x1873);
evalcond[4]=((((-1.0)*x1874))+(((-1.0)*x1871))+(((0.421)*sj1))+((sj1*x1872))+((cj1*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1875=((3.18471337579618)*cj1);
if( IKabs(((((-3.18471337579618)*pz*sj1))+(((-1.0)*py*sj0*x1875))+(((-1.0)*cj0*px*x1875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04330756312692)+(((3.78231992374843)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.18471337579618)*pz*sj1))+(((-1.0)*py*sj0*x1875))+(((-1.0)*cj0*px*x1875))))+IKsqr(((-1.04330756312692)+(((3.78231992374843)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-3.18471337579618)*pz*sj1))+(((-1.0)*py*sj0*x1875))+(((-1.0)*cj0*px*x1875))), ((-1.04330756312692)+(((3.78231992374843)*pp))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1876=IKcos(j3);
IkReal x1877=IKsin(j3);
IkReal x1878=(py*sj0);
IkReal x1879=(cj0*px);
IkReal x1880=((0.314)*x1876);
IkReal x1881=((0.314)*x1877);
evalcond[0]=((0.275838)+(((0.264388)*x1876))+(((-1.0)*pp)));
evalcond[1]=((-0.327598574821853)+(((1.18764845605701)*pp))+(((-1.0)*x1880)));
evalcond[2]=(((cj1*x1878))+((cj1*x1879))+x1881+((pz*sj1)));
evalcond[3]=((((-1.0)*cj1*x1880))+(((-1.0)*pz))+(((-0.421)*cj1))+(((-1.0)*sj1*x1881)));
evalcond[4]=((((0.421)*sj1))+(((-1.0)*cj1*x1881))+(((-1.0)*x1878))+(((-1.0)*x1879))+((sj1*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1882=((3.18471337579618)*px);
IkReal x1883=((3.18471337579618)*py);
if( IKabs((((cj0*sj2*x1883))+(((-1.0)*sj0*sj2*x1882))+(((-0.0382165605095541)*sj2))+(((3.18471337579618)*cj2*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+((cj0*x1882))+((sj0*x1883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*sj2*x1883))+(((-1.0)*sj0*sj2*x1882))+(((-0.0382165605095541)*sj2))+(((3.18471337579618)*cj2*pz))))+IKsqr(((-1.34076433121019)+((cj0*x1882))+((sj0*x1883))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*sj2*x1883))+(((-1.0)*sj0*sj2*x1882))+(((-0.0382165605095541)*sj2))+(((3.18471337579618)*cj2*pz))), ((-1.34076433121019)+((cj0*x1882))+((sj0*x1883))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1884=IKcos(j3);
IkReal x1885=IKsin(j3);
IkReal x1886=(px*sj0);
IkReal x1887=(cj0*py);
IkReal x1888=((1.0)*pz);
IkReal x1889=((0.314)*x1885);
evalcond[0]=((-0.421)+(((-0.314)*x1884))+((cj0*px))+((py*sj0)));
evalcond[1]=((((-0.013)*sj2))+((cj2*x1889))+(((-1.0)*x1888)));
evalcond[2]=((0.275862)+(((-0.024)*x1886))+(((0.264388)*x1884))+(((-1.0)*pp))+(((0.024)*x1887)));
evalcond[3]=((-0.012)+x1887+(((-0.013)*cj2))+(((-1.0)*x1886))+(((-1.0)*sj2*x1889)));
evalcond[4]=(((sj2*x1886))+(((-1.0)*cj2*x1888))+x1889+(((0.012)*sj2))+(((-1.0)*sj2*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1890=((3.18471337579618)*px);
IkReal x1891=((3.18471337579618)*py);
if( IKabs(((((-1.0)*sj0*sj2*x1890))+((cj0*sj2*x1891))+(((-3.18471337579618)*cj2*pz))+(((-0.0382165605095541)*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-1.0)*sj0*x1891))+(((-1.0)*cj0*x1890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*sj2*x1890))+((cj0*sj2*x1891))+(((-3.18471337579618)*cj2*pz))+(((-0.0382165605095541)*sj2))))+IKsqr(((-1.34076433121019)+(((-1.0)*sj0*x1891))+(((-1.0)*cj0*x1890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*sj2*x1890))+((cj0*sj2*x1891))+(((-3.18471337579618)*cj2*pz))+(((-0.0382165605095541)*sj2))), ((-1.34076433121019)+(((-1.0)*sj0*x1891))+(((-1.0)*cj0*x1890))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1892=IKcos(j3);
IkReal x1893=IKsin(j3);
IkReal x1894=(px*sj0);
IkReal x1895=(cj0*py);
IkReal x1896=((0.314)*x1893);
evalcond[0]=((((0.013)*sj2))+(((-1.0)*pz))+(((-1.0)*cj2*x1896)));
evalcond[1]=((-0.421)+(((-0.314)*x1892))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=((0.275862)+(((0.024)*x1895))+(((0.264388)*x1892))+(((-0.024)*x1894))+(((-1.0)*pp)));
evalcond[3]=((-0.012)+(((-1.0)*sj2*x1896))+(((-1.0)*x1894))+x1895+(((-0.013)*cj2)));
evalcond[4]=(((sj2*x1894))+(((-1.0)*sj2*x1895))+x1896+((cj2*pz))+(((0.012)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1897=(cj0*py);
IkReal x1898=(px*sj0);
if( IKabs(((-0.0382165605095541)+(((3.18471337579618)*x1897))+(((-3.18471337579618)*x1898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1898))+(((-0.0907756781699623)*x1897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0382165605095541)+(((3.18471337579618)*x1897))+(((-3.18471337579618)*x1898))))+IKsqr(((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1898))+(((-0.0907756781699623)*x1897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0382165605095541)+(((3.18471337579618)*x1897))+(((-3.18471337579618)*x1898))), ((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1898))+(((-0.0907756781699623)*x1897))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1899=IKcos(j3);
IkReal x1900=(px*sj0);
IkReal x1901=(cj0*py);
IkReal x1902=((1.0)*pz);
IkReal x1903=(cj0*px);
IkReal x1904=(py*sj0);
IkReal x1905=((0.314)*x1899);
evalcond[0]=((-0.012)+(((-0.314)*(IKsin(j3))))+(((-1.0)*x1900))+x1901);
evalcond[1]=((((-0.013)*sj1))+(((-1.0)*cj1*x1905))+(((-0.421)*cj1))+(((-1.0)*x1902)));
evalcond[2]=((0.275862)+(((0.264388)*x1899))+(((-0.024)*x1900))+(((-1.0)*pp))+(((0.024)*x1901)));
evalcond[3]=((-0.421)+(((-1.0)*cj1*x1902))+((sj1*x1903))+((sj1*x1904))+(((-1.0)*x1905)));
evalcond[4]=((((0.421)*sj1))+(((-1.0)*x1903))+(((-1.0)*x1904))+((sj1*x1905))+(((-0.013)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1906=(cj0*py);
IkReal x1907=(px*sj0);
if( IKabs(((0.0382165605095541)+(((-3.18471337579618)*x1906))+(((3.18471337579618)*x1907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04339833880509)+(((0.0907756781699623)*x1907))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0382165605095541)+(((-3.18471337579618)*x1906))+(((3.18471337579618)*x1907))))+IKsqr(((-1.04339833880509)+(((0.0907756781699623)*x1907))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1906))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0382165605095541)+(((-3.18471337579618)*x1906))+(((3.18471337579618)*x1907))), ((-1.04339833880509)+(((0.0907756781699623)*x1907))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1906))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1908=IKcos(j3);
IkReal x1909=(px*sj0);
IkReal x1910=(cj0*py);
IkReal x1911=((1.0)*pz);
IkReal x1912=(cj0*px);
IkReal x1913=(py*sj0);
IkReal x1914=((0.314)*x1908);
evalcond[0]=((-0.012)+(((-1.0)*x1909))+x1910+(((0.314)*(IKsin(j3)))));
evalcond[1]=((((0.013)*sj1))+(((-1.0)*cj1*x1914))+(((-0.421)*cj1))+(((-1.0)*x1911)));
evalcond[2]=((0.275862)+(((-0.024)*x1909))+(((-1.0)*pp))+(((0.264388)*x1908))+(((0.024)*x1910)));
evalcond[3]=((-0.421)+(((-1.0)*cj1*x1911))+((sj1*x1912))+((sj1*x1913))+(((-1.0)*x1914)));
evalcond[4]=((((0.421)*sj1))+(((-1.0)*x1913))+(((-1.0)*x1912))+(((0.013)*cj1))+((sj1*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1915=IKcos(j3);
evalcond[0]=((0.354482)+(((0.842)*pz))+(((0.264388)*x1915)));
evalcond[1]=((-0.421)+(((-1.0)*pz))+(((-0.314)*x1915)));
evalcond[2]=((((-1.0)*py*sj0))+(((0.314)*(IKsin(j3))))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1916=IKcos(j3);
evalcond[0]=((0.354482)+(((0.842)*pz))+(((0.264388)*x1916)));
evalcond[1]=((-0.421)+(((-1.0)*pz))+(((-0.314)*x1916)));
evalcond[2]=((((-0.314)*(IKsin(j3))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1917=IKcos(j3);
evalcond[0]=((0.354482)+(((0.842)*pz))+(((0.264388)*x1917)));
evalcond[1]=((-0.421)+(((-1.0)*pz))+(((-0.314)*x1917)));
evalcond[2]=((-0.012)+(((-0.314)*(IKsin(j3))))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1918=IKcos(j3);
evalcond[0]=((0.354482)+(((0.842)*pz))+(((0.264388)*x1918)));
evalcond[1]=((-0.421)+(((-1.0)*pz))+(((-0.314)*x1918)));
evalcond[2]=((-0.012)+(((-1.0)*px*sj0))+((cj0*py))+(((0.314)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(sj2,-1);
if(!x1919.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1919.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1919.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2))))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1919.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2))))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1920=IKcos(j3);
IkReal x1921=IKsin(j3);
IkReal x1922=(px*sj0);
IkReal x1923=(cj0*py);
IkReal x1924=((1.0)*cj0*px);
IkReal x1925=((0.314)*x1921);
IkReal x1926=((1.0)*py*sj0);
evalcond[0]=((0.354482)+(((0.264388)*x1920))+(((0.842)*pz)));
evalcond[1]=((-0.421)+(((-0.314)*x1920))+(((-1.0)*pz)));
evalcond[2]=((-0.012)+(((-1.0)*x1922))+x1923+(((-0.013)*cj2))+(((-1.0)*sj2*x1925)));
evalcond[3]=((((-0.013)*sj2))+(((-1.0)*x1926))+(((-1.0)*x1924))+((cj2*x1925)));
evalcond[4]=(((sj2*x1922))+x1925+(((-1.0)*sj2*x1923))+(((0.012)*sj2))+(((-1.0)*cj2*x1926))+(((-1.0)*cj2*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(cj2,-1);
if(!x1927.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1927.value)*(((((500.0)*cj0*px))+(((6.5)*sj2))+(((500.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((-3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1927.value)*(((((500.0)*cj0*px))+(((6.5)*sj2))+(((500.0)*py*sj0))))))+IKsqr(((-1.34076433121019)+(((-3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1927.value)*(((((500.0)*cj0*px))+(((6.5)*sj2))+(((500.0)*py*sj0))))), ((-1.34076433121019)+(((-3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1928=IKcos(j3);
IkReal x1929=IKsin(j3);
IkReal x1930=(px*sj0);
IkReal x1931=(cj0*py);
IkReal x1932=((1.0)*cj0*px);
IkReal x1933=((0.314)*x1929);
IkReal x1934=((1.0)*py*sj0);
evalcond[0]=((0.354482)+(((0.264388)*x1928))+(((0.842)*pz)));
evalcond[1]=((-0.421)+(((-0.314)*x1928))+(((-1.0)*pz)));
evalcond[2]=((-0.012)+(((-1.0)*sj2*x1933))+(((-1.0)*x1930))+x1931+(((-0.013)*cj2)));
evalcond[3]=((((-0.013)*sj2))+((cj2*x1933))+(((-1.0)*x1934))+(((-1.0)*x1932)));
evalcond[4]=(((sj2*x1930))+(((-1.0)*sj2*x1931))+x1933+(((-1.0)*cj2*x1932))+(((-1.0)*cj2*x1934))+(((0.012)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-3.18471337579618)*py*sj0))+(((-3.18471337579618)*cj0*px))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1935=IKcos(j3);
evalcond[0]=((-0.421)+(((-0.314)*x1935))+pz);
evalcond[1]=((0.354482)+(((0.264388)*x1935))+(((-0.842)*pz)));
evalcond[2]=((((-0.314)*(IKsin(j3))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((3.18471337579618)*cj0*px))+(((3.18471337579618)*py*sj0))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1936=IKcos(j3);
evalcond[0]=((-0.421)+(((-0.314)*x1936))+pz);
evalcond[1]=((0.354482)+(((0.264388)*x1936))+(((-0.842)*pz)));
evalcond[2]=((((-1.0)*py*sj0))+(((0.314)*(IKsin(j3))))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.0382165605095541)+(((3.18471337579618)*cj0*py))+(((-3.18471337579618)*px*sj0))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1937=IKcos(j3);
evalcond[0]=((-0.421)+(((-0.314)*x1937))+pz);
evalcond[1]=((0.354482)+(((0.264388)*x1937))+(((-0.842)*pz)));
evalcond[2]=((-0.012)+(((-0.314)*(IKsin(j3))))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0382165605095541)+(((3.18471337579618)*px*sj0))+(((-3.18471337579618)*cj0*py))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1938=IKcos(j3);
evalcond[0]=((-0.421)+(((-0.314)*x1938))+pz);
evalcond[1]=((0.354482)+(((0.264388)*x1938))+(((-0.842)*pz)));
evalcond[2]=((-0.012)+(((-1.0)*px*sj0))+((cj0*py))+(((0.314)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(sj2,-1);
if(!x1939.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1939.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1939.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2))))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1939.value)*(((-6.0)+(((-500.0)*px*sj0))+(((500.0)*cj0*py))+(((-6.5)*cj2))))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1940=IKcos(j3);
IkReal x1941=IKsin(j3);
IkReal x1942=(px*sj0);
IkReal x1943=(cj0*px);
IkReal x1944=(cj0*py);
IkReal x1945=(py*sj0);
IkReal x1946=((0.314)*x1941);
evalcond[0]=((-0.421)+pz+(((-0.314)*x1940)));
evalcond[1]=((0.354482)+(((0.264388)*x1940))+(((-0.842)*pz)));
evalcond[2]=((-0.012)+(((-1.0)*sj2*x1946))+x1944+(((-1.0)*x1942))+(((-0.013)*cj2)));
evalcond[3]=((((0.013)*sj2))+(((-1.0)*cj2*x1946))+(((-1.0)*x1945))+(((-1.0)*x1943)));
evalcond[4]=(((sj2*x1942))+((cj2*x1945))+((cj2*x1943))+x1946+(((0.012)*sj2))+(((-1.0)*sj2*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(cj2,-1);
if(!x1947.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1947.value)*(((((-500.0)*cj0*px))+(((-500.0)*py*sj0))+(((6.5)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.34076433121019)+(((3.18471337579618)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1947.value)*(((((-500.0)*cj0*px))+(((-500.0)*py*sj0))+(((6.5)*sj2))))))+IKsqr(((-1.34076433121019)+(((3.18471337579618)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1947.value)*(((((-500.0)*cj0*px))+(((-500.0)*py*sj0))+(((6.5)*sj2))))), ((-1.34076433121019)+(((3.18471337579618)*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1948=IKcos(j3);
IkReal x1949=IKsin(j3);
IkReal x1950=(px*sj0);
IkReal x1951=(cj0*px);
IkReal x1952=(cj0*py);
IkReal x1953=(py*sj0);
IkReal x1954=((0.314)*x1949);
evalcond[0]=((-0.421)+pz+(((-0.314)*x1948)));
evalcond[1]=((0.354482)+(((0.264388)*x1948))+(((-0.842)*pz)));
evalcond[2]=((-0.012)+(((-1.0)*sj2*x1954))+x1952+(((-1.0)*x1950))+(((-0.013)*cj2)));
evalcond[3]=((((0.013)*sj2))+(((-1.0)*cj2*x1954))+(((-1.0)*x1953))+(((-1.0)*x1951)));
evalcond[4]=(((sj2*x1950))+((cj2*x1953))+((cj2*x1951))+x1954+(((0.012)*sj2))+(((-1.0)*sj2*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(sj2,-1);
if(!x1960.valid){
continue;
}
IkReal x1955=x1960.value;
IkReal x1956=((0.00636942675159236)*x1955);
IkReal x1957=(cj2*sj1);
IkReal x1958=((500.0)*cj0*py);
IkReal x1959=((500.0)*px*sj0);
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(cj1,-1);
if(!x1961.valid){
continue;
}
if( IKabs((x1956*(((-6.0)+(((-1.0)*x1959))+(((-6.5)*cj2))+x1958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1956*(x1961.value)*(((((-1.0)*x1957*x1959))+(((-6.5)*sj1))+(((-6.0)*x1957))+((x1957*x1958))+(((-500.0)*pz*sj2))+(((-210.5)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1956*(((-6.0)+(((-1.0)*x1959))+(((-6.5)*cj2))+x1958))))+IKsqr((x1956*(x1961.value)*(((((-1.0)*x1957*x1959))+(((-6.5)*sj1))+(((-6.0)*x1957))+((x1957*x1958))+(((-500.0)*pz*sj2))+(((-210.5)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1956*(((-6.0)+(((-1.0)*x1959))+(((-6.5)*cj2))+x1958))), (x1956*(x1961.value)*(((((-1.0)*x1957*x1959))+(((-6.5)*sj1))+(((-6.0)*x1957))+((x1957*x1958))+(((-500.0)*pz*sj2))+(((-210.5)*cj1*sj2))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1962=IKcos(j3);
IkReal x1963=IKsin(j3);
IkReal x1964=(px*sj0);
IkReal x1965=(cj0*px);
IkReal x1966=(cj0*py);
IkReal x1967=(py*sj0);
IkReal x1968=((1.0)*cj1);
IkReal x1969=((1.0)*pz);
IkReal x1970=(cj2*sj1);
IkReal x1971=((0.013)*sj2);
IkReal x1972=((0.314)*x1963);
IkReal x1973=((0.314)*x1962);
evalcond[0]=((0.275862)+(((0.024)*x1966))+(((-1.0)*pp))+(((0.264388)*x1962))+(((-0.024)*x1964)));
evalcond[1]=((-0.012)+(((-1.0)*sj2*x1972))+(((-1.0)*x1964))+x1966+(((-0.013)*cj2)));
evalcond[2]=((-0.421)+((sj1*x1967))+((sj1*x1965))+(((-1.0)*x1973))+(((-1.0)*pz*x1968)));
evalcond[3]=((((-1.0)*sj1*x1971))+(((-1.0)*x1969))+((x1970*x1972))+(((-1.0)*cj1*x1973))+(((-0.421)*cj1)));
evalcond[4]=((((0.421)*sj1))+((sj1*x1973))+(((-1.0)*x1965))+(((-1.0)*x1967))+((cj1*cj2*x1972))+(((-1.0)*cj1*x1971)));
evalcond[5]=((((-1.0)*cj2*x1965*x1968))+(((-1.0)*sj2*x1966))+((sj2*x1964))+x1972+(((0.012)*sj2))+(((-1.0)*x1969*x1970))+(((-1.0)*cj2*x1967*x1968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1974=(px*sj0);
IkReal x1975=(cj0*py);
IkReal x1976=((6000.0)*cj1);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(cj2,-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(sj1,-1);
if(!x1978.valid){
continue;
}
if( IKabs(((1.51292796949937e-5)*(x1977.value)*(x1978.value)*(((((-1.0)*x1975*x1976))+(((2736.5)*sj1*sj2))+((x1974*x1976))+(((210500.0)*pz))+(((19655.0)*cj1))+(((250000.0)*cj1*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04339833880509)+(((0.0907756781699623)*x1974))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.51292796949937e-5)*(x1977.value)*(x1978.value)*(((((-1.0)*x1975*x1976))+(((2736.5)*sj1*sj2))+((x1974*x1976))+(((210500.0)*pz))+(((19655.0)*cj1))+(((250000.0)*cj1*pp))))))+IKsqr(((-1.04339833880509)+(((0.0907756781699623)*x1974))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.51292796949937e-5)*(x1977.value)*(x1978.value)*(((((-1.0)*x1975*x1976))+(((2736.5)*sj1*sj2))+((x1974*x1976))+(((210500.0)*pz))+(((19655.0)*cj1))+(((250000.0)*cj1*pp))))), ((-1.04339833880509)+(((0.0907756781699623)*x1974))+(((3.78231992374843)*pp))+(((-0.0907756781699623)*x1975))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1979=IKcos(j3);
IkReal x1980=IKsin(j3);
IkReal x1981=(px*sj0);
IkReal x1982=(cj0*px);
IkReal x1983=(cj0*py);
IkReal x1984=(py*sj0);
IkReal x1985=((1.0)*cj1);
IkReal x1986=((1.0)*pz);
IkReal x1987=(cj2*sj1);
IkReal x1988=((0.013)*sj2);
IkReal x1989=((0.314)*x1980);
IkReal x1990=((0.314)*x1979);
evalcond[0]=((0.275862)+(((0.024)*x1983))+(((-1.0)*pp))+(((-0.024)*x1981))+(((0.264388)*x1979)));
evalcond[1]=((-0.012)+(((-1.0)*sj2*x1989))+x1983+(((-0.013)*cj2))+(((-1.0)*x1981)));
evalcond[2]=((-0.421)+((sj1*x1982))+((sj1*x1984))+(((-1.0)*x1990))+(((-1.0)*pz*x1985)));
evalcond[3]=((((-1.0)*x1986))+((x1987*x1989))+(((-1.0)*sj1*x1988))+(((-1.0)*cj1*x1990))+(((-0.421)*cj1)));
evalcond[4]=(((sj1*x1990))+(((0.421)*sj1))+((cj1*cj2*x1989))+(((-1.0)*x1984))+(((-1.0)*x1982))+(((-1.0)*cj1*x1988)));
evalcond[5]=(((sj2*x1981))+(((-1.0)*x1986*x1987))+(((-1.0)*sj2*x1983))+(((-1.0)*cj2*x1984*x1985))+x1989+(((-1.0)*cj2*x1982*x1985))+(((0.012)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1991=(px*sj0);
IkReal x1992=(cj0*py);
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(sj2,-1);
if(!x1993.valid){
continue;
}
if( IKabs(((0.00636942675159236)*(x1993.value)*(((-6.0)+(((500.0)*x1992))+(((-500.0)*x1991))+(((-6.5)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1991))+(((-0.0907756781699623)*x1992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00636942675159236)*(x1993.value)*(((-6.0)+(((500.0)*x1992))+(((-500.0)*x1991))+(((-6.5)*cj2))))))+IKsqr(((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1991))+(((-0.0907756781699623)*x1992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00636942675159236)*(x1993.value)*(((-6.0)+(((500.0)*x1992))+(((-500.0)*x1991))+(((-6.5)*cj2))))), ((-1.04339833880509)+(((3.78231992374843)*pp))+(((0.0907756781699623)*x1991))+(((-0.0907756781699623)*x1992))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break;
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1994=IKcos(j3);
IkReal x1995=IKsin(j3);
IkReal x1996=(px*sj0);
IkReal x1997=(cj0*px);
IkReal x1998=(cj0*py);
IkReal x1999=(py*sj0);
IkReal x2000=((1.0)*cj1);
IkReal x2001=((1.0)*pz);
IkReal x2002=(cj2*sj1);
IkReal x2003=((0.013)*sj2);
IkReal x2004=((0.314)*x1995);
IkReal x2005=((0.314)*x1994);
evalcond[0]=((0.275862)+(((-0.024)*x1996))+(((0.264388)*x1994))+(((0.024)*x1998))+(((-1.0)*pp)));
evalcond[1]=((-0.012)+(((-1.0)*sj2*x2004))+x1998+(((-0.013)*cj2))+(((-1.0)*x1996)));
evalcond[2]=((-0.421)+((sj1*x1999))+((sj1*x1997))+(((-1.0)*pz*x2000))+(((-1.0)*x2005)));
evalcond[3]=(((x2002*x2004))+(((-1.0)*sj1*x2003))+(((-1.0)*cj1*x2005))+(((-1.0)*x2001))+(((-0.421)*cj1)));
evalcond[4]=((((0.421)*sj1))+((cj1*cj2*x2004))+(((-1.0)*cj1*x2003))+((sj1*x2005))+(((-1.0)*x1997))+(((-1.0)*x1999)));
evalcond[5]=(x2004+(((-1.0)*cj2*x1999*x2000))+(((-1.0)*cj2*x1997*x2000))+(((-1.0)*x2001*x2002))+((sj2*x1996))+(((0.012)*sj2))+(((-1.0)*sj2*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x226=((1.0)*sj2);
IkReal x227=(cj3*sj0);
IkReal x228=(cj2*cj3);
IkReal x229=(cj0*sj2);
IkReal x230=(cj1*sj3);
IkReal x231=((1.0)*cj2);
IkReal x232=((1.0)*sj1*sj3);
IkReal x233=(((cj1*x228))+(((-1.0)*x232)));
IkReal x234=(((sj1*x228))+x230);
IkReal x235=(((cj0*cj2))+(((-1.0)*cj1*sj0*x226)));
IkReal x236=((((-1.0)*sj1*sj3*x231))+((cj1*cj3)));
IkReal x237=(cj0*x233);
IkReal x238=((((-1.0)*cj0*cj1*x226))+(((-1.0)*sj0*x231)));
IkReal x239=((((-1.0)*x230*x231))+(((-1.0)*cj3*sj1)));
IkReal x240=(((cj3*x229))+((sj0*x233)));
IkReal x241=((((-1.0)*sj2*x227))+x237);
IkReal x242=(((sj0*sj2*sj3))+((cj0*x239)));
IkReal x243=((((-1.0)*sj3*x229))+((sj0*x239)));
new_r00=(((r00*((x237+(((-1.0)*x226*x227))))))+((r20*x234))+((r10*x240)));
new_r01=(((r01*x241))+((r11*x240))+((r21*x234)));
new_r02=(((r02*x241))+((r12*x240))+((r22*x234)));
new_r10=((((-1.0)*r20*sj1*x226))+((r10*x235))+((r00*x238)));
new_r11=(((r11*x235))+(((-1.0)*r21*sj1*x226))+((r01*x238)));
new_r12=(((r02*x238))+(((-1.0)*r22*sj1*x226))+((r12*x235)));
new_r20=(((r20*x236))+((r00*x242))+((r10*x243)));
new_r21=(((r01*x242))+((r11*x243))+((r21*x236)));
new_r22=(((r02*x242))+((r12*x243))+((r22*x236)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=new_r12;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x244=new_r22*new_r22;
IkReal x245=((16.0)*new_r10);
IkReal x246=((16.0)*new_r01);
IkReal x247=((16.0)*new_r22);
IkReal x248=((8.0)*new_r11);
IkReal x249=((8.0)*new_r00);
IkReal x250=(x244*x245);
IkReal x251=(x244*x246);
j4eval[0]=((IKabs((x251+(((-1.0)*x246)))))+(IKabs((((new_r22*x249))+(((-1.0)*x244*x248)))))+(IKabs((((new_r22*x248))+(((-1.0)*x249)))))+(IKabs((x250+(((-1.0)*x245)))))+(IKabs((x245+(((-1.0)*x250)))))+(IKabs((x246+(((-1.0)*x251)))))+(IKabs(((((-32.0)*new_r11))+((new_r00*x247))+(((16.0)*new_r11*x244)))))+(IKabs(((((-32.0)*new_r00*x244))+(((16.0)*new_r00))+((new_r11*x247))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j4evalpoly[1];
IkReal x252=new_r22*new_r22;
IkReal x253=((16.0)*new_r10);
IkReal x254=(new_r11*new_r22);
IkReal x255=(x252*x253);
IkReal x256=((((8.0)*x254))+(((-8.0)*new_r00)));
op[0]=x256;
op[1]=(x253+(((-1.0)*x255)));
op[2]=((((16.0)*new_r00))+(((16.0)*x254))+(((-32.0)*new_r00*x252)));
op[3]=(x255+(((-1.0)*x253)));
op[4]=x256;
polyroots4(op,zeror,numroots);
IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[4]={true,true,true,true};
_nj4 = 4;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x257=((16.0)*new_r01);
IkReal x258=new_r22*new_r22;
IkReal x259=(new_r00*new_r22);
IkReal x260=((8.0)*x259);
IkReal x261=(new_r11*x258);
IkReal x262=(x257*x258);
IkReal x263=((8.0)*x261);
j4evalpoly[0]=(((htj4*((x262+(((-1.0)*x257))))))+(((htj4*htj4*htj4)*((x257+(((-1.0)*x262))))))+x260+(((htj4*htj4*htj4*htj4)*((x260+(((-1.0)*x263))))))+(((-1.0)*x263))+(((htj4*htj4)*(((((-32.0)*new_r11))+(((16.0)*x259))+(((16.0)*x261)))))));
if( IKabs(j4evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
IkReal j6eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x264=cj4*cj4;
IkReal x265=(cj4*new_r22);
IkReal x266=((-1.0)+x264+(((-1.0)*x264*(new_r22*new_r22))));
j6eval[0]=x266;
j6eval[1]=((IKabs((((new_r00*sj4))+((new_r01*x265)))))+(IKabs((((new_r01*sj4))+(((-1.0)*new_r00*x265))))));
j6eval[2]=IKsign(x266);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=new_r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=sj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x267=IKsin(j6);
IkReal x268=IKcos(j6);
evalcond[0]=x267;
evalcond[1]=((-1.0)*x268);
evalcond[2]=(x267+(((-1.0)*new_r10)));
evalcond[3]=(x268+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x269=IKsin(j6);
IkReal x270=IKcos(j6);
evalcond[0]=x269;
evalcond[1]=(x269+new_r10);
evalcond[2]=(x270+new_r11);
evalcond[3]=((-1.0)*x270);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x271.valid){
continue;
}
if((x271.value) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(x271.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((((-1.0)*gconst50))+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
cj4=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst50);
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x272.valid){
continue;
}
if((x272.value) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(x272.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(gconst50,-1);
if(!x273.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))))+IKsqr((new_r11*(x273.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))), (new_r11*(x273.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x274=IKcos(j6);
IkReal x275=IKsin(j6);
IkReal x276=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x276)))) < -0.00001)
continue;
IkReal x277=IKsqrt(((1.0)+(((-1.0)*gconst50*x276))));
evalcond[0]=x275;
evalcond[1]=((-1.0)*x274);
evalcond[2]=((((-1.0)*x274*x276))+new_r11);
evalcond[3]=((((-1.0)*x275*x276))+new_r10);
evalcond[4]=(((x274*x277))+new_r01);
evalcond[5]=(((x275*x277))+new_r00);
evalcond[6]=(x275+((new_r00*x277))+(((-1.0)*new_r10*x276)));
evalcond[7]=(x274+(((-1.0)*new_r11*x276))+((new_r01*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x278.valid){
continue;
}
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x278.value)))+(x279.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x280=IKcos(j6);
IkReal x281=IKsin(j6);
IkReal x282=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x282)))) < -0.00001)
continue;
IkReal x283=IKsqrt(((1.0)+(((-1.0)*gconst50*x282))));
evalcond[0]=x281;
evalcond[1]=((-1.0)*x280);
evalcond[2]=((((-1.0)*x280*x282))+new_r11);
evalcond[3]=((((-1.0)*x281*x282))+new_r10);
evalcond[4]=(new_r01+((x280*x283)));
evalcond[5]=(new_r00+((x281*x283)));
evalcond[6]=(x281+(((-1.0)*new_r10*x282))+((new_r00*x283)));
evalcond[7]=(x280+(((-1.0)*new_r11*x282))+((new_r01*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x284=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x284.valid){
continue;
}
if((x284.value) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(x284.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((((-1.0)*gconst50))+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))));
cj4=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst50)));
CheckValue<IkReal> x285=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x285.valid){
continue;
}
if((x285.value) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(x285.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(gconst50,-1);
if(!x286.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x286.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))))+IKsqr((new_r11*(x286.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))), (new_r11*(x286.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x287=IKcos(j6);
IkReal x288=IKsin(j6);
IkReal x289=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x289)))) < -0.00001)
continue;
IkReal x290=IKsqrt(((1.0)+(((-1.0)*gconst50*x289))));
IkReal x291=((1.0)*x290);
evalcond[0]=x288;
evalcond[1]=((-1.0)*x287);
evalcond[2]=((((-1.0)*x287*x289))+new_r11);
evalcond[3]=((((-1.0)*x288*x289))+new_r10);
evalcond[4]=((((-1.0)*x287*x291))+new_r01);
evalcond[5]=((((-1.0)*x288*x291))+new_r00);
evalcond[6]=(x288+(((-1.0)*new_r10*x289))+(((-1.0)*new_r00*x291)));
evalcond[7]=((((-1.0)*new_r01*x291))+x287+(((-1.0)*new_r11*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x293.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x292.value)))+(x293.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x294=IKcos(j6);
IkReal x295=IKsin(j6);
IkReal x296=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x296)))) < -0.00001)
continue;
IkReal x297=IKsqrt(((1.0)+(((-1.0)*gconst50*x296))));
IkReal x298=((1.0)*x297);
evalcond[0]=x295;
evalcond[1]=((-1.0)*x294);
evalcond[2]=(new_r11+(((-1.0)*x294*x296)));
evalcond[3]=((((-1.0)*x295*x296))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x294*x298)));
evalcond[5]=((((-1.0)*x295*x298))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x296))+x295+(((-1.0)*new_r00*x298)));
evalcond[7]=((((-1.0)*new_r01*x298))+(((-1.0)*new_r11*x296))+x294);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x299.valid){
continue;
}
if((x299.value) < -0.00001)
continue;
IkReal gconst51=IKsqrt(x299.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((((-1.0)*gconst51))+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
cj4=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst51);
CheckValue<IkReal> x300=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x300.valid){
continue;
}
if((x300.value) < -0.00001)
continue;
IkReal gconst51=IKsqrt(x300.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
CheckValue<IkReal> x301=IKPowWithIntegerCheck(gconst51,-1);
if(!x301.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))))+IKsqr((new_r11*(x301.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))), (new_r11*(x301.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x302=IKcos(j6);
IkReal x303=IKsin(j6);
IkReal x304=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x304)))) < -0.00001)
continue;
IkReal x305=IKsqrt(((1.0)+(((-1.0)*gconst51*x304))));
evalcond[0]=x303;
evalcond[1]=((-1.0)*x302);
evalcond[2]=((((-1.0)*x302*x304))+new_r11);
evalcond[3]=((((-1.0)*x303*x304))+new_r10);
evalcond[4]=(((x302*x305))+new_r01);
evalcond[5]=(((x303*x305))+new_r00);
evalcond[6]=(((new_r00*x305))+x303+(((-1.0)*new_r10*x304)));
evalcond[7]=(((new_r01*x305))+x302+(((-1.0)*new_r11*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x307.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x306.value)))+(x307.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x308=IKcos(j6);
IkReal x309=IKsin(j6);
IkReal x310=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x310)))) < -0.00001)
continue;
IkReal x311=IKsqrt(((1.0)+(((-1.0)*gconst51*x310))));
evalcond[0]=x309;
evalcond[1]=((-1.0)*x308);
evalcond[2]=((((-1.0)*x308*x310))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x309*x310)));
evalcond[4]=(((x308*x311))+new_r01);
evalcond[5]=(((x309*x311))+new_r00);
evalcond[6]=(((new_r00*x311))+x309+(((-1.0)*new_r10*x310)));
evalcond[7]=(((new_r01*x311))+(((-1.0)*new_r11*x310))+x308);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x312.valid){
continue;
}
if((x312.value) < -0.00001)
continue;
IkReal gconst51=IKsqrt(x312.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst51))+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))));
cj4=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst51)));
CheckValue<IkReal> x313=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x313.valid){
continue;
}
if((x313.value) < -0.00001)
continue;
IkReal gconst51=IKsqrt(x313.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
CheckValue<IkReal> x314=IKPowWithIntegerCheck(gconst51,-1);
if(!x314.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x314.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))))+IKsqr((new_r11*(x314.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))), (new_r11*(x314.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x315=IKcos(j6);
IkReal x316=IKsin(j6);
IkReal x317=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x317)))) < -0.00001)
continue;
IkReal x318=IKsqrt(((1.0)+(((-1.0)*gconst51*x317))));
IkReal x319=((1.0)*x318);
evalcond[0]=x316;
evalcond[1]=((-1.0)*x315);
evalcond[2]=((((-1.0)*x315*x317))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x316*x317)));
evalcond[4]=((((-1.0)*x315*x319))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x316*x319)));
evalcond[6]=((((-1.0)*new_r00*x319))+x316+(((-1.0)*new_r10*x317)));
evalcond[7]=((((-1.0)*new_r11*x317))+x315+(((-1.0)*new_r01*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x320=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x320.valid){
continue;
}
CheckValue<IkReal> x321 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x321.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x320.value)))+(x321.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x322=IKcos(j6);
IkReal x323=IKsin(j6);
IkReal x324=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x324)))) < -0.00001)
continue;
IkReal x325=IKsqrt(((1.0)+(((-1.0)*gconst51*x324))));
IkReal x326=((1.0)*x325);
evalcond[0]=x323;
evalcond[1]=((-1.0)*x322);
evalcond[2]=((((-1.0)*x322*x324))+new_r11);
evalcond[3]=((((-1.0)*x323*x324))+new_r10);
evalcond[4]=((((-1.0)*x322*x326))+new_r01);
evalcond[5]=((((-1.0)*x323*x326))+new_r00);
evalcond[6]=(x323+(((-1.0)*new_r00*x326))+(((-1.0)*new_r10*x324)));
evalcond[7]=(x322+(((-1.0)*new_r01*x326))+(((-1.0)*new_r11*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x327=(new_r00*sj4);
CheckValue<IkReal> x328=IKPowWithIntegerCheck(sj4,-1);
if(!x328.valid){
continue;
}
if( IKabs((((cj4*new_r10))+(((-1.0)*x327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x328.value)*((((cj4*new_r22*x327))+(((-1.0)*new_r10*new_r22*(cj4*cj4)))+(((-1.0)*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r10))+(((-1.0)*x327))))+IKsqr(((x328.value)*((((cj4*new_r22*x327))+(((-1.0)*new_r10*new_r22*(cj4*cj4)))+(((-1.0)*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r10))+(((-1.0)*x327))), ((x328.value)*((((cj4*new_r22*x327))+(((-1.0)*new_r10*new_r22*(cj4*cj4)))+(((-1.0)*new_r01))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x329=IKsin(j6);
IkReal x330=IKcos(j6);
IkReal x331=(cj4*new_r01);
IkReal x332=((1.0)*cj4);
IkReal x333=(new_r10*sj4);
IkReal x334=(new_r22*sj4);
IkReal x335=(cj4*new_r00);
IkReal x336=(sj4*x329);
IkReal x337=((1.0)*x330);
IkReal x338=(new_r22*x329);
evalcond[0]=((((-1.0)*new_r10*x332))+((new_r00*sj4))+x329);
evalcond[1]=((((-1.0)*new_r11*x332))+((new_r01*sj4))+x330);
evalcond[2]=(((new_r11*sj4))+x338+x331);
evalcond[3]=(((new_r22*x331))+((new_r11*x334))+x329);
evalcond[4]=(((sj4*x330))+((cj4*x338))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x337))+x333+x335);
evalcond[6]=((((-1.0)*new_r22*x330*x332))+x336+new_r00);
evalcond[7]=((((-1.0)*x330*x332))+((x329*x334))+new_r11);
evalcond[8]=(((new_r22*x335))+((new_r22*x333))+(((-1.0)*x337)));
evalcond[9]=((((-1.0)*x329*x332))+new_r10+(((-1.0)*x334*x337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x339=((1.0)*sj4);
CheckValue<IkReal> x340=IKPowWithIntegerCheck(new_r22,-1);
if(!x340.valid){
continue;
}
if( IKabs(((x340.value)*(((((-1.0)*new_r11*x339))+(((-1.0)*cj4*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r11))+(((-1.0)*new_r01*x339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x340.value)*(((((-1.0)*new_r11*x339))+(((-1.0)*cj4*new_r01))))))+IKsqr((((cj4*new_r11))+(((-1.0)*new_r01*x339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x340.value)*(((((-1.0)*new_r11*x339))+(((-1.0)*cj4*new_r01))))), (((cj4*new_r11))+(((-1.0)*new_r01*x339))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x341=IKsin(j6);
IkReal x342=IKcos(j6);
IkReal x343=(cj4*new_r01);
IkReal x344=((1.0)*cj4);
IkReal x345=(new_r10*sj4);
IkReal x346=(new_r22*sj4);
IkReal x347=(cj4*new_r00);
IkReal x348=(sj4*x341);
IkReal x349=((1.0)*x342);
IkReal x350=(new_r22*x341);
evalcond[0]=((((-1.0)*new_r10*x344))+((new_r00*sj4))+x341);
evalcond[1]=((((-1.0)*new_r11*x344))+((new_r01*sj4))+x342);
evalcond[2]=(((new_r11*sj4))+x350+x343);
evalcond[3]=(((new_r22*x343))+((new_r11*x346))+x341);
evalcond[4]=(((cj4*x350))+((sj4*x342))+new_r01);
evalcond[5]=(x347+x345+(((-1.0)*new_r22*x349)));
evalcond[6]=((((-1.0)*new_r22*x342*x344))+x348+new_r00);
evalcond[7]=(((x341*x346))+new_r11+(((-1.0)*x342*x344)));
evalcond[8]=(((new_r22*x347))+((new_r22*x345))+(((-1.0)*x349)));
evalcond[9]=((((-1.0)*x341*x344))+(((-1.0)*x346*x349))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x351=cj4*cj4;
IkReal x352=(cj4*new_r22);
CheckValue<IkReal> x353 = IKatan2WithCheck(IkReal((((new_r01*x352))+((new_r00*sj4)))),IkReal((((new_r01*sj4))+(((-1.0)*new_r00*x352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x353.valid){
continue;
}
CheckValue<IkReal> x354=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x351*(new_r22*new_r22)))+x351)),-1);
if(!x354.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x353.value)+(((1.5707963267949)*(x354.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x355=IKsin(j6);
IkReal x356=IKcos(j6);
IkReal x357=(cj4*new_r01);
IkReal x358=((1.0)*cj4);
IkReal x359=(new_r10*sj4);
IkReal x360=(new_r22*sj4);
IkReal x361=(cj4*new_r00);
IkReal x362=(sj4*x355);
IkReal x363=((1.0)*x356);
IkReal x364=(new_r22*x355);
evalcond[0]=(((new_r00*sj4))+x355+(((-1.0)*new_r10*x358)));
evalcond[1]=(((new_r01*sj4))+x356+(((-1.0)*new_r11*x358)));
evalcond[2]=(((new_r11*sj4))+x357+x364);
evalcond[3]=(((new_r22*x357))+x355+((new_r11*x360)));
evalcond[4]=(((sj4*x356))+((cj4*x364))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x363))+x359+x361);
evalcond[6]=((((-1.0)*new_r22*x356*x358))+x362+new_r00);
evalcond[7]=(((x355*x360))+(((-1.0)*x356*x358))+new_r11);
evalcond[8]=(((new_r22*x361))+((new_r22*x359))+(((-1.0)*x363)));
evalcond[9]=((((-1.0)*x360*x363))+new_r10+(((-1.0)*x355*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x366=IKPowWithIntegerCheck(sj5,-1);
if(!x366.valid){
continue;
}
IkReal x365=x366.value;
CheckValue<IkReal> x367=IKPowWithIntegerCheck(new_r12,-1);
if(!x367.valid){
continue;
}
if( IKabs((x365*(x367.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x365)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x365*(x367.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))))+IKsqr(((-1.0)*new_r02*x365))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x365*(x367.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))), ((-1.0)*new_r02*x365));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x368=IKcos(j4);
IkReal x369=IKsin(j4);
IkReal x370=((1.0)*sj5);
IkReal x371=(new_r12*x369);
IkReal x372=(new_r02*x368);
IkReal x373=(sj5*x368);
evalcond[0]=(x373+new_r02);
evalcond[1]=(((sj5*x369))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x369))+((new_r12*x368)));
evalcond[3]=(sj5+x372+x371);
evalcond[4]=(((cj5*x371))+((cj5*x372))+((new_r22*sj5)));
evalcond[5]=(((cj5*new_r20))+(((-1.0)*new_r00*x368*x370))+(((-1.0)*new_r10*x369*x370)));
evalcond[6]=((((-1.0)*new_r11*x369*x370))+((cj5*new_r21))+(((-1.0)*new_r01*x368*x370)));
evalcond[7]=((-1.0)+(((-1.0)*x370*x372))+(((-1.0)*x370*x371))+((cj5*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj5;
j6eval[1]=sj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj5;
j6eval[1]=cj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x374=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x374))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x374))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x374))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x374))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x374))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x375=IKsin(j6);
IkReal x376=IKcos(j6);
IkReal x377=((1.0)*cj4);
IkReal x378=(sj4*x375);
IkReal x379=((1.0)*x376);
IkReal x380=(x376*x377);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x375);
evalcond[1]=(((new_r00*sj4))+x375+(((-1.0)*new_r10*x377)));
evalcond[2]=(((new_r01*sj4))+x376+(((-1.0)*new_r11*x377)));
evalcond[3]=(((sj4*x376))+((cj4*x375))+new_r01);
evalcond[4]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x379)));
evalcond[5]=(x378+(((-1.0)*x380))+new_r00);
evalcond[6]=(x378+(((-1.0)*x380))+new_r11);
evalcond[7]=((((-1.0)*sj4*x379))+new_r10+(((-1.0)*x375*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x381=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x381))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x381))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x381))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x382=IKcos(j6);
IkReal x383=IKsin(j6);
IkReal x384=((1.0)*cj4);
IkReal x385=(sj4*x382);
IkReal x386=((1.0)*x383);
IkReal x387=(x383*x384);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x382);
evalcond[1]=((((-1.0)*new_r10*x384))+((new_r00*sj4))+x383);
evalcond[2]=((((-1.0)*new_r11*x384))+((new_r01*sj4))+x382);
evalcond[3]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x386)));
evalcond[4]=(((sj4*x383))+new_r00+((cj4*x382)));
evalcond[5]=(x385+(((-1.0)*x387))+new_r01);
evalcond[6]=(x385+(((-1.0)*x387))+new_r10);
evalcond[7]=((((-1.0)*sj4*x386))+new_r11+(((-1.0)*x382*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x388=IKcos(j6);
IkReal x389=IKsin(j6);
IkReal x390=((1.0)*x388);
evalcond[0]=(x389+new_r00);
evalcond[1]=(x388+new_r01);
evalcond[2]=(((new_r12*x388))+new_r20);
evalcond[3]=(((cj5*x389))+new_r11);
evalcond[4]=((((-1.0)*new_r12*x389))+new_r21);
evalcond[5]=((((-1.0)*cj5*x390))+new_r10);
evalcond[6]=(((cj5*new_r11))+x389+((new_r21*sj5)));
evalcond[7]=((((-1.0)*x390))+((new_r20*sj5))+((cj5*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x391=IKsin(j6);
IkReal x392=IKcos(j6);
IkReal x393=((1.0)*cj5);
IkReal x394=((1.0)*x392);
evalcond[0]=(new_r21+((new_r12*x391)));
evalcond[1]=(x391+(((-1.0)*new_r00)));
evalcond[2]=(x392+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r12*x394))+new_r20);
evalcond[4]=(((cj5*x391))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x392*x393)));
evalcond[6]=(x391+((new_r21*sj5))+(((-1.0)*new_r11*x393)));
evalcond[7]=((((-1.0)*x394))+((new_r20*sj5))+(((-1.0)*new_r10*x393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x395=IKcos(j6);
IkReal x396=IKsin(j6);
IkReal x397=((1.0)*x395);
evalcond[0]=(new_r20+((new_r02*x395)));
evalcond[1]=(x396+(((-1.0)*new_r10)));
evalcond[2]=(x395+(((-1.0)*new_r11)));
evalcond[3]=(((cj5*x396))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x396))+new_r21);
evalcond[5]=((((-1.0)*cj5*x397))+new_r00);
evalcond[6]=(((cj5*new_r01))+x396+((new_r21*sj5)));
evalcond[7]=((((-1.0)*x397))+((new_r20*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x398=IKsin(j6);
IkReal x399=IKcos(j6);
IkReal x400=((1.0)*new_r01);
IkReal x401=((1.0)*new_r00);
IkReal x402=((1.0)*x399);
evalcond[0]=(x398+new_r10);
evalcond[1]=(x399+new_r11);
evalcond[2]=(new_r21+((new_r02*x398)));
evalcond[3]=(new_r20+(((-1.0)*new_r02*x402)));
evalcond[4]=(((cj5*x398))+(((-1.0)*x400)));
evalcond[5]=((((-1.0)*cj5*x402))+(((-1.0)*x401)));
evalcond[6]=(x398+(((-1.0)*cj5*x400))+((new_r21*sj5)));
evalcond[7]=(((new_r20*sj5))+(((-1.0)*cj5*x401))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x404=IKPowWithIntegerCheck(sj5,-1);
if(!x404.valid){
continue;
}
IkReal x403=x404.value;
CheckValue<IkReal> x405=IKPowWithIntegerCheck(cj4,-1);
if(!x405.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x403)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x403*(x405.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x403))+IKsqr((x403*(x405.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x403), (x403*(x405.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x406=IKsin(j6);
IkReal x407=IKcos(j6);
IkReal x408=(cj4*new_r01);
IkReal x409=(new_r10*sj4);
IkReal x410=(cj4*cj5);
IkReal x411=((1.0)*cj4);
IkReal x412=(new_r11*sj4);
IkReal x413=(cj5*x406);
IkReal x414=((1.0)*x407);
evalcond[0]=(((sj5*x406))+new_r21);
evalcond[1]=((((-1.0)*sj5*x414))+new_r20);
evalcond[2]=(((new_r00*sj4))+x406+(((-1.0)*new_r10*x411)));
evalcond[3]=(((new_r01*sj4))+x407+(((-1.0)*new_r11*x411)));
evalcond[4]=(x408+x412+x413);
evalcond[5]=(((x406*x410))+new_r01+((sj4*x407)));
evalcond[6]=(((cj4*new_r00))+x409+(((-1.0)*cj5*x414)));
evalcond[7]=((((-1.0)*x410*x414))+new_r00+((sj4*x406)));
evalcond[8]=((((-1.0)*x407*x411))+new_r11+((sj4*x413)));
evalcond[9]=((((-1.0)*x406*x411))+(((-1.0)*cj5*sj4*x414))+new_r10);
evalcond[10]=(((cj5*x408))+((cj5*x412))+x406+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+((cj5*x409))+(((-1.0)*x414))+((new_r00*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(sj5,-1);
if(!x416.valid){
continue;
}
IkReal x415=x416.value;
CheckValue<IkReal> x417=IKPowWithIntegerCheck(sj4,-1);
if(!x417.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x415)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x415*(x417.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x415))+IKsqr((x415*(x417.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x415), (x415*(x417.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x418=IKsin(j6);
IkReal x419=IKcos(j6);
IkReal x420=(cj4*new_r01);
IkReal x421=(new_r10*sj4);
IkReal x422=(cj4*cj5);
IkReal x423=((1.0)*cj4);
IkReal x424=(new_r11*sj4);
IkReal x425=(cj5*x418);
IkReal x426=((1.0)*x419);
evalcond[0]=(((sj5*x418))+new_r21);
evalcond[1]=((((-1.0)*sj5*x426))+new_r20);
evalcond[2]=(((new_r00*sj4))+(((-1.0)*new_r10*x423))+x418);
evalcond[3]=(((new_r01*sj4))+x419+(((-1.0)*new_r11*x423)));
evalcond[4]=(x425+x424+x420);
evalcond[5]=(((x418*x422))+new_r01+((sj4*x419)));
evalcond[6]=(((cj4*new_r00))+x421+(((-1.0)*cj5*x426)));
evalcond[7]=((((-1.0)*x422*x426))+new_r00+((sj4*x418)));
evalcond[8]=(((sj4*x425))+(((-1.0)*x419*x423))+new_r11);
evalcond[9]=((((-1.0)*cj5*sj4*x426))+(((-1.0)*x418*x423))+new_r10);
evalcond[10]=(((cj5*x424))+((cj5*x420))+x418+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+(((-1.0)*x426))+((cj5*x421))+((new_r00*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x428.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x427.value)+(((1.5707963267949)*(x428.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x429=IKsin(j6);
IkReal x430=IKcos(j6);
IkReal x431=(cj4*new_r01);
IkReal x432=(new_r10*sj4);
IkReal x433=(cj4*cj5);
IkReal x434=((1.0)*cj4);
IkReal x435=(new_r11*sj4);
IkReal x436=(cj5*x429);
IkReal x437=((1.0)*x430);
evalcond[0]=(((sj5*x429))+new_r21);
evalcond[1]=((((-1.0)*sj5*x437))+new_r20);
evalcond[2]=(((new_r00*sj4))+x429+(((-1.0)*new_r10*x434)));
evalcond[3]=(((new_r01*sj4))+x430+(((-1.0)*new_r11*x434)));
evalcond[4]=(x431+x435+x436);
evalcond[5]=(((x429*x433))+((sj4*x430))+new_r01);
evalcond[6]=(((cj4*new_r00))+(((-1.0)*cj5*x437))+x432);
evalcond[7]=((((-1.0)*x433*x437))+((sj4*x429))+new_r00);
evalcond[8]=((((-1.0)*x430*x434))+((sj4*x436))+new_r11);
evalcond[9]=((((-1.0)*cj5*sj4*x437))+(((-1.0)*x429*x434))+new_r10);
evalcond[10]=(((cj5*x431))+((cj5*x435))+x429+((new_r21*sj5)));
evalcond[11]=((((-1.0)*x437))+((new_r00*x433))+((new_r20*sj5))+((cj5*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x438.value)))+(x439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x440=IKcos(j4);
IkReal x441=IKsin(j4);
IkReal x442=((1.0)*sj5);
IkReal x443=(new_r12*x441);
IkReal x444=(new_r02*x440);
IkReal x445=(sj5*x440);
evalcond[0]=(x445+new_r02);
evalcond[1]=(((sj5*x441))+new_r12);
evalcond[2]=(((new_r12*x440))+(((-1.0)*new_r02*x441)));
evalcond[3]=(sj5+x444+x443);
evalcond[4]=(((cj5*x443))+((cj5*x444))+((new_r22*sj5)));
evalcond[5]=((((-1.0)*new_r10*x441*x442))+(((-1.0)*new_r00*x440*x442))+((cj5*new_r20)));
evalcond[6]=((((-1.0)*new_r01*x440*x442))+((cj5*new_r21))+(((-1.0)*new_r11*x441*x442)));
evalcond[7]=((-1.0)+((cj5*new_r22))+(((-1.0)*x442*x443))+(((-1.0)*x442*x444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj5;
j6eval[1]=sj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj5;
j6eval[1]=cj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x446=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x446))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x446))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x446))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x446))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x447=IKsin(j6);
IkReal x448=IKcos(j6);
IkReal x449=((1.0)*cj4);
IkReal x450=(sj4*x447);
IkReal x451=((1.0)*x448);
IkReal x452=(x448*x449);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x447);
evalcond[1]=(((new_r00*sj4))+x447+(((-1.0)*new_r10*x449)));
evalcond[2]=(((new_r01*sj4))+x448+(((-1.0)*new_r11*x449)));
evalcond[3]=(((sj4*x448))+((cj4*x447))+new_r01);
evalcond[4]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x451)));
evalcond[5]=((((-1.0)*x452))+x450+new_r00);
evalcond[6]=((((-1.0)*x452))+x450+new_r11);
evalcond[7]=((((-1.0)*sj4*x451))+(((-1.0)*x447*x449))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x453=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x453))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x453))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x453))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x454=IKcos(j6);
IkReal x455=IKsin(j6);
IkReal x456=((1.0)*cj4);
IkReal x457=(sj4*x454);
IkReal x458=((1.0)*x455);
IkReal x459=(x455*x456);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x454);
evalcond[1]=((((-1.0)*new_r10*x456))+((new_r00*sj4))+x455);
evalcond[2]=(((new_r01*sj4))+(((-1.0)*new_r11*x456))+x454);
evalcond[3]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x458)));
evalcond[4]=(((cj4*x454))+((sj4*x455))+new_r00);
evalcond[5]=((((-1.0)*x459))+x457+new_r01);
evalcond[6]=((((-1.0)*x459))+x457+new_r10);
evalcond[7]=((((-1.0)*sj4*x458))+(((-1.0)*x454*x456))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x460=IKcos(j6);
IkReal x461=IKsin(j6);
IkReal x462=((1.0)*x460);
evalcond[0]=(x461+new_r00);
evalcond[1]=(x460+new_r01);
evalcond[2]=(((new_r12*x460))+new_r20);
evalcond[3]=(((cj5*x461))+new_r11);
evalcond[4]=((((-1.0)*new_r12*x461))+new_r21);
evalcond[5]=((((-1.0)*cj5*x462))+new_r10);
evalcond[6]=(((cj5*new_r11))+x461+((new_r21*sj5)));
evalcond[7]=(((new_r20*sj5))+((cj5*new_r10))+(((-1.0)*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x463=IKsin(j6);
IkReal x464=IKcos(j6);
IkReal x465=((1.0)*cj5);
IkReal x466=((1.0)*x464);
evalcond[0]=(((new_r12*x463))+new_r21);
evalcond[1]=(x463+(((-1.0)*new_r00)));
evalcond[2]=(x464+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r12*x466))+new_r20);
evalcond[4]=(((cj5*x463))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x464*x465))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x465))+x463+((new_r21*sj5)));
evalcond[7]=(((new_r20*sj5))+(((-1.0)*new_r10*x465))+(((-1.0)*x466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x467=IKcos(j6);
IkReal x468=IKsin(j6);
IkReal x469=((1.0)*x467);
evalcond[0]=(((new_r02*x467))+new_r20);
evalcond[1]=(x468+(((-1.0)*new_r10)));
evalcond[2]=(x467+(((-1.0)*new_r11)));
evalcond[3]=(((cj5*x468))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x468))+new_r21);
evalcond[5]=((((-1.0)*cj5*x469))+new_r00);
evalcond[6]=(((cj5*new_r01))+x468+((new_r21*sj5)));
evalcond[7]=(((new_r20*sj5))+((cj5*new_r00))+(((-1.0)*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x470=IKsin(j6);
IkReal x471=IKcos(j6);
IkReal x472=((1.0)*new_r01);
IkReal x473=((1.0)*new_r00);
IkReal x474=((1.0)*x471);
evalcond[0]=(x470+new_r10);
evalcond[1]=(x471+new_r11);
evalcond[2]=(((new_r02*x470))+new_r21);
evalcond[3]=((((-1.0)*new_r02*x474))+new_r20);
evalcond[4]=(((cj5*x470))+(((-1.0)*x472)));
evalcond[5]=((((-1.0)*cj5*x474))+(((-1.0)*x473)));
evalcond[6]=((((-1.0)*cj5*x472))+x470+((new_r21*sj5)));
evalcond[7]=((((-1.0)*cj5*x473))+((new_r20*sj5))+(((-1.0)*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x476=IKPowWithIntegerCheck(sj5,-1);
if(!x476.valid){
continue;
}
IkReal x475=x476.value;
CheckValue<IkReal> x477=IKPowWithIntegerCheck(cj4,-1);
if(!x477.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x475)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x475*(x477.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x475))+IKsqr((x475*(x477.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x475), (x475*(x477.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x478=IKsin(j6);
IkReal x479=IKcos(j6);
IkReal x480=(cj4*new_r01);
IkReal x481=(new_r10*sj4);
IkReal x482=(cj4*cj5);
IkReal x483=((1.0)*cj4);
IkReal x484=(new_r11*sj4);
IkReal x485=(cj5*x478);
IkReal x486=((1.0)*x479);
evalcond[0]=(((sj5*x478))+new_r21);
evalcond[1]=((((-1.0)*sj5*x486))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x483))+((new_r00*sj4))+x478);
evalcond[3]=((((-1.0)*new_r11*x483))+((new_r01*sj4))+x479);
evalcond[4]=(x480+x485+x484);
evalcond[5]=(((sj4*x479))+((x478*x482))+new_r01);
evalcond[6]=(((cj4*new_r00))+x481+(((-1.0)*cj5*x486)));
evalcond[7]=(((sj4*x478))+(((-1.0)*x482*x486))+new_r00);
evalcond[8]=(((sj4*x485))+(((-1.0)*x479*x483))+new_r11);
evalcond[9]=((((-1.0)*cj5*sj4*x486))+new_r10+(((-1.0)*x478*x483)));
evalcond[10]=(((cj5*x480))+((cj5*x484))+x478+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+(((-1.0)*x486))+((cj5*x481))+((new_r00*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(sj5,-1);
if(!x488.valid){
continue;
}
IkReal x487=x488.value;
CheckValue<IkReal> x489=IKPowWithIntegerCheck(sj4,-1);
if(!x489.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x487)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x487*(x489.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x487))+IKsqr((x487*(x489.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x487), (x487*(x489.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x490=IKsin(j6);
IkReal x491=IKcos(j6);
IkReal x492=(cj4*new_r01);
IkReal x493=(new_r10*sj4);
IkReal x494=(cj4*cj5);
IkReal x495=((1.0)*cj4);
IkReal x496=(new_r11*sj4);
IkReal x497=(cj5*x490);
IkReal x498=((1.0)*x491);
evalcond[0]=(new_r21+((sj5*x490)));
evalcond[1]=((((-1.0)*sj5*x498))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x495))+((new_r00*sj4))+x490);
evalcond[3]=(((new_r01*sj4))+(((-1.0)*new_r11*x495))+x491);
evalcond[4]=(x492+x496+x497);
evalcond[5]=(((sj4*x491))+((x490*x494))+new_r01);
evalcond[6]=(((cj4*new_r00))+x493+(((-1.0)*cj5*x498)));
evalcond[7]=(((sj4*x490))+(((-1.0)*x494*x498))+new_r00);
evalcond[8]=(((sj4*x497))+(((-1.0)*x491*x495))+new_r11);
evalcond[9]=((((-1.0)*cj5*sj4*x498))+(((-1.0)*x490*x495))+new_r10);
evalcond[10]=(((cj5*x492))+((cj5*x496))+x490+((new_r21*sj5)));
evalcond[11]=((((-1.0)*x498))+((new_r20*sj5))+((cj5*x493))+((new_r00*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
CheckValue<IkReal> x500=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x500.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x499.value)+(((1.5707963267949)*(x500.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x501=IKsin(j6);
IkReal x502=IKcos(j6);
IkReal x503=(cj4*new_r01);
IkReal x504=(new_r10*sj4);
IkReal x505=(cj4*cj5);
IkReal x506=((1.0)*cj4);
IkReal x507=(new_r11*sj4);
IkReal x508=(cj5*x501);
IkReal x509=((1.0)*x502);
evalcond[0]=(((sj5*x501))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj5*x509)));
evalcond[2]=(((new_r00*sj4))+x501+(((-1.0)*new_r10*x506)));
evalcond[3]=(((new_r01*sj4))+(((-1.0)*new_r11*x506))+x502);
evalcond[4]=(x508+x503+x507);
evalcond[5]=(((x501*x505))+((sj4*x502))+new_r01);
evalcond[6]=(((cj4*new_r00))+(((-1.0)*cj5*x509))+x504);
evalcond[7]=((((-1.0)*x505*x509))+((sj4*x501))+new_r00);
evalcond[8]=((((-1.0)*x502*x506))+((sj4*x508))+new_r11);
evalcond[9]=((((-1.0)*x501*x506))+(((-1.0)*cj5*sj4*x509))+new_r10);
evalcond[10]=(((cj5*x507))+((cj5*x503))+x501+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+(((-1.0)*x509))+((cj5*x504))+((new_r00*x505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x511.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x510.value)+(((1.5707963267949)*(x511.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break;
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(((sj5*(IKsin(j6))))+new_r21);
evalcond[1]=((((-1.0)*sj5*(IKcos(j6))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=new_r12;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
IkReal x512=((1.0)*new_r11);
IkReal x513=((((-1.0)*new_r10*x512))+(((-1.0)*new_r00*new_r01)));
j4eval[0]=x513;
j4eval[1]=((IKabs(((((-1.0)*sj6*x512))+((new_r00*sj6)))))+(IKabs((((new_r10*sj6))+((new_r01*sj6))))));
j4eval[2]=IKsign(x513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
IkReal x514=((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))));
j4eval[0]=x514;
j4eval[1]=IKsign(x514);
j4eval[2]=((IKabs(((((-1.0)*cj6*new_r11))+((new_r01*sj6)))))+(IKabs((((new_r11*sj6))+((cj6*new_r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
IkReal x515=((1.0)*new_r11);
IkReal x516=((((-1.0)*cj6*x515))+(((-1.0)*new_r01*sj6)));
j4eval[0]=x516;
j4eval[1]=IKsign(x516);
j4eval[2]=((IKabs((((cj6*sj6))+((new_r00*new_r01)))))+(IKabs(((1.0)+(((-1.0)*(cj6*cj6)))+(((-1.0)*new_r00*x515))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x517=((-1.0)*new_r01);
IkReal x519 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x519)==0){
continue;
}
IkReal x518=pow(x519,-0.5);
CheckValue<IkReal> x520 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x517),IKFAST_ATAN2_MAGTHRESH);
if(!x520.valid){
continue;
}
IkReal gconst32=((-1.0)*(x520.value));
IkReal gconst33=(new_r11*x518);
IkReal gconst34=(x517*x518);
CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x521.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x521.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x522=((-1.0)*new_r01);
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x522),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
IkReal x523=((-1.0)*(x525.value));
IkReal x524=x518;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x523;
IkReal gconst32=x523;
IkReal gconst33=(new_r11*x524);
IkReal gconst34=(x522*x524);
IkReal x526=new_r11*new_r11;
IkReal x527=(new_r10*new_r11);
IkReal x528=((((-1.0)*x527))+(((-1.0)*new_r00*new_r01)));
IkReal x529=x518;
IkReal x530=(new_r11*x529);
j4eval[0]=x528;
j4eval[1]=((IKabs(((((-1.0)*x526*x529))+((new_r00*x530)))))+(IKabs((((new_r01*x530))+((x527*x529))))));
j4eval[2]=IKsign(x528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x531=((-1.0)*new_r01);
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x531),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
IkReal x532=((-1.0)*(x534.value));
IkReal x533=x518;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x532;
IkReal gconst32=x532;
IkReal gconst33=(new_r11*x533);
IkReal gconst34=(x531*x533);
IkReal x535=new_r11*new_r11;
CheckValue<IkReal> x538=IKPowWithIntegerCheck(((new_r01*new_r01)+x535),-1);
if(!x538.valid){
continue;
}
IkReal x536=x538.value;
IkReal x537=(x535*x536);
j4eval[0]=((IKabs((((new_r00*new_r01*x537))+((new_r01*new_r11*x536))+((new_r00*x536*(new_r01*new_r01*new_r01))))))+(IKabs((((new_r01*new_r10))+x537))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x539=((-1.0)*new_r01);
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x539),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
IkReal x540=((-1.0)*(x542.value));
IkReal x541=x518;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x540;
IkReal gconst32=x540;
IkReal gconst33=(new_r11*x541);
IkReal gconst34=(x539*x541);
IkReal x543=new_r01*new_r01;
IkReal x544=new_r11*new_r11;
CheckValue<IkReal> x551=IKPowWithIntegerCheck((x544+x543),-1);
if(!x551.valid){
continue;
}
IkReal x545=x551.value;
IkReal x546=(x544*x545);
CheckValue<IkReal> x552=IKPowWithIntegerCheck(((((-1.0)*x543))+(((-1.0)*x544))),-1);
if(!x552.valid){
continue;
}
IkReal x547=x552.value;
IkReal x548=((1.0)*x547);
IkReal x549=(new_r11*x548);
IkReal x550=(new_r01*x548);
j4eval[0]=((IKabs(((((-1.0)*new_r01*x549*(new_r11*new_r11)))+(((-1.0)*new_r01*x549))+(((-1.0)*x549*(new_r01*new_r01*new_r01))))))+(IKabs(((((-1.0)*x546))+((x545*(x543*x543)))+((x543*x546))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x553=IKPowWithIntegerCheck(gconst34,-1);
if(!x553.valid){
continue;
}
sj4array[0]=(new_r10*(x553.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x554=IKcos(j4);
IkReal x555=IKsin(j4);
IkReal x556=((-1.0)*x554);
evalcond[0]=(new_r01*x554);
evalcond[1]=(new_r10*x556);
evalcond[2]=(gconst34*x556);
evalcond[3]=(gconst34+((new_r01*x555)));
evalcond[4]=(((gconst34*x555))+new_r01);
evalcond[5]=(((new_r10*x555))+(((-1.0)*gconst34)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst33;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x557=((-1.0)*new_r01);
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x557),IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
IkReal x558=((-1.0)*(x559.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x558;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x558;
IkReal gconst33=new_r11;
IkReal gconst34=x557;
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x560=((-1.0)*new_r01);
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x560),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
IkReal x561=((-1.0)*(x562.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x561;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x561;
IkReal gconst33=new_r11;
IkReal gconst34=x560;
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x563=((-1.0)*new_r01);
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x563),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
IkReal x564=((-1.0)*(x565.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x564;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x564;
IkReal gconst33=new_r11;
IkReal gconst34=x563;
j4eval[0]=1.0;
j4eval[1]=1.0;
j4eval[2]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x566=((1.0)*new_r01);
CheckValue<IkReal> x567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x566))+((gconst33*new_r11)))),-1);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst33*gconst33)))+(new_r01*new_r01))),IkReal((((gconst33*gconst34))+(((-1.0)*new_r11*x566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x567.value)))+(x568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x569=IKcos(j4);
IkReal x570=IKsin(j4);
IkReal x571=(gconst33*x570);
IkReal x572=((1.0)*x569);
IkReal x573=(gconst34*x570);
IkReal x574=(gconst34*x572);
evalcond[0]=(((new_r11*x570))+gconst33+((new_r01*x569)));
evalcond[1]=(x573+((gconst33*x569))+new_r01);
evalcond[2]=((((-1.0)*x574))+x571);
evalcond[3]=(((new_r01*x570))+gconst34+(((-1.0)*new_r11*x572)));
evalcond[4]=((((-1.0)*x574))+x571+new_r11);
evalcond[5]=((((-1.0)*x573))+(((-1.0)*gconst33*x572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst33*gconst33)))+(((-1.0)*(gconst34*gconst34))))),-1);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal((gconst34*new_r01)),IkReal((gconst33*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x575.value)))+(x576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x577=IKcos(j4);
IkReal x578=IKsin(j4);
IkReal x579=(gconst33*x578);
IkReal x580=((1.0)*x577);
IkReal x581=(gconst34*x578);
IkReal x582=(gconst34*x580);
evalcond[0]=(((new_r11*x578))+((new_r01*x577))+gconst33);
evalcond[1]=(((gconst33*x577))+x581+new_r01);
evalcond[2]=(x579+(((-1.0)*x582)));
evalcond[3]=(((new_r01*x578))+gconst34+(((-1.0)*new_r11*x580)));
evalcond[4]=(x579+new_r11+(((-1.0)*x582)));
evalcond[5]=((((-1.0)*gconst33*x580))+(((-1.0)*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst33*new_r11))+((gconst34*new_r01)))),-1);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(gconst33*gconst33),IkReal(((-1.0)*gconst33*gconst34)),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x583.value)))+(x584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x585=IKcos(j4);
IkReal x586=IKsin(j4);
IkReal x587=(gconst33*x586);
IkReal x588=((1.0)*x585);
IkReal x589=(gconst34*x586);
IkReal x590=(gconst34*x588);
evalcond[0]=(gconst33+((new_r01*x585))+((new_r11*x586)));
evalcond[1]=(((gconst33*x585))+x589+new_r01);
evalcond[2]=((((-1.0)*x590))+x587);
evalcond[3]=(gconst34+(((-1.0)*new_r11*x588))+((new_r01*x586)));
evalcond[4]=((((-1.0)*x590))+x587+new_r11);
evalcond[5]=((((-1.0)*gconst33*x588))+(((-1.0)*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
IkReal x591=((-1.0)*(x592.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x591;
new_r01=0;
new_r10=0;
IkReal gconst32=x591;
IkReal x593 = new_r11*new_r11;
if(IKabs(x593)==0){
continue;
}
IkReal gconst33=(new_r11*(pow(x593,-0.5)));
IkReal gconst34=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
IkReal x594=((-1.0)*(x595.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x594;
new_r01=0;
new_r10=0;
IkReal gconst32=x594;
IkReal x596 = new_r11*new_r11;
if(IKabs(x596)==0){
continue;
}
IkReal gconst33=(new_r11*(pow(x596,-0.5)));
IkReal gconst34=0;
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(gconst33,-1);
if(!x597.valid){
continue;
}
sj4array[0]=((-1.0)*new_r00*(x597.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x598=IKcos(j4);
IkReal x599=IKsin(j4);
evalcond[0]=(gconst33*x598);
evalcond[1]=(new_r00*x598);
evalcond[2]=((-1.0)*new_r11*x598);
evalcond[3]=(gconst33+((new_r00*x599)));
evalcond[4]=(((new_r11*x599))+gconst33);
evalcond[5]=(((gconst33*x599))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(new_r11,-1);
if(!x600.valid){
continue;
}
sj4array[0]=((-1.0)*gconst33*(x600.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x601=IKcos(j4);
IkReal x602=IKsin(j4);
IkReal x603=(gconst33*x602);
evalcond[0]=(gconst33*x601);
evalcond[1]=(new_r00*x601);
evalcond[2]=((-1.0)*new_r11*x601);
evalcond[3]=(gconst33+((new_r00*x602)));
evalcond[4]=(x603+new_r00);
evalcond[5]=(x603+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x604=IKPowWithIntegerCheck(new_r00,-1);
if(!x604.valid){
continue;
}
sj4array[0]=((-1.0)*gconst33*(x604.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x605=IKcos(j4);
IkReal x606=IKsin(j4);
IkReal x607=(gconst33*x606);
evalcond[0]=(gconst33*x605);
evalcond[1]=(new_r00*x605);
evalcond[2]=((-1.0)*new_r11*x605);
evalcond[3]=(gconst33+((new_r11*x606)));
evalcond[4]=(x607+new_r00);
evalcond[5]=(x607+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x608=((-1.0)*new_r01);
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(0),IkReal(x608),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
IkReal x609=((-1.0)*(x610.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x609;
new_r11=0;
IkReal gconst32=x609;
IkReal gconst33=0;
IkReal x611 = new_r01*new_r01;
if(IKabs(x611)==0){
continue;
}
IkReal gconst34=(x608*(pow(x611,-0.5)));
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x612=((-1.0)*new_r01);
CheckValue<IkReal> x614 = IKatan2WithCheck(IkReal(0),IkReal(x612),IKFAST_ATAN2_MAGTHRESH);
if(!x614.valid){
continue;
}
IkReal x613=((-1.0)*(x614.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x613;
new_r11=0;
IkReal gconst32=x613;
IkReal gconst33=0;
IkReal x615 = new_r01*new_r01;
if(IKabs(x615)==0){
continue;
}
IkReal gconst34=(x612*(pow(x615,-0.5)));
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x616=((-1.0)*new_r01);
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(0),IkReal(x616),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
IkReal x617=((-1.0)*(x618.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst33;
cj6=gconst34;
j6=x617;
new_r11=0;
IkReal gconst32=x617;
IkReal gconst33=0;
IkReal x619 = new_r01*new_r01;
if(IKabs(x619)==0){
continue;
}
IkReal gconst34=(x616*(pow(x619,-0.5)));
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x620=IKPowWithIntegerCheck(new_r01,-1);
if(!x620.valid){
continue;
}
CheckValue<IkReal> x621=IKPowWithIntegerCheck(gconst34,-1);
if(!x621.valid){
continue;
}
if( IKabs(((-1.0)*gconst34*(x620.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x621.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst34*(x620.value)))+IKsqr((new_r00*(x621.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst34*(x620.value)), (new_r00*(x621.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x622=IKcos(j4);
IkReal x623=IKsin(j4);
IkReal x624=((1.0)*gconst34);
evalcond[0]=(new_r01*x622);
evalcond[1]=((-1.0)*gconst34*x622);
evalcond[2]=(gconst34+((new_r01*x623)));
evalcond[3]=(new_r01+((gconst34*x623)));
evalcond[4]=((((-1.0)*x622*x624))+new_r00);
evalcond[5]=((((-1.0)*x623*x624))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x622))+((new_r00*x623)));
evalcond[7]=((((-1.0)*x624))+((new_r00*x622))+((new_r10*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x625 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x625.valid){
continue;
}
CheckValue<IkReal> x626=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x625.value)+(((1.5707963267949)*(x626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x627=IKcos(j4);
IkReal x628=IKsin(j4);
IkReal x629=((1.0)*gconst34);
evalcond[0]=(new_r01*x627);
evalcond[1]=((-1.0)*gconst34*x627);
evalcond[2]=(gconst34+((new_r01*x628)));
evalcond[3]=(new_r01+((gconst34*x628)));
evalcond[4]=((((-1.0)*x627*x629))+new_r00);
evalcond[5]=((((-1.0)*x628*x629))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x627))+((new_r00*x628)));
evalcond[7]=((((-1.0)*x629))+((new_r00*x627))+((new_r10*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x630 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x630.value)+(((1.5707963267949)*(x631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x632=IKcos(j4);
IkReal x633=IKsin(j4);
IkReal x634=((1.0)*gconst34);
evalcond[0]=(new_r01*x632);
evalcond[1]=((-1.0)*gconst34*x632);
evalcond[2]=(gconst34+((new_r01*x633)));
evalcond[3]=(new_r01+((gconst34*x633)));
evalcond[4]=(new_r00+(((-1.0)*x632*x634)));
evalcond[5]=((((-1.0)*x633*x634))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x632))+((new_r00*x633)));
evalcond[7]=((((-1.0)*x634))+((new_r00*x632))+((new_r10*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x635=((1.0)*new_r01);
CheckValue<IkReal> x636 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst33*gconst33)))+(new_r01*new_r01))),IkReal((((gconst33*gconst34))+(((-1.0)*new_r11*x635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x635))+((gconst33*new_r11)))),-1);
if(!x637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x636.value)+(((1.5707963267949)*(x637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x638=IKcos(j4);
IkReal x639=IKsin(j4);
IkReal x640=((1.0)*gconst34);
IkReal x641=(gconst33*x639);
IkReal x642=((1.0)*x638);
IkReal x643=(x638*x640);
evalcond[0]=(gconst33+((new_r01*x638))+((new_r11*x639)));
evalcond[1]=(((gconst33*x638))+new_r01+((gconst34*x639)));
evalcond[2]=(gconst33+(((-1.0)*new_r10*x642))+((new_r00*x639)));
evalcond[3]=(gconst34+(((-1.0)*new_r11*x642))+((new_r01*x639)));
evalcond[4]=((((-1.0)*x643))+x641+new_r00);
evalcond[5]=((((-1.0)*x643))+x641+new_r11);
evalcond[6]=(((new_r00*x638))+(((-1.0)*x640))+((new_r10*x639)));
evalcond[7]=((((-1.0)*gconst33*x642))+(((-1.0)*x639*x640))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x644=((1.0)*gconst33);
CheckValue<IkReal> x645=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x644))+(((-1.0)*gconst34*new_r10)))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal((((new_r01*new_r10))+(gconst33*gconst33))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst34*x644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x645.value)))+(x646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x647=IKcos(j4);
IkReal x648=IKsin(j4);
IkReal x649=((1.0)*gconst34);
IkReal x650=(gconst33*x648);
IkReal x651=((1.0)*x647);
IkReal x652=(x647*x649);
evalcond[0]=(gconst33+((new_r11*x648))+((new_r01*x647)));
evalcond[1]=(((gconst34*x648))+((gconst33*x647))+new_r01);
evalcond[2]=(gconst33+(((-1.0)*new_r10*x651))+((new_r00*x648)));
evalcond[3]=(gconst34+(((-1.0)*new_r11*x651))+((new_r01*x648)));
evalcond[4]=((((-1.0)*x652))+x650+new_r00);
evalcond[5]=((((-1.0)*x652))+x650+new_r11);
evalcond[6]=((((-1.0)*x649))+((new_r10*x648))+((new_r00*x647)));
evalcond[7]=((((-1.0)*gconst33*x651))+(((-1.0)*x648*x649))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x653=((1.0)*new_r11);
CheckValue<IkReal> x654=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x653))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal((((gconst33*new_r01))+((gconst33*new_r10)))),IkReal(((((-1.0)*gconst33*x653))+((gconst33*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x654.value)))+(x655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x656=IKcos(j4);
IkReal x657=IKsin(j4);
IkReal x658=((1.0)*gconst34);
IkReal x659=(gconst33*x657);
IkReal x660=((1.0)*x656);
IkReal x661=(x656*x658);
evalcond[0]=(gconst33+((new_r01*x656))+((new_r11*x657)));
evalcond[1]=(((gconst34*x657))+((gconst33*x656))+new_r01);
evalcond[2]=(gconst33+(((-1.0)*new_r10*x660))+((new_r00*x657)));
evalcond[3]=((((-1.0)*new_r11*x660))+gconst34+((new_r01*x657)));
evalcond[4]=((((-1.0)*x661))+x659+new_r00);
evalcond[5]=((((-1.0)*x661))+x659+new_r11);
evalcond[6]=((((-1.0)*x658))+((new_r10*x657))+((new_r00*x656)));
evalcond[7]=((((-1.0)*x657*x658))+(((-1.0)*gconst33*x660))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x662=((-1.0)*new_r11);
IkReal x664 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x664)==0){
continue;
}
IkReal x663=pow(x664,-0.5);
CheckValue<IkReal> x665 = IKatan2WithCheck(IkReal(x662),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x665.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x665.value))));
IkReal gconst36=(x662*x663);
IkReal gconst37=((1.0)*new_r01*x663);
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x666.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x667=((-1.0)*new_r11);
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal(x667),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
IkReal x668=((1.0)*(x670.value));
IkReal x669=x663;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x668)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x668)));
IkReal gconst36=(x667*x669);
IkReal gconst37=((1.0)*new_r01*x669);
IkReal x671=new_r11*new_r11;
IkReal x672=((1.0)*new_r01);
IkReal x673=((1.0)*new_r10);
IkReal x674=((((-1.0)*new_r00*x672))+(((-1.0)*new_r11*x673)));
IkReal x675=x663;
IkReal x676=(new_r11*x675);
j4eval[0]=x674;
j4eval[1]=((IKabs(((((-1.0)*x672*x676))+(((-1.0)*x673*x676)))))+(IKabs((((x671*x675))+(((-1.0)*new_r00*x676))))));
j4eval[2]=IKsign(x674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x677=((-1.0)*new_r11);
CheckValue<IkReal> x680 = IKatan2WithCheck(IkReal(x677),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x680.valid){
continue;
}
IkReal x678=((1.0)*(x680.value));
IkReal x679=x663;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x678)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x678)));
IkReal gconst36=(x677*x679);
IkReal gconst37=((1.0)*new_r01*x679);
IkReal x681=new_r11*new_r11;
IkReal x682=new_r01*new_r01*new_r01;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(((new_r01*new_r01)+x681),-1);
if(!x686.valid){
continue;
}
IkReal x683=x686.value;
IkReal x684=(x681*x683);
IkReal x685=(x682*x683);
j4eval[0]=((IKabs((((new_r01*new_r10*x684))+x684+((new_r10*x685)))))+(IKabs((((new_r01*new_r11*x683))+((new_r00*new_r01*x684))+((new_r00*x685))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x687=((-1.0)*new_r11);
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(x687),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
IkReal x688=((1.0)*(x690.value));
IkReal x689=x663;
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x688)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x688)));
IkReal gconst36=(x687*x689);
IkReal gconst37=((1.0)*new_r01*x689);
IkReal x691=new_r01*new_r01;
IkReal x692=new_r11*new_r11;
CheckValue<IkReal> x699=IKPowWithIntegerCheck((x691+x692),-1);
if(!x699.valid){
continue;
}
IkReal x693=x699.value;
IkReal x694=(x692*x693);
CheckValue<IkReal> x700=IKPowWithIntegerCheck(((((-1.0)*x691))+(((-1.0)*x692))),-1);
if(!x700.valid){
continue;
}
IkReal x695=x700.value;
IkReal x696=((1.0)*x695);
IkReal x697=(new_r11*x696);
IkReal x698=(new_r01*x696);
j4eval[0]=((IKabs(((((-1.0)*new_r01*x697))+(((-1.0)*x697*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x697*(new_r11*new_r11))))))+(IKabs((((x693*(x691*x691)))+((x691*x694))+(((-1.0)*x694))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x701=IKPowWithIntegerCheck(gconst37,-1);
if(!x701.valid){
continue;
}
sj4array[0]=(new_r10*(x701.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x702=IKcos(j4);
IkReal x703=IKsin(j4);
IkReal x704=((-1.0)*x702);
evalcond[0]=(new_r01*x702);
evalcond[1]=(new_r10*x704);
evalcond[2]=(gconst37*x704);
evalcond[3]=(((new_r01*x703))+gconst37);
evalcond[4]=(new_r01+((gconst37*x703)));
evalcond[5]=(((new_r10*x703))+(((-1.0)*gconst37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst36;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x705=((-1.0)*new_r11);
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal(x705),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
IkReal x706=((1.0)*(x707.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x706)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x706)));
IkReal gconst36=x705;
IkReal gconst37=((1.0)*new_r01);
j4eval[0]=1.0;
j4eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j4eval[2]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x708=((-1.0)*new_r11);
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(x708),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal x709=((1.0)*(x710.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x709)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x709)));
IkReal gconst36=x708;
IkReal gconst37=((1.0)*new_r01);
j4eval[0]=-1.0;
j4eval[1]=new_r01;
j4eval[2]=1.0;
j4eval[3]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x711=((-1.0)*new_r11);
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(x711),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
IkReal x712=((1.0)*(x713.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x712)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x712)));
IkReal gconst36=x711;
IkReal gconst37=((1.0)*new_r01);
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01)))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x714=((1.0)*new_r01);
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst36*gconst36)))+(new_r01*new_r01))),IkReal((((gconst36*gconst37))+(((-1.0)*new_r11*x714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*x714))+((gconst36*new_r11)))),-1);
if(!x716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x715.value)+(((1.5707963267949)*(x716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x717=IKsin(j4);
IkReal x718=IKcos(j4);
IkReal x719=(gconst36*x717);
IkReal x720=(gconst37*x717);
IkReal x721=((1.0)*x718);
IkReal x722=(gconst37*x721);
evalcond[0]=(((new_r01*x718))+gconst36+((new_r11*x717)));
evalcond[1]=(((gconst36*x718))+x720+new_r01);
evalcond[2]=((((-1.0)*x722))+x719);
evalcond[3]=(((new_r01*x717))+gconst37+(((-1.0)*new_r11*x721)));
evalcond[4]=((((-1.0)*x722))+x719+new_r11);
evalcond[5]=((((-1.0)*gconst36*x721))+(((-1.0)*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x723=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst36*gconst36)))+(((-1.0)*(gconst37*gconst37))))),-1);
if(!x723.valid){
continue;
}
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal((gconst37*new_r01)),IkReal((gconst36*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x723.value)))+(x724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x725=IKsin(j4);
IkReal x726=IKcos(j4);
IkReal x727=(gconst36*x725);
IkReal x728=(gconst37*x725);
IkReal x729=((1.0)*x726);
IkReal x730=(gconst37*x729);
evalcond[0]=(gconst36+((new_r01*x726))+((new_r11*x725)));
evalcond[1]=(((gconst36*x726))+x728+new_r01);
evalcond[2]=((((-1.0)*x730))+x727);
evalcond[3]=(gconst37+((new_r01*x725))+(((-1.0)*new_r11*x729)));
evalcond[4]=((((-1.0)*x730))+x727+new_r11);
evalcond[5]=((((-1.0)*gconst36*x729))+(((-1.0)*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(IKsign((((gconst37*new_r01))+(((-1.0)*gconst36*new_r11)))),-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732 = IKatan2WithCheck(IkReal(gconst36*gconst36),IkReal(((-1.0)*gconst36*gconst37)),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x731.value)))+(x732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x733=IKsin(j4);
IkReal x734=IKcos(j4);
IkReal x735=(gconst36*x733);
IkReal x736=(gconst37*x733);
IkReal x737=((1.0)*x734);
IkReal x738=(gconst37*x737);
evalcond[0]=(((new_r01*x734))+gconst36+((new_r11*x733)));
evalcond[1]=(((gconst36*x734))+x736+new_r01);
evalcond[2]=((((-1.0)*x738))+x735);
evalcond[3]=(((new_r01*x733))+gconst37+(((-1.0)*new_r11*x737)));
evalcond[4]=((((-1.0)*x738))+x735+new_r11);
evalcond[5]=((((-1.0)*gconst36*x737))+(((-1.0)*x736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x739=((-1.0)*new_r11);
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(x739),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
IkReal x740=((1.0)*(x741.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x740)));
new_r01=0;
new_r10=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x740)));
IkReal x742 = new_r11*new_r11;
if(IKabs(x742)==0){
continue;
}
IkReal gconst36=(x739*(pow(x742,-0.5)));
IkReal gconst37=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x743=((-1.0)*new_r11);
CheckValue<IkReal> x745 = IKatan2WithCheck(IkReal(x743),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x745.valid){
continue;
}
IkReal x744=((1.0)*(x745.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x744)));
new_r01=0;
new_r10=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x744)));
IkReal x746 = new_r11*new_r11;
if(IKabs(x746)==0){
continue;
}
IkReal gconst36=(x743*(pow(x746,-0.5)));
IkReal gconst37=0;
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x747=IKPowWithIntegerCheck(gconst36,-1);
if(!x747.valid){
continue;
}
sj4array[0]=((-1.0)*new_r00*(x747.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x748=IKcos(j4);
IkReal x749=IKsin(j4);
evalcond[0]=(gconst36*x748);
evalcond[1]=(new_r00*x748);
evalcond[2]=((-1.0)*new_r11*x748);
evalcond[3]=(gconst36+((new_r00*x749)));
evalcond[4]=(gconst36+((new_r11*x749)));
evalcond[5]=(new_r11+((gconst36*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x750=IKPowWithIntegerCheck(new_r11,-1);
if(!x750.valid){
continue;
}
sj4array[0]=((-1.0)*gconst36*(x750.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x751=IKcos(j4);
IkReal x752=IKsin(j4);
IkReal x753=(gconst36*x752);
evalcond[0]=(gconst36*x751);
evalcond[1]=(new_r00*x751);
evalcond[2]=((-1.0)*new_r11*x751);
evalcond[3]=(gconst36+((new_r00*x752)));
evalcond[4]=(x753+new_r00);
evalcond[5]=(x753+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(new_r00,-1);
if(!x754.valid){
continue;
}
sj4array[0]=((-1.0)*gconst36*(x754.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x755=IKcos(j4);
IkReal x756=IKsin(j4);
IkReal x757=(gconst36*x756);
evalcond[0]=(gconst36*x755);
evalcond[1]=(new_r00*x755);
evalcond[2]=((-1.0)*new_r11*x755);
evalcond[3]=(gconst36+((new_r11*x756)));
evalcond[4]=(x757+new_r00);
evalcond[5]=(x757+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=((1.0)*(x759.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x758)));
new_r11=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x758)));
IkReal gconst36=0;
IkReal x760 = new_r01*new_r01;
if(IKabs(x760)==0){
continue;
}
IkReal gconst37=((1.0)*new_r01*(pow(x760,-0.5)));
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
IkReal x761=((1.0)*(x762.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x761)));
new_r11=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x761)));
IkReal gconst36=0;
IkReal x763 = new_r01*new_r01;
if(IKabs(x763)==0){
continue;
}
IkReal gconst37=((1.0)*new_r01*(pow(x763,-0.5)));
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x765 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x765.valid){
continue;
}
IkReal x764=((1.0)*(x765.value));
sj5=0;
cj5=1.0;
j5=0;
sj6=gconst36;
cj6=gconst37;
j6=((3.14159265)+(((-1.0)*x764)));
new_r11=0;
IkReal gconst35=((3.14159265358979)+(((-1.0)*x764)));
IkReal gconst36=0;
IkReal x766 = new_r01*new_r01;
if(IKabs(x766)==0){
continue;
}
IkReal gconst37=((1.0)*new_r01*(pow(x766,-0.5)));
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(new_r01,-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768=IKPowWithIntegerCheck(gconst37,-1);
if(!x768.valid){
continue;
}
if( IKabs(((-1.0)*gconst37*(x767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x768.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst37*(x767.value)))+IKsqr((new_r00*(x768.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst37*(x767.value)), (new_r00*(x768.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x769=IKcos(j4);
IkReal x770=IKsin(j4);
IkReal x771=(gconst37*x770);
IkReal x772=(gconst37*x769);
evalcond[0]=(new_r01*x769);
evalcond[1]=((-1.0)*x772);
evalcond[2]=(gconst37+((new_r01*x770)));
evalcond[3]=(x771+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x772)));
evalcond[5]=(new_r10+(((-1.0)*x771)));
evalcond[6]=((((-1.0)*new_r10*x769))+((new_r00*x770)));
evalcond[7]=(((new_r00*x769))+((new_r10*x770))+(((-1.0)*gconst37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x773.value)+(((1.5707963267949)*(x774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x775=IKcos(j4);
IkReal x776=IKsin(j4);
IkReal x777=(gconst37*x776);
IkReal x778=(gconst37*x775);
evalcond[0]=(new_r01*x775);
evalcond[1]=((-1.0)*x778);
evalcond[2]=(gconst37+((new_r01*x776)));
evalcond[3]=(x777+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x778)));
evalcond[5]=(new_r10+(((-1.0)*x777)));
evalcond[6]=((((-1.0)*new_r10*x775))+((new_r00*x776)));
evalcond[7]=(((new_r00*x775))+((new_r10*x776))+(((-1.0)*gconst37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x779=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x779.value)))+(x780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x781=IKcos(j4);
IkReal x782=IKsin(j4);
IkReal x783=(gconst37*x782);
IkReal x784=(gconst37*x781);
evalcond[0]=(new_r01*x781);
evalcond[1]=((-1.0)*x784);
evalcond[2]=(gconst37+((new_r01*x782)));
evalcond[3]=(x783+new_r01);
evalcond[4]=((((-1.0)*x784))+new_r00);
evalcond[5]=((((-1.0)*x783))+new_r10);
evalcond[6]=(((new_r00*x782))+(((-1.0)*new_r10*x781)));
evalcond[7]=(((new_r10*x782))+((new_r00*x781))+(((-1.0)*gconst37)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x785=((1.0)*new_r01);
CheckValue<IkReal> x786=IKPowWithIntegerCheck(IKsign((((gconst36*new_r11))+(((-1.0)*gconst37*x785)))),-1);
if(!x786.valid){
continue;
}
CheckValue<IkReal> x787 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst36*gconst36)))+(new_r01*new_r01))),IkReal((((gconst36*gconst37))+(((-1.0)*new_r11*x785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x786.value)))+(x787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x788=IKsin(j4);
IkReal x789=IKcos(j4);
IkReal x790=(gconst36*x788);
IkReal x791=(gconst37*x788);
IkReal x792=((1.0)*x789);
IkReal x793=(gconst37*x792);
evalcond[0]=(((new_r11*x788))+gconst36+((new_r01*x789)));
evalcond[1]=(x791+new_r01+((gconst36*x789)));
evalcond[2]=(gconst36+(((-1.0)*new_r10*x792))+((new_r00*x788)));
evalcond[3]=(gconst37+((new_r01*x788))+(((-1.0)*new_r11*x792)));
evalcond[4]=((((-1.0)*x793))+x790+new_r00);
evalcond[5]=((((-1.0)*x793))+x790+new_r11);
evalcond[6]=(((new_r10*x788))+((new_r00*x789))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*x791))+new_r10+(((-1.0)*gconst36*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x794=((1.0)*gconst37);
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x794))+(((-1.0)*gconst36*new_r00)))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(((gconst36*gconst36)+((new_r01*new_r10)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst36*x794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x797=IKsin(j4);
IkReal x798=IKcos(j4);
IkReal x799=(gconst36*x797);
IkReal x800=(gconst37*x797);
IkReal x801=((1.0)*x798);
IkReal x802=(gconst37*x801);
evalcond[0]=(((new_r11*x797))+gconst36+((new_r01*x798)));
evalcond[1]=(((gconst36*x798))+new_r01+x800);
evalcond[2]=(gconst36+((new_r00*x797))+(((-1.0)*new_r10*x801)));
evalcond[3]=(gconst37+((new_r01*x797))+(((-1.0)*new_r11*x801)));
evalcond[4]=(x799+new_r00+(((-1.0)*x802)));
evalcond[5]=(x799+new_r11+(((-1.0)*x802)));
evalcond[6]=(((new_r10*x797))+((new_r00*x798))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*x800))+new_r10+(((-1.0)*gconst36*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x803=((1.0)*new_r11);
CheckValue<IkReal> x804=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r10*x803)))),-1);
if(!x804.valid){
continue;
}
CheckValue<IkReal> x805 = IKatan2WithCheck(IkReal((((gconst36*new_r10))+((gconst36*new_r01)))),IkReal((((gconst36*new_r00))+(((-1.0)*gconst36*x803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x804.value)))+(x805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x806=IKsin(j4);
IkReal x807=IKcos(j4);
IkReal x808=(gconst36*x806);
IkReal x809=(gconst37*x806);
IkReal x810=((1.0)*x807);
IkReal x811=(gconst37*x810);
evalcond[0]=(gconst36+((new_r11*x806))+((new_r01*x807)));
evalcond[1]=(((gconst36*x807))+new_r01+x809);
evalcond[2]=(gconst36+(((-1.0)*new_r10*x810))+((new_r00*x806)));
evalcond[3]=((((-1.0)*new_r11*x810))+gconst37+((new_r01*x806)));
evalcond[4]=((((-1.0)*x811))+new_r00+x808);
evalcond[5]=((((-1.0)*x811))+new_r11+x808);
evalcond[6]=(((new_r00*x807))+((new_r10*x806))+(((-1.0)*gconst37)));
evalcond[7]=((((-1.0)*x809))+(((-1.0)*gconst36*x810))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x812=IKsin(j4);
IkReal x813=IKcos(j4);
IkReal x814=((1.0)*x813);
evalcond[0]=(new_r01+x812);
evalcond[1]=((((-1.0)*x814))+new_r00);
evalcond[2]=((((-1.0)*x814))+new_r11);
evalcond[3]=((((-1.0)*x812))+new_r10);
evalcond[4]=(((new_r11*x812))+((new_r01*x813)));
evalcond[5]=(((new_r00*x812))+(((-1.0)*new_r10*x814)));
evalcond[6]=((-1.0)+((new_r00*x813))+((new_r10*x812)));
evalcond[7]=((1.0)+((new_r01*x812))+(((-1.0)*new_r11*x814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x815=IKcos(j4);
IkReal x816=IKsin(j4);
IkReal x817=((1.0)*x815);
evalcond[0]=(new_r00+x815);
evalcond[1]=(new_r11+x815);
evalcond[2]=(new_r10+x816);
evalcond[3]=((((-1.0)*x816))+new_r01);
evalcond[4]=(((new_r11*x816))+((new_r01*x815)));
evalcond[5]=(((new_r00*x816))+(((-1.0)*new_r10*x817)));
evalcond[6]=((1.0)+((new_r00*x815))+((new_r10*x816)));
evalcond[7]=((-1.0)+((new_r01*x816))+(((-1.0)*new_r11*x817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
new_r11=0;
new_r00=0;
j4eval[0]=new_r01;
j4eval[1]=IKsign(new_r01);
j4eval[2]=((IKabs(cj6))+(IKabs(sj6)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
new_r11=0;
new_r00=0;
j4eval[0]=new_r01;
j4eval[1]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
new_r11=0;
new_r00=0;
j4eval[0]=new_r01;
j4eval[1]=sj6;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=new_r10;
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x818=IKcos(j4);
IkReal x819=IKsin(j4);
IkReal x820=((-1.0)*x818);
evalcond[0]=(new_r01*x818);
evalcond[1]=(new_r01+x819);
evalcond[2]=x820;
evalcond[3]=(new_r10*x820);
evalcond[4]=((1.0)+((new_r01*x819)));
evalcond[5]=((-1.0)+((new_r10*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=new_r01;
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x821=IKcos(j4);
IkReal x822=IKsin(j4);
evalcond[0]=x821;
evalcond[1]=(new_r01*x821);
evalcond[2]=(new_r10+x822);
evalcond[3]=((-1.0)*new_r10*x821);
evalcond[4]=((-1.0)+((new_r01*x822)));
evalcond[5]=((1.0)+((new_r10*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(new_r01,-1);
if(!x824.valid){
continue;
}
IkReal x823=x824.value;
CheckValue<IkReal> x825=IKPowWithIntegerCheck(sj6,-1);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(x823,-2);
if(!x826.valid){
continue;
}
if( IKabs(((-1.0)*cj6*x823)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x823*(x825.value)*(((((-1.0)*(x826.value)))+(cj6*cj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*x823))+IKsqr((x823*(x825.value)*(((((-1.0)*(x826.value)))+(cj6*cj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj6*x823), (x823*(x825.value)*(((((-1.0)*(x826.value)))+(cj6*cj6)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x827=IKcos(j4);
IkReal x828=IKsin(j4);
IkReal x829=((1.0)*cj6);
IkReal x830=(sj6*x827);
evalcond[0]=(cj6+((new_r01*x828)));
evalcond[1]=(sj6+((new_r01*x827)));
evalcond[2]=((((-1.0)*new_r10*x827))+sj6);
evalcond[3]=(((new_r10*x828))+(((-1.0)*x829)));
evalcond[4]=(((cj6*x828))+new_r01+x830);
evalcond[5]=((((-1.0)*x827*x829))+((sj6*x828)));
evalcond[6]=((((-1.0)*x828*x829))+(((-1.0)*x830))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x831=IKPowWithIntegerCheck(new_r01,-1);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832=IKPowWithIntegerCheck(new_r10,-1);
if(!x832.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x831.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj6*(x832.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x831.value)))+IKsqr((sj6*(x832.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj6*(x831.value)), (sj6*(x832.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x833=IKcos(j4);
IkReal x834=IKsin(j4);
IkReal x835=((1.0)*cj6);
IkReal x836=(sj6*x833);
evalcond[0]=(cj6+((new_r01*x834)));
evalcond[1]=(sj6+((new_r01*x833)));
evalcond[2]=(sj6+(((-1.0)*new_r10*x833)));
evalcond[3]=((((-1.0)*x835))+((new_r10*x834)));
evalcond[4]=(((cj6*x834))+new_r01+x836);
evalcond[5]=(((sj6*x834))+(((-1.0)*x833*x835)));
evalcond[6]=((((-1.0)*x834*x835))+(((-1.0)*x836))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x837=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(((-1.0)*cj6)),IkReal(((-1.0)*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x837.value)))+(x838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x839=IKcos(j4);
IkReal x840=IKsin(j4);
IkReal x841=((1.0)*cj6);
IkReal x842=(sj6*x839);
evalcond[0]=(cj6+((new_r01*x840)));
evalcond[1]=(sj6+((new_r01*x839)));
evalcond[2]=(sj6+(((-1.0)*new_r10*x839)));
evalcond[3]=(((new_r10*x840))+(((-1.0)*x841)));
evalcond[4]=(((cj6*x840))+new_r01+x842);
evalcond[5]=(((sj6*x840))+(((-1.0)*x839*x841)));
evalcond[6]=((((-1.0)*x840*x841))+(((-1.0)*x842))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=1.0;
j5=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
IkReal x843=x844.value;
j4array[0]=((-1.0)*x843);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x843)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j4))))+((new_r00*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=1.0;
j5=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
IkReal x845=x846.value;
j4array[0]=((-1.0)*x845);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x845)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j4))))+((new_r01*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
new_r01=0;
new_r10=0;
j4eval[0]=new_r11;
j4eval[1]=IKsign(new_r11);
j4eval[2]=((IKabs(cj6))+(IKabs(sj6)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
new_r01=0;
new_r10=0;
j4eval[0]=new_r00;
j4eval[1]=((IKabs(cj6))+(IKabs(sj6)));
j4eval[2]=IKsign(new_r00);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
new_r01=0;
new_r10=0;
j4eval[0]=new_r00;
j4eval[1]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x847=IKPowWithIntegerCheck(new_r00,-1);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848=IKPowWithIntegerCheck(new_r11,-1);
if(!x848.valid){
continue;
}
if( IKabs(((-1.0)*sj6*(x847.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj6*(x848.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj6*(x847.value)))+IKsqr((cj6*(x848.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj6*(x847.value)), (cj6*(x848.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x849=IKsin(j4);
IkReal x850=IKcos(j4);
IkReal x851=((1.0)*cj6);
IkReal x852=(sj6*x849);
IkReal x853=(x850*x851);
evalcond[0]=(sj6+((new_r00*x849)));
evalcond[1]=(sj6+((new_r11*x849)));
evalcond[2]=(cj6+(((-1.0)*new_r11*x850)));
evalcond[3]=((((-1.0)*x851))+((new_r00*x850)));
evalcond[4]=(((cj6*x849))+((sj6*x850)));
evalcond[5]=((((-1.0)*x853))+new_r00+x852);
evalcond[6]=((((-1.0)*x853))+new_r11+x852);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(((-1.0)*sj6)),IkReal(cj6),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x854.value)))+(x855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x856=IKsin(j4);
IkReal x857=IKcos(j4);
IkReal x858=((1.0)*cj6);
IkReal x859=(sj6*x856);
IkReal x860=(x857*x858);
evalcond[0]=(sj6+((new_r00*x856)));
evalcond[1]=(sj6+((new_r11*x856)));
evalcond[2]=(cj6+(((-1.0)*new_r11*x857)));
evalcond[3]=((((-1.0)*x858))+((new_r00*x857)));
evalcond[4]=(((cj6*x856))+((sj6*x857)));
evalcond[5]=((((-1.0)*x860))+new_r00+x859);
evalcond[6]=((((-1.0)*x860))+new_r11+x859);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((-1.0)*sj6)),IkReal(cj6),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x861.value)))+(x862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x863=IKsin(j4);
IkReal x864=IKcos(j4);
IkReal x865=((1.0)*cj6);
IkReal x866=(sj6*x863);
IkReal x867=(x864*x865);
evalcond[0]=(((new_r00*x863))+sj6);
evalcond[1]=(sj6+((new_r11*x863)));
evalcond[2]=(cj6+(((-1.0)*new_r11*x864)));
evalcond[3]=((((-1.0)*x865))+((new_r00*x864)));
evalcond[4]=(((cj6*x863))+((sj6*x864)));
evalcond[5]=((((-1.0)*x867))+new_r00+x866);
evalcond[6]=((((-1.0)*x867))+new_r11+x866);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x868=((1.0)*new_r11);
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x868)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal((((cj6*sj6))+((new_r00*new_r01)))),IkReal(((1.0)+(((-1.0)*new_r00*x868))+(((-1.0)*(cj6*cj6))))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x869.value)))+(x870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x871=IKcos(j4);
IkReal x872=IKsin(j4);
IkReal x873=((1.0)*cj6);
IkReal x874=(sj6*x872);
IkReal x875=(cj6*x872);
IkReal x876=(sj6*x871);
IkReal x877=((1.0)*x871);
IkReal x878=(x871*x873);
evalcond[0]=(((new_r01*x871))+sj6+((new_r11*x872)));
evalcond[1]=(new_r01+x875+x876);
evalcond[2]=(((new_r00*x872))+sj6+(((-1.0)*new_r10*x877)));
evalcond[3]=(((new_r01*x872))+cj6+(((-1.0)*new_r11*x877)));
evalcond[4]=(new_r00+x874+(((-1.0)*x878)));
evalcond[5]=(new_r11+x874+(((-1.0)*x878)));
evalcond[6]=(((new_r00*x871))+((new_r10*x872))+(((-1.0)*x873)));
evalcond[7]=((((-1.0)*x872*x873))+(((-1.0)*x876))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x879 = IKatan2WithCheck(IkReal((((new_r11*sj6))+((cj6*new_r01)))),IkReal(((((-1.0)*cj6*new_r11))+((new_r01*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x879.valid){
continue;
}
CheckValue<IkReal> x880=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))))),-1);
if(!x880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x879.value)+(((1.5707963267949)*(x880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x881=IKcos(j4);
IkReal x882=IKsin(j4);
IkReal x883=((1.0)*cj6);
IkReal x884=(sj6*x882);
IkReal x885=(cj6*x882);
IkReal x886=(sj6*x881);
IkReal x887=((1.0)*x881);
IkReal x888=(x881*x883);
evalcond[0]=(sj6+((new_r01*x881))+((new_r11*x882)));
evalcond[1]=(new_r01+x885+x886);
evalcond[2]=(sj6+(((-1.0)*new_r10*x887))+((new_r00*x882)));
evalcond[3]=(cj6+((new_r01*x882))+(((-1.0)*new_r11*x887)));
evalcond[4]=((((-1.0)*x888))+new_r00+x884);
evalcond[5]=((((-1.0)*x888))+new_r11+x884);
evalcond[6]=(((new_r10*x882))+((new_r00*x881))+(((-1.0)*x883)));
evalcond[7]=((((-1.0)*x882*x883))+(((-1.0)*x886))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x889=((1.0)*new_r11);
CheckValue<IkReal> x890=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x889))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891 = IKatan2WithCheck(IkReal((((new_r10*sj6))+((new_r01*sj6)))),IkReal((((new_r00*sj6))+(((-1.0)*sj6*x889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x890.value)))+(x891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x892=IKcos(j4);
IkReal x893=IKsin(j4);
IkReal x894=((1.0)*cj6);
IkReal x895=(sj6*x893);
IkReal x896=(cj6*x893);
IkReal x897=(sj6*x892);
IkReal x898=((1.0)*x892);
IkReal x899=(x892*x894);
evalcond[0]=(sj6+((new_r11*x893))+((new_r01*x892)));
evalcond[1]=(new_r01+x896+x897);
evalcond[2]=(sj6+((new_r00*x893))+(((-1.0)*new_r10*x898)));
evalcond[3]=(cj6+((new_r01*x893))+(((-1.0)*new_r11*x898)));
evalcond[4]=((((-1.0)*x899))+new_r00+x895);
evalcond[5]=((((-1.0)*x899))+new_r11+x895);
evalcond[6]=(((new_r00*x892))+((new_r10*x893))+(((-1.0)*x894)));
evalcond[7]=((((-1.0)*x897))+(((-1.0)*x893*x894))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x900=((1.0)*new_r10);
IkReal x901=((((-1.0)*new_r11*x900))+(((-1.0)*new_r00*new_r01)));
j4eval[0]=x901;
j4eval[1]=((IKabs((((cj6*new_r11))+((cj6*new_r00)))))+(IKabs(((((-1.0)*cj6*x900))+((cj6*new_r01))))));
j4eval[2]=IKsign(x901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x902=((1.0)*new_r10);
IkReal x903=((((-1.0)*cj6*new_r00))+(((-1.0)*sj6*x902)));
j4eval[0]=x903;
j4eval[1]=((IKabs(((((-1.0)*new_r01*x902))+(cj6*cj6))))+(IKabs((((cj6*sj6))+((new_r00*new_r01))))));
j4eval[2]=IKsign(x903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x904=((1.0)*new_r00);
IkReal x905=((((-1.0)*sj6*x904))+((cj6*new_r10)));
j4eval[0]=x905;
j4eval[1]=((IKabs((((cj6*sj6))+(((-1.0)*new_r10*x904)))))+(IKabs(((((-1.0)*(cj6*cj6)))+(new_r00*new_r00)))));
j4eval[2]=IKsign(x905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x906=((-1.0)*new_r00);
IkReal x908 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x908)==0){
continue;
}
IkReal x907=pow(x908,-0.5);
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(new_r10),IkReal(x906),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
IkReal gconst38=((-1.0)*(x909.value));
IkReal gconst39=((-1.0)*new_r10*x907);
IkReal gconst40=(x906*x907);
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j6+(x910.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x911=((-1.0)*new_r00);
CheckValue<IkReal> x914 = IKatan2WithCheck(IkReal(new_r10),IkReal(x911),IKFAST_ATAN2_MAGTHRESH);
if(!x914.valid){
continue;
}
IkReal x912=((-1.0)*(x914.value));
IkReal x913=x907;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x912;
IkReal gconst38=x912;
IkReal gconst39=((-1.0)*new_r10*x913);
IkReal gconst40=(x911*x913);
IkReal x915=new_r00*new_r00;
IkReal x916=((1.0)*new_r11);
IkReal x917=((1.0)*new_r00*new_r01);
IkReal x918=((((-1.0)*x917))+(((-1.0)*new_r10*x916)));
IkReal x919=x907;
IkReal x920=(new_r00*x919);
j4eval[0]=x918;
j4eval[1]=((IKabs(((((-1.0)*x915*x919))+(((-1.0)*x916*x920)))))+(IKabs((((new_r10*x920))+(((-1.0)*x917*x919))))));
j4eval[2]=IKsign(x918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x921=((-1.0)*new_r00);
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(new_r10),IkReal(x921),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
IkReal x922=((-1.0)*(x924.value));
IkReal x923=x907;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x922;
IkReal gconst38=x922;
IkReal gconst39=((-1.0)*new_r10*x923);
IkReal gconst40=(x921*x923);
IkReal x925=new_r10*new_r10;
IkReal x926=new_r00*new_r00;
CheckValue<IkReal> x929=IKPowWithIntegerCheck((x926+x925),-1);
if(!x929.valid){
continue;
}
IkReal x927=x929.value;
IkReal x928=(new_r00*x927);
j4eval[0]=((IKabs(((((-1.0)*new_r01*new_r10))+((x926*x927)))))+(IKabs((((new_r01*x925*x928))+((new_r01*x928*(new_r00*new_r00)))+((new_r10*x928))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x930=((-1.0)*new_r00);
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal(new_r10),IkReal(x930),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
IkReal x931=((-1.0)*(x933.value));
IkReal x932=x907;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x931;
IkReal gconst38=x931;
IkReal gconst39=((-1.0)*new_r10*x932);
IkReal gconst40=(x930*x932);
IkReal x934=new_r00*new_r00;
IkReal x935=new_r10*new_r10;
CheckValue<IkReal> x939=IKPowWithIntegerCheck((x935+x934),-1);
if(!x939.valid){
continue;
}
IkReal x936=x939.value;
IkReal x937=(new_r10*x936);
IkReal x938=((1.0)*x936);
j4eval[0]=((IKabs(((((-1.0)*x934*x935*x938))+(((-1.0)*x938*(x935*x935)))+((x934*x936)))))+(IKabs((((x937*(new_r00*new_r00*new_r00)))+((new_r00*x937))+((new_r00*x937*(new_r10*new_r10)))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
IkReal x940=((-1.0)*(x941.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x940;
new_r11=0;
new_r00=0;
IkReal gconst38=x940;
IkReal x942 = new_r10*new_r10;
if(IKabs(x942)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x942,-0.5)));
IkReal gconst40=0;
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x943=IKPowWithIntegerCheck(gconst39,-1);
if(!x943.valid){
continue;
}
cj4array[0]=(new_r01*(x943.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x944=IKsin(j4);
IkReal x945=IKcos(j4);
IkReal x946=((1.0)*x945);
evalcond[0]=(new_r01*x944);
evalcond[1]=(new_r10*x944);
evalcond[2]=(gconst39*x944);
evalcond[3]=(gconst39+(((-1.0)*new_r10*x946)));
evalcond[4]=((((-1.0)*gconst39*x946))+new_r10);
evalcond[5]=(((new_r01*x945))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(new_r10,-1);
if(!x947.valid){
continue;
}
cj4array[0]=(gconst39*(x947.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x948=IKsin(j4);
IkReal x949=IKcos(j4);
IkReal x950=((1.0)*gconst39);
IkReal x951=(x949*x950);
evalcond[0]=(new_r01*x948);
evalcond[1]=(new_r10*x948);
evalcond[2]=(gconst39*x948);
evalcond[3]=(new_r01+(((-1.0)*x951)));
evalcond[4]=(new_r10+(((-1.0)*x951)));
evalcond[5]=(((new_r01*x949))+(((-1.0)*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst40;
evalcond[2]=gconst39;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x952=((-1.0)*new_r00);
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal(new_r10),IkReal(x952),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
IkReal x953=((-1.0)*(x954.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x953;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x953;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x952;
j4eval[0]=1.0;
j4eval[1]=1.0;
j4eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x955=((-1.0)*new_r00);
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(new_r10),IkReal(x955),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
IkReal x956=((-1.0)*(x957.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x956;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x956;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x955;
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x958=((-1.0)*new_r00);
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(new_r10),IkReal(x958),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
IkReal x959=((-1.0)*(x960.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x959;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x959;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x958;
j4eval[0]=1.0;
j4eval[1]=((((0.5)*(IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j4eval[2]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*new_r10))+(((-1.0)*gconst40*new_r00)))),-1);
if(!x961.valid){
continue;
}
CheckValue<IkReal> x962 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst39*gconst40)))),IkReal(((gconst40*gconst40)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x961.value)))+(x962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x963=IKcos(j4);
IkReal x964=IKsin(j4);
IkReal x965=((1.0)*gconst39);
IkReal x966=(gconst40*x964);
IkReal x967=((1.0)*x963);
IkReal x968=(x963*x965);
evalcond[0]=(x966+(((-1.0)*x968)));
evalcond[1]=(((new_r00*x963))+gconst40+((new_r10*x964)));
evalcond[2]=(((gconst40*x963))+((gconst39*x964))+new_r00);
evalcond[3]=(((new_r00*x964))+gconst39+(((-1.0)*new_r10*x967)));
evalcond[4]=((((-1.0)*x964*x965))+(((-1.0)*gconst40*x967)));
evalcond[5]=(new_r10+x966+(((-1.0)*x968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst39*gconst39)))+(((-1.0)*(gconst40*gconst40))))),-1);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal((gconst39*new_r00)),IkReal((gconst40*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x969.value)))+(x970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x971=IKcos(j4);
IkReal x972=IKsin(j4);
IkReal x973=((1.0)*gconst39);
IkReal x974=(gconst40*x972);
IkReal x975=((1.0)*x971);
IkReal x976=(x971*x973);
evalcond[0]=(x974+(((-1.0)*x976)));
evalcond[1]=(gconst40+((new_r10*x972))+((new_r00*x971)));
evalcond[2]=(((gconst39*x972))+new_r00+((gconst40*x971)));
evalcond[3]=(gconst39+(((-1.0)*new_r10*x975))+((new_r00*x972)));
evalcond[4]=((((-1.0)*gconst40*x975))+(((-1.0)*x972*x973)));
evalcond[5]=(new_r10+x974+(((-1.0)*x976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*new_r10))+(((-1.0)*gconst40*new_r00)))),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal((gconst39*gconst40)),IkReal(gconst40*gconst40),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x977.value)))+(x978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x979=IKcos(j4);
IkReal x980=IKsin(j4);
IkReal x981=((1.0)*gconst39);
IkReal x982=(gconst40*x980);
IkReal x983=((1.0)*x979);
IkReal x984=(x979*x981);
evalcond[0]=((((-1.0)*x984))+x982);
evalcond[1]=(gconst40+((new_r10*x980))+((new_r00*x979)));
evalcond[2]=(((gconst39*x980))+new_r00+((gconst40*x979)));
evalcond[3]=(((new_r00*x980))+gconst39+(((-1.0)*new_r10*x983)));
evalcond[4]=((((-1.0)*gconst40*x983))+(((-1.0)*x980*x981)));
evalcond[5]=((((-1.0)*x984))+new_r10+x982);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x985=((-1.0)*new_r00);
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(0),IkReal(x985),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
IkReal x986=((-1.0)*(x987.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x986;
new_r01=0;
new_r10=0;
IkReal gconst38=x986;
IkReal gconst39=0;
IkReal x988 = new_r00*new_r00;
if(IKabs(x988)==0){
continue;
}
IkReal gconst40=(x985*(pow(x988,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x989=IKPowWithIntegerCheck(gconst40,-1);
if(!x989.valid){
continue;
}
cj4array[0]=(new_r11*(x989.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x990=IKsin(j4);
IkReal x991=IKcos(j4);
evalcond[0]=(new_r00*x990);
evalcond[1]=(new_r11*x990);
evalcond[2]=(gconst40*x990);
evalcond[3]=(gconst40+((new_r00*x991)));
evalcond[4]=(new_r00+((gconst40*x991)));
evalcond[5]=(gconst40+(((-1.0)*new_r11*x991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x992=IKPowWithIntegerCheck(new_r11,-1);
if(!x992.valid){
continue;
}
cj4array[0]=(gconst40*(x992.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x993=IKsin(j4);
IkReal x994=IKcos(j4);
IkReal x995=(gconst40*x994);
evalcond[0]=(new_r00*x993);
evalcond[1]=(new_r11*x993);
evalcond[2]=(gconst40*x993);
evalcond[3]=(gconst40+((new_r00*x994)));
evalcond[4]=(new_r00+x995);
evalcond[5]=((((-1.0)*x995))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x997 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x997.valid){
continue;
}
IkReal x996=((-1.0)*(x997.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x996;
new_r00=0;
IkReal gconst38=x996;
IkReal x998 = new_r10*new_r10;
if(IKabs(x998)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x998,-0.5)));
IkReal gconst40=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1000 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1000.valid){
continue;
}
IkReal x999=((-1.0)*(x1000.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x999;
new_r00=0;
IkReal gconst38=x999;
IkReal x1001 = new_r10*new_r10;
if(IKabs(x1001)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x1001,-0.5)));
IkReal gconst40=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1003 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1003.valid){
continue;
}
IkReal x1002=((-1.0)*(x1003.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst39;
cj6=gconst40;
j6=x1002;
new_r00=0;
IkReal gconst38=x1002;
IkReal x1004 = new_r10*new_r10;
if(IKabs(x1004)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x1004,-0.5)));
IkReal gconst40=0;
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(gconst39,-1);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(new_r10,-1);
if(!x1006.valid){
continue;
}
if( IKabs((new_r11*(x1005.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst39*(x1006.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1005.value)))+IKsqr((gconst39*(x1006.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r11*(x1005.value)), (gconst39*(x1006.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1007=IKsin(j4);
IkReal x1008=IKcos(j4);
IkReal x1009=((1.0)*gconst39);
IkReal x1010=((1.0)*x1008);
IkReal x1011=(x1008*x1009);
evalcond[0]=(new_r10*x1007);
evalcond[1]=(gconst39*x1007);
evalcond[2]=(gconst39+(((-1.0)*new_r10*x1010)));
evalcond[3]=((((-1.0)*x1011))+new_r01);
evalcond[4]=((((-1.0)*x1007*x1009))+new_r11);
evalcond[5]=((((-1.0)*x1011))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1010))+((new_r01*x1007)));
evalcond[7]=((((-1.0)*x1009))+((new_r11*x1007))+((new_r01*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(IKsign(gconst39),-1);
if(!x1013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1012.value)+(((1.5707963267949)*(x1013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1014=IKsin(j4);
IkReal x1015=IKcos(j4);
IkReal x1016=((1.0)*gconst39);
IkReal x1017=((1.0)*x1015);
IkReal x1018=(x1015*x1016);
evalcond[0]=(new_r10*x1014);
evalcond[1]=(gconst39*x1014);
evalcond[2]=(gconst39+(((-1.0)*new_r10*x1017)));
evalcond[3]=((((-1.0)*x1018))+new_r01);
evalcond[4]=((((-1.0)*x1014*x1016))+new_r11);
evalcond[5]=((((-1.0)*x1018))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1017))+((new_r01*x1014)));
evalcond[7]=(((new_r11*x1014))+(((-1.0)*x1016))+((new_r01*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(gconst39),-1);
if(!x1020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1019.value)+(((1.5707963267949)*(x1020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1021=IKsin(j4);
IkReal x1022=IKcos(j4);
IkReal x1023=((1.0)*gconst39);
IkReal x1024=((1.0)*x1022);
IkReal x1025=(x1022*x1023);
evalcond[0]=(new_r10*x1021);
evalcond[1]=(gconst39*x1021);
evalcond[2]=(gconst39+(((-1.0)*new_r10*x1024)));
evalcond[3]=((((-1.0)*x1025))+new_r01);
evalcond[4]=((((-1.0)*x1021*x1023))+new_r11);
evalcond[5]=((((-1.0)*x1025))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1024))+((new_r01*x1021)));
evalcond[7]=(((new_r11*x1021))+(((-1.0)*x1023))+((new_r01*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*new_r10))+(((-1.0)*gconst40*new_r00)))),-1);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst39*gconst40)))),IkReal(((gconst40*gconst40)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1028=IKcos(j4);
IkReal x1029=IKsin(j4);
IkReal x1030=((1.0)*gconst39);
IkReal x1031=(gconst40*x1029);
IkReal x1032=((1.0)*x1028);
IkReal x1033=(x1028*x1030);
evalcond[0]=(((new_r10*x1029))+gconst40+((new_r00*x1028)));
evalcond[1]=(new_r00+((gconst40*x1028))+((gconst39*x1029)));
evalcond[2]=(gconst39+(((-1.0)*new_r10*x1032))+((new_r00*x1029)));
evalcond[3]=(gconst40+(((-1.0)*new_r11*x1032))+((new_r01*x1029)));
evalcond[4]=((((-1.0)*x1033))+x1031+new_r01);
evalcond[5]=((((-1.0)*x1033))+x1031+new_r10);
evalcond[6]=((((-1.0)*x1030))+((new_r11*x1029))+((new_r01*x1028)));
evalcond[7]=((((-1.0)*x1029*x1030))+(((-1.0)*gconst40*x1032))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1034=((1.0)*new_r10);
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((gconst39*gconst40)))),IkReal(((gconst40*gconst40)+(((-1.0)*new_r01*x1034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*new_r00))+(((-1.0)*gconst39*x1034)))),-1);
if(!x1036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1035.value)+(((1.5707963267949)*(x1036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1037=IKcos(j4);
IkReal x1038=IKsin(j4);
IkReal x1039=((1.0)*gconst39);
IkReal x1040=(gconst40*x1038);
IkReal x1041=((1.0)*x1037);
IkReal x1042=(x1037*x1039);
evalcond[0]=(gconst40+((new_r10*x1038))+((new_r00*x1037)));
evalcond[1]=(((gconst40*x1037))+new_r00+((gconst39*x1038)));
evalcond[2]=(gconst39+((new_r00*x1038))+(((-1.0)*new_r10*x1041)));
evalcond[3]=(gconst40+((new_r01*x1038))+(((-1.0)*new_r11*x1041)));
evalcond[4]=(x1040+new_r01+(((-1.0)*x1042)));
evalcond[5]=(x1040+new_r10+(((-1.0)*x1042)));
evalcond[6]=((((-1.0)*x1039))+((new_r11*x1038))+((new_r01*x1037)));
evalcond[7]=((((-1.0)*gconst40*x1041))+(((-1.0)*x1038*x1039))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1043=((1.0)*new_r10);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1043)))),-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal((((gconst40*new_r00))+((gconst40*new_r11)))),IkReal(((((-1.0)*gconst40*x1043))+((gconst40*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1044.value)))+(x1045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1046=IKcos(j4);
IkReal x1047=IKsin(j4);
IkReal x1048=((1.0)*gconst39);
IkReal x1049=(gconst40*x1047);
IkReal x1050=((1.0)*x1046);
IkReal x1051=(x1046*x1048);
evalcond[0]=(gconst40+((new_r00*x1046))+((new_r10*x1047)));
evalcond[1]=(((gconst40*x1046))+((gconst39*x1047))+new_r00);
evalcond[2]=(gconst39+((new_r00*x1047))+(((-1.0)*new_r10*x1050)));
evalcond[3]=(gconst40+((new_r01*x1047))+(((-1.0)*new_r11*x1050)));
evalcond[4]=((((-1.0)*x1051))+x1049+new_r01);
evalcond[5]=((((-1.0)*x1051))+x1049+new_r10);
evalcond[6]=(((new_r11*x1047))+((new_r01*x1046))+(((-1.0)*x1048)));
evalcond[7]=((((-1.0)*gconst40*x1050))+new_r11+(((-1.0)*x1047*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1054 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1054)==0){
continue;
}
IkReal x1052=pow(x1054,-0.5);
IkReal x1053=((1.0)*x1052);
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1055.value))));
IkReal gconst42=(new_r10*x1053);
IkReal gconst43=(new_r00*x1053);
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6+(x1056.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
IkReal x1057=((1.0)*(x1060.value));
IkReal x1058=x1052;
IkReal x1059=((1.0)*x1058);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1057)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1057)));
IkReal gconst42=(new_r10*x1059);
IkReal gconst43=(new_r00*x1059);
IkReal x1061=new_r00*new_r00;
IkReal x1062=((1.0)*new_r00);
IkReal x1063=((((-1.0)*new_r01*x1062))+(((-1.0)*new_r10*new_r11)));
IkReal x1064=x1052;
IkReal x1065=(new_r00*x1064);
j4eval[0]=x1063;
j4eval[1]=((IKabs((((new_r01*x1065))+(((-1.0)*new_r10*x1062*x1064)))))+(IKabs((((x1061*x1064))+((new_r11*x1065))))));
j4eval[2]=IKsign(x1063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
IkReal x1066=((1.0)*(x1069.value));
IkReal x1067=x1052;
IkReal x1068=((1.0)*x1067);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1066)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1066)));
IkReal gconst42=(new_r10*x1068);
IkReal gconst43=(new_r00*x1068);
IkReal x1070=new_r10*new_r10;
IkReal x1071=new_r00*new_r00;
IkReal x1072=((1.0)*new_r01);
CheckValue<IkReal> x1076=IKPowWithIntegerCheck((x1070+x1071),-1);
if(!x1076.valid){
continue;
}
IkReal x1073=x1076.value;
IkReal x1074=(new_r10*x1073);
IkReal x1075=(new_r01*x1073);
j4eval[0]=((IKabs(((((-1.0)*x1071*x1072*x1074))+((x1071*x1073))+(((-1.0)*x1072*x1074*(new_r10*new_r10))))))+(IKabs((((x1075*(new_r00*new_r00*new_r00)))+((new_r00*x1070*x1075))+((new_r00*x1074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1080 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1080.valid){
continue;
}
IkReal x1077=((1.0)*(x1080.value));
IkReal x1078=x1052;
IkReal x1079=((1.0)*x1078);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1077)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1077)));
IkReal gconst42=(new_r10*x1079);
IkReal gconst43=(new_r00*x1079);
IkReal x1081=new_r00*new_r00;
IkReal x1082=new_r10*new_r10;
CheckValue<IkReal> x1086=IKPowWithIntegerCheck((x1082+x1081),-1);
if(!x1086.valid){
continue;
}
IkReal x1083=x1086.value;
IkReal x1084=(new_r10*x1083);
IkReal x1085=((1.0)*x1083);
j4eval[0]=((IKabs((((new_r00*x1084))+((new_r00*x1084*(new_r10*new_r10)))+((x1084*(new_r00*new_r00*new_r00))))))+(IKabs((((x1081*x1083))+(((-1.0)*x1081*x1082*x1085))+(((-1.0)*x1085*(x1082*x1082)))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1088 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1088.valid){
continue;
}
IkReal x1087=((1.0)*(x1088.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1087)));
new_r11=0;
new_r00=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1087)));
IkReal x1089 = new_r10*new_r10;
if(IKabs(x1089)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x1089,-0.5)));
IkReal gconst43=0;
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(gconst42,-1);
if(!x1090.valid){
continue;
}
cj4array[0]=(new_r01*(x1090.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1091=IKsin(j4);
IkReal x1092=IKcos(j4);
IkReal x1093=((1.0)*x1092);
evalcond[0]=(new_r01*x1091);
evalcond[1]=(new_r10*x1091);
evalcond[2]=(gconst42*x1091);
evalcond[3]=(gconst42+(((-1.0)*new_r10*x1093)));
evalcond[4]=((((-1.0)*gconst42*x1093))+new_r10);
evalcond[5]=((((-1.0)*gconst42))+((new_r01*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(new_r10,-1);
if(!x1094.valid){
continue;
}
cj4array[0]=(gconst42*(x1094.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1095=IKsin(j4);
IkReal x1096=IKcos(j4);
IkReal x1097=((1.0)*gconst42);
IkReal x1098=(x1096*x1097);
evalcond[0]=(new_r01*x1095);
evalcond[1]=(new_r10*x1095);
evalcond[2]=(gconst42*x1095);
evalcond[3]=((((-1.0)*x1098))+new_r01);
evalcond[4]=((((-1.0)*x1098))+new_r10);
evalcond[5]=(((new_r01*x1096))+(((-1.0)*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst43;
evalcond[2]=gconst42;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1100 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1100.valid){
continue;
}
IkReal x1099=((1.0)*(x1100.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1099)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1099)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j4eval[0]=-1.0;
j4eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j4eval[2]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1102 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1102.valid){
continue;
}
IkReal x1101=((1.0)*(x1102.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1101)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1101)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1104 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1104.valid){
continue;
}
IkReal x1103=((1.0)*(x1104.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1103)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1103)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal((((gconst42*gconst43))+((new_r00*new_r10)))),IkReal(((gconst43*gconst43)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
CheckValue<IkReal> x1106=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*new_r10))+(((-1.0)*gconst43*new_r00)))),-1);
if(!x1106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1105.value)+(((1.5707963267949)*(x1106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1107=IKcos(j4);
IkReal x1108=IKsin(j4);
IkReal x1109=(gconst43*x1108);
IkReal x1110=(gconst43*x1107);
IkReal x1111=(gconst42*x1108);
IkReal x1112=((1.0)*x1107);
IkReal x1113=(gconst42*x1112);
evalcond[0]=(x1109+(((-1.0)*x1113)));
evalcond[1]=(gconst43+((new_r00*x1107))+((new_r10*x1108)));
evalcond[2]=(x1111+x1110+new_r00);
evalcond[3]=(gconst42+((new_r00*x1108))+(((-1.0)*new_r10*x1112)));
evalcond[4]=((((-1.0)*x1111))+(((-1.0)*x1110)));
evalcond[5]=(x1109+new_r10+(((-1.0)*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal((gconst42*new_r00)),IkReal((gconst43*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst42*gconst42)))+(((-1.0)*(gconst43*gconst43))))),-1);
if(!x1115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1114.value)+(((1.5707963267949)*(x1115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1116=IKcos(j4);
IkReal x1117=IKsin(j4);
IkReal x1118=(gconst43*x1117);
IkReal x1119=(gconst43*x1116);
IkReal x1120=(gconst42*x1117);
IkReal x1121=((1.0)*x1116);
IkReal x1122=(gconst42*x1121);
evalcond[0]=(x1118+(((-1.0)*x1122)));
evalcond[1]=(gconst43+((new_r00*x1116))+((new_r10*x1117)));
evalcond[2]=(x1119+x1120+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1121))+gconst42+((new_r00*x1117)));
evalcond[4]=((((-1.0)*x1119))+(((-1.0)*x1120)));
evalcond[5]=(x1118+(((-1.0)*x1122))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((gconst42*gconst43)),IkReal(gconst43*gconst43),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*new_r10))+(((-1.0)*gconst43*new_r00)))),-1);
if(!x1124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j4);
IkReal x1126=IKsin(j4);
IkReal x1127=(gconst43*x1126);
IkReal x1128=(gconst43*x1125);
IkReal x1129=(gconst42*x1126);
IkReal x1130=((1.0)*x1125);
IkReal x1131=(gconst42*x1130);
evalcond[0]=(x1127+(((-1.0)*x1131)));
evalcond[1]=(gconst43+((new_r10*x1126))+((new_r00*x1125)));
evalcond[2]=(x1128+x1129+new_r00);
evalcond[3]=(gconst42+(((-1.0)*new_r10*x1130))+((new_r00*x1126)));
evalcond[4]=((((-1.0)*x1129))+(((-1.0)*x1128)));
evalcond[5]=(x1127+(((-1.0)*x1131))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
IkReal x1132=((1.0)*(x1133.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1132)));
new_r01=0;
new_r10=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1132)));
IkReal gconst42=0;
IkReal x1134 = new_r00*new_r00;
if(IKabs(x1134)==0){
continue;
}
IkReal gconst43=((1.0)*new_r00*(pow(x1134,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(gconst43,-1);
if(!x1135.valid){
continue;
}
cj4array[0]=(new_r11*(x1135.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1136=IKsin(j4);
IkReal x1137=IKcos(j4);
evalcond[0]=(new_r00*x1136);
evalcond[1]=(new_r11*x1136);
evalcond[2]=(gconst43*x1136);
evalcond[3]=(gconst43+((new_r00*x1137)));
evalcond[4]=(((gconst43*x1137))+new_r00);
evalcond[5]=(gconst43+(((-1.0)*new_r11*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(new_r11,-1);
if(!x1138.valid){
continue;
}
cj4array[0]=(gconst43*(x1138.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1139=IKsin(j4);
IkReal x1140=IKcos(j4);
IkReal x1141=(gconst43*x1140);
evalcond[0]=(new_r00*x1139);
evalcond[1]=(new_r11*x1139);
evalcond[2]=(gconst43*x1139);
evalcond[3]=(((new_r00*x1140))+gconst43);
evalcond[4]=(x1141+new_r00);
evalcond[5]=((((-1.0)*x1141))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal x1142=((1.0)*(x1143.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1142)));
new_r00=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1142)));
IkReal x1144 = new_r10*new_r10;
if(IKabs(x1144)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x1144,-0.5)));
IkReal gconst43=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
IkReal x1145=((1.0)*(x1146.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1145)));
new_r00=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1145)));
IkReal x1147 = new_r10*new_r10;
if(IKabs(x1147)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x1147,-0.5)));
IkReal gconst43=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1149 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1149.valid){
continue;
}
IkReal x1148=((1.0)*(x1149.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst42;
cj6=gconst43;
j6=((3.14159265)+(((-1.0)*x1148)));
new_r00=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1148)));
IkReal x1150 = new_r10*new_r10;
if(IKabs(x1150)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x1150,-0.5)));
IkReal gconst43=0;
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(gconst42,-1);
if(!x1151.valid){
continue;
}
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(new_r10,-1);
if(!x1152.valid){
continue;
}
if( IKabs((new_r11*(x1151.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst42*(x1152.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1151.value)))+IKsqr((gconst42*(x1152.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r11*(x1151.value)), (gconst42*(x1152.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1153=IKsin(j4);
IkReal x1154=IKcos(j4);
IkReal x1155=(gconst42*x1153);
IkReal x1156=((1.0)*x1154);
IkReal x1157=(gconst42*x1156);
evalcond[0]=(new_r10*x1153);
evalcond[1]=x1155;
evalcond[2]=(gconst42+(((-1.0)*new_r10*x1156)));
evalcond[3]=((((-1.0)*x1157))+new_r01);
evalcond[4]=((((-1.0)*x1155))+new_r11);
evalcond[5]=((((-1.0)*x1157))+new_r10);
evalcond[6]=(((new_r01*x1153))+(((-1.0)*new_r11*x1156)));
evalcond[7]=(((new_r11*x1153))+(((-1.0)*gconst42))+((new_r01*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x1158.valid){
continue;
}
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1158.value)))+(x1159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1160=IKsin(j4);
IkReal x1161=IKcos(j4);
IkReal x1162=(gconst42*x1160);
IkReal x1163=((1.0)*x1161);
IkReal x1164=(gconst42*x1163);
evalcond[0]=(new_r10*x1160);
evalcond[1]=x1162;
evalcond[2]=((((-1.0)*new_r10*x1163))+gconst42);
evalcond[3]=(new_r01+(((-1.0)*x1164)));
evalcond[4]=(new_r11+(((-1.0)*x1162)));
evalcond[5]=(new_r10+(((-1.0)*x1164)));
evalcond[6]=((((-1.0)*new_r11*x1163))+((new_r01*x1160)));
evalcond[7]=((((-1.0)*gconst42))+((new_r11*x1160))+((new_r01*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x1165.valid){
continue;
}
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1165.value)))+(x1166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1167=IKsin(j4);
IkReal x1168=IKcos(j4);
IkReal x1169=(gconst42*x1167);
IkReal x1170=((1.0)*x1168);
IkReal x1171=(gconst42*x1170);
evalcond[0]=(new_r10*x1167);
evalcond[1]=x1169;
evalcond[2]=((((-1.0)*new_r10*x1170))+gconst42);
evalcond[3]=((((-1.0)*x1171))+new_r01);
evalcond[4]=(new_r11+(((-1.0)*x1169)));
evalcond[5]=((((-1.0)*x1171))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1170))+((new_r01*x1167)));
evalcond[7]=((((-1.0)*gconst42))+((new_r11*x1167))+((new_r01*x1168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal((((gconst42*gconst43))+((new_r00*new_r10)))),IkReal(((gconst43*gconst43)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
CheckValue<IkReal> x1173=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*new_r10))+(((-1.0)*gconst43*new_r00)))),-1);
if(!x1173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1172.value)+(((1.5707963267949)*(x1173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1174=IKsin(j4);
IkReal x1175=IKcos(j4);
IkReal x1176=(gconst43*x1174);
IkReal x1177=(gconst43*x1175);
IkReal x1178=(gconst42*x1174);
IkReal x1179=((1.0)*x1175);
IkReal x1180=(gconst42*x1179);
evalcond[0]=(gconst43+((new_r10*x1174))+((new_r00*x1175)));
evalcond[1]=(x1177+x1178+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1179))+gconst42+((new_r00*x1174)));
evalcond[3]=((((-1.0)*new_r11*x1179))+gconst43+((new_r01*x1174)));
evalcond[4]=(x1176+(((-1.0)*x1180))+new_r01);
evalcond[5]=(x1176+(((-1.0)*x1180))+new_r10);
evalcond[6]=((((-1.0)*gconst42))+((new_r11*x1174))+((new_r01*x1175)));
evalcond[7]=(new_r11+(((-1.0)*x1177))+(((-1.0)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1181=((1.0)*new_r10);
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*x1181))+(((-1.0)*gconst43*new_r00)))),-1);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal((((gconst42*gconst43))+((new_r00*new_r01)))),IkReal(((gconst43*gconst43)+(((-1.0)*new_r01*x1181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1182.value)))+(x1183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1184=IKsin(j4);
IkReal x1185=IKcos(j4);
IkReal x1186=(gconst43*x1184);
IkReal x1187=(gconst43*x1185);
IkReal x1188=(gconst42*x1184);
IkReal x1189=((1.0)*x1185);
IkReal x1190=(gconst42*x1189);
evalcond[0]=(gconst43+((new_r10*x1184))+((new_r00*x1185)));
evalcond[1]=(x1188+x1187+new_r00);
evalcond[2]=(gconst42+(((-1.0)*new_r10*x1189))+((new_r00*x1184)));
evalcond[3]=(gconst43+(((-1.0)*new_r11*x1189))+((new_r01*x1184)));
evalcond[4]=(x1186+(((-1.0)*x1190))+new_r01);
evalcond[5]=(x1186+(((-1.0)*x1190))+new_r10);
evalcond[6]=((((-1.0)*gconst42))+((new_r01*x1185))+((new_r11*x1184)));
evalcond[7]=(new_r11+(((-1.0)*x1188))+(((-1.0)*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1191=((1.0)*new_r10);
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1191))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1192.valid){
continue;
}
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal((((gconst43*new_r11))+((gconst43*new_r00)))),IkReal((((gconst43*new_r01))+(((-1.0)*gconst43*x1191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1192.value)))+(x1193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1194=IKsin(j4);
IkReal x1195=IKcos(j4);
IkReal x1196=(gconst43*x1194);
IkReal x1197=(gconst43*x1195);
IkReal x1198=(gconst42*x1194);
IkReal x1199=((1.0)*x1195);
IkReal x1200=(gconst42*x1199);
evalcond[0]=(gconst43+((new_r00*x1195))+((new_r10*x1194)));
evalcond[1]=(x1198+x1197+new_r00);
evalcond[2]=(gconst42+(((-1.0)*new_r10*x1199))+((new_r00*x1194)));
evalcond[3]=(gconst43+(((-1.0)*new_r11*x1199))+((new_r01*x1194)));
evalcond[4]=(x1196+new_r01+(((-1.0)*x1200)));
evalcond[5]=(x1196+new_r10+(((-1.0)*x1200)));
evalcond[6]=((((-1.0)*gconst42))+((new_r11*x1194))+((new_r01*x1195)));
evalcond[7]=(new_r11+(((-1.0)*x1198))+(((-1.0)*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1201=((-1.0)*new_r10);
IkReal x1203 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1203)==0){
continue;
}
IkReal x1202=pow(x1203,-0.5);
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1201),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1204.value));
IkReal gconst45=(new_r00*x1202);
IkReal gconst46=(x1201*x1202);
CheckValue<IkReal> x1205 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1205.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1206=((-1.0)*new_r10);
CheckValue<IkReal> x1209 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1206),IKFAST_ATAN2_MAGTHRESH);
if(!x1209.valid){
continue;
}
IkReal x1207=((-1.0)*(x1209.value));
IkReal x1208=x1202;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1207;
IkReal gconst44=x1207;
IkReal gconst45=(new_r00*x1208);
IkReal gconst46=(x1206*x1208);
IkReal x1210=new_r10*new_r10;
IkReal x1211=((1.0)*new_r00);
IkReal x1212=((1.0)*new_r10*new_r11);
IkReal x1213=((((-1.0)*new_r01*x1211))+(((-1.0)*x1212)));
IkReal x1214=x1202;
IkReal x1215=(new_r10*x1214);
j4eval[0]=x1213;
j4eval[1]=((IKabs(((((-1.0)*new_r01*x1215))+((x1210*x1214)))))+(IKabs(((((-1.0)*x1212*x1214))+(((-1.0)*x1211*x1215))))));
j4eval[2]=IKsign(x1213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1216=((-1.0)*new_r10);
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1216),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
IkReal x1217=((-1.0)*(x1219.value));
IkReal x1218=x1202;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1217;
IkReal gconst44=x1217;
IkReal gconst45=(new_r00*x1218);
IkReal gconst46=(x1216*x1218);
IkReal x1220=new_r10*new_r10;
CheckValue<IkReal> x1223=IKPowWithIntegerCheck((x1220+(new_r00*new_r00)),-1);
if(!x1223.valid){
continue;
}
IkReal x1221=x1223.value;
IkReal x1222=(new_r00*x1221);
j4eval[0]=((IKabs((((new_r00*new_r11))+((x1220*x1221)))))+(IKabs((((new_r01*x1220*x1222))+((new_r01*x1222*(new_r00*new_r00)))+((new_r10*x1222))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1224=((-1.0)*new_r10);
CheckValue<IkReal> x1227 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1224),IKFAST_ATAN2_MAGTHRESH);
if(!x1227.valid){
continue;
}
IkReal x1225=((-1.0)*(x1227.value));
IkReal x1226=x1202;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1225;
IkReal gconst44=x1225;
IkReal gconst45=(new_r00*x1226);
IkReal gconst46=(x1224*x1226);
IkReal x1228=new_r10*new_r10;
IkReal x1229=new_r00*new_r00;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck((x1229+x1228),-1);
if(!x1233.valid){
continue;
}
IkReal x1230=x1233.value;
IkReal x1231=(new_r10*x1230);
IkReal x1232=(x1228*x1230);
j4eval[0]=((IKabs((((new_r00*x1231*(new_r10*new_r10)))+((new_r00*x1231))+((x1231*(new_r00*new_r00*new_r00))))))+(IKabs((x1232+(((-1.0)*x1230*(x1229*x1229)))+(((-1.0)*x1229*x1232))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1234=((-1.0)*new_r10);
CheckValue<IkReal> x1236 = IKatan2WithCheck(IkReal(0),IkReal(x1234),IKFAST_ATAN2_MAGTHRESH);
if(!x1236.valid){
continue;
}
IkReal x1235=((-1.0)*(x1236.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1235;
new_r11=0;
new_r00=0;
IkReal gconst44=x1235;
IkReal gconst45=0;
IkReal x1237 = new_r10*new_r10;
if(IKabs(x1237)==0){
continue;
}
IkReal gconst46=(x1234*(pow(x1237,-0.5)));
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(gconst46,-1);
if(!x1238.valid){
continue;
}
sj4array[0]=((-1.0)*new_r01*(x1238.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1239=IKcos(j4);
IkReal x1240=IKsin(j4);
evalcond[0]=(new_r01*x1239);
evalcond[1]=(gconst46*x1239);
evalcond[2]=((-1.0)*new_r10*x1239);
evalcond[3]=(gconst46+((new_r01*x1240)));
evalcond[4]=(gconst46+((new_r10*x1240)));
evalcond[5]=(((gconst46*x1240))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(new_r01,-1);
if(!x1241.valid){
continue;
}
sj4array[0]=((-1.0)*gconst46*(x1241.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1242=IKcos(j4);
IkReal x1243=IKsin(j4);
IkReal x1244=(gconst46*x1243);
evalcond[0]=(new_r01*x1242);
evalcond[1]=(gconst46*x1242);
evalcond[2]=((-1.0)*new_r10*x1242);
evalcond[3]=(x1244+new_r01);
evalcond[4]=(gconst46+((new_r10*x1243)));
evalcond[5]=(x1244+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst46;
evalcond[2]=gconst45;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1245=((-1.0)*new_r10);
CheckValue<IkReal> x1247 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1245),IKFAST_ATAN2_MAGTHRESH);
if(!x1247.valid){
continue;
}
IkReal x1246=((-1.0)*(x1247.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1246;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst44=x1246;
IkReal gconst45=new_r00;
IkReal gconst46=x1245;
j4eval[0]=-1.0;
j4eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j4eval[2]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1248=((-1.0)*new_r10);
CheckValue<IkReal> x1250 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1248),IKFAST_ATAN2_MAGTHRESH);
if(!x1250.valid){
continue;
}
IkReal x1249=((-1.0)*(x1250.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1249;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst44=x1249;
IkReal gconst45=new_r00;
IkReal gconst46=x1248;
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1251=((-1.0)*new_r10);
CheckValue<IkReal> x1253 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1251),IKFAST_ATAN2_MAGTHRESH);
if(!x1253.valid){
continue;
}
IkReal x1252=((-1.0)*(x1253.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1252;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst44=x1252;
IkReal gconst45=new_r00;
IkReal gconst46=x1251;
j4eval[0]=1.0;
j4eval[1]=1.0;
j4eval[2]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1254=((1.0)*gconst46);
CheckValue<IkReal> x1255=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1254))+((gconst45*new_r00)))),-1);
if(!x1255.valid){
continue;
}
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(((gconst46*gconst46)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst45*x1254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1255.value)))+(x1256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1257=IKcos(j4);
IkReal x1258=IKsin(j4);
IkReal x1259=((1.0)*gconst45);
IkReal x1260=(gconst46*x1258);
IkReal x1261=(gconst46*x1257);
IkReal x1262=(x1257*x1259);
evalcond[0]=(x1260+(((-1.0)*x1262)));
evalcond[1]=(((new_r00*x1257))+gconst46+((new_r10*x1258)));
evalcond[2]=(x1261+new_r00+((gconst45*x1258)));
evalcond[3]=((((-1.0)*new_r10*x1257))+((new_r00*x1258))+gconst45);
evalcond[4]=((((-1.0)*x1258*x1259))+(((-1.0)*x1261)));
evalcond[5]=(x1260+new_r10+(((-1.0)*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst46*gconst46))))),-1);
if(!x1263.valid){
continue;
}
CheckValue<IkReal> x1264 = IKatan2WithCheck(IkReal((gconst45*new_r00)),IkReal((gconst46*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1263.value)))+(x1264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1265=IKcos(j4);
IkReal x1266=IKsin(j4);
IkReal x1267=((1.0)*gconst45);
IkReal x1268=(gconst46*x1266);
IkReal x1269=(gconst46*x1265);
IkReal x1270=(x1265*x1267);
evalcond[0]=(x1268+(((-1.0)*x1270)));
evalcond[1]=(gconst46+((new_r00*x1265))+((new_r10*x1266)));
evalcond[2]=(x1269+new_r00+((gconst45*x1266)));
evalcond[3]=((((-1.0)*new_r10*x1265))+gconst45+((new_r00*x1266)));
evalcond[4]=((((-1.0)*x1266*x1267))+(((-1.0)*x1269)));
evalcond[5]=(x1268+(((-1.0)*x1270))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(gconst45*gconst45),IkReal((gconst45*gconst46)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst45*new_r00))+((gconst46*new_r10)))),-1);
if(!x1272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1271.value)+(((1.5707963267949)*(x1272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j4);
IkReal x1274=IKsin(j4);
IkReal x1275=((1.0)*gconst45);
IkReal x1276=(gconst46*x1274);
IkReal x1277=(gconst46*x1273);
IkReal x1278=(x1273*x1275);
evalcond[0]=(x1276+(((-1.0)*x1278)));
evalcond[1]=(((new_r00*x1273))+gconst46+((new_r10*x1274)));
evalcond[2]=(x1277+((gconst45*x1274))+new_r00);
evalcond[3]=(((new_r00*x1274))+gconst45+(((-1.0)*new_r10*x1273)));
evalcond[4]=((((-1.0)*x1274*x1275))+(((-1.0)*x1277)));
evalcond[5]=(x1276+(((-1.0)*x1278))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(gconst45,-1);
if(!x1279.valid){
continue;
}
sj4array[0]=(new_r11*(x1279.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1280=IKcos(j4);
IkReal x1281=IKsin(j4);
IkReal x1282=((-1.0)*x1280);
evalcond[0]=(new_r00*x1280);
evalcond[1]=(new_r11*x1282);
evalcond[2]=(gconst45*x1282);
evalcond[3]=(gconst45+((new_r00*x1281)));
evalcond[4]=(((gconst45*x1281))+new_r00);
evalcond[5]=(((new_r11*x1281))+(((-1.0)*gconst45)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
IkReal x1283=((-1.0)*(x1284.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1283;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1283;
IkReal x1285 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1285)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1285,-0.5)));
IkReal gconst46=0;
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
IkReal x1286=((-1.0)*(x1287.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1286;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1286;
IkReal x1288 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1288)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1288,-0.5)));
IkReal gconst46=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
IkReal x1289=((-1.0)*(x1290.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1289;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1289;
IkReal x1291 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1291)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1291,-0.5)));
IkReal gconst46=0;
j4eval[0]=new_r00;
j4eval[1]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(new_r00,-1);
if(!x1292.valid){
continue;
}
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(new_r01,-1);
if(!x1293.valid){
continue;
}
if( IKabs(((-1.0)*gconst45*(x1292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst45*(x1293.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst45*(x1292.value)))+IKsqr((gconst45*(x1293.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst45*(x1292.value)), (gconst45*(x1293.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1294=IKsin(j4);
IkReal x1295=IKcos(j4);
IkReal x1296=((1.0)*gconst45);
IkReal x1297=((-1.0)*gconst45);
evalcond[0]=(new_r01*x1294);
evalcond[1]=(new_r00*x1295);
evalcond[2]=(x1294*x1297);
evalcond[3]=(x1295*x1297);
evalcond[4]=(gconst45+((new_r00*x1294)));
evalcond[5]=(((gconst45*x1294))+new_r00);
evalcond[6]=((((-1.0)*x1295*x1296))+new_r01);
evalcond[7]=((((-1.0)*x1296))+((new_r01*x1295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(new_r00,-1);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(gconst45,-1);
if(!x1299.valid){
continue;
}
if( IKabs(((-1.0)*gconst45*(x1298.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1299.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst45*(x1298.value)))+IKsqr((new_r01*(x1299.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst45*(x1298.value)), (new_r01*(x1299.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1300=IKsin(j4);
IkReal x1301=IKcos(j4);
IkReal x1302=((1.0)*gconst45);
IkReal x1303=((-1.0)*gconst45);
evalcond[0]=(new_r01*x1300);
evalcond[1]=(new_r00*x1301);
evalcond[2]=(x1300*x1303);
evalcond[3]=(x1301*x1303);
evalcond[4]=(gconst45+((new_r00*x1300)));
evalcond[5]=(new_r00+((gconst45*x1300)));
evalcond[6]=((((-1.0)*x1301*x1302))+new_r01);
evalcond[7]=((((-1.0)*x1302))+((new_r01*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1304.valid){
continue;
}
CheckValue<IkReal> x1305 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1304.value)))+(x1305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1306=IKsin(j4);
IkReal x1307=IKcos(j4);
IkReal x1308=((1.0)*gconst45);
IkReal x1309=((-1.0)*gconst45);
evalcond[0]=(new_r01*x1306);
evalcond[1]=(new_r00*x1307);
evalcond[2]=(x1306*x1309);
evalcond[3]=(x1307*x1309);
evalcond[4]=(gconst45+((new_r00*x1306)));
evalcond[5]=(new_r00+((gconst45*x1306)));
evalcond[6]=((((-1.0)*x1307*x1308))+new_r01);
evalcond[7]=((((-1.0)*x1308))+((new_r01*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
IkReal x1310=((-1.0)*(x1311.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1310;
new_r10=0;
IkReal gconst44=x1310;
IkReal x1312 = new_r00*new_r00;
if(IKabs(x1312)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1312,-0.5)));
IkReal gconst46=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
IkReal x1313=((-1.0)*(x1314.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1313;
new_r10=0;
IkReal gconst44=x1313;
IkReal x1315 = new_r00*new_r00;
if(IKabs(x1315)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1315,-0.5)));
IkReal gconst46=0;
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1317 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1317.valid){
continue;
}
IkReal x1316=((-1.0)*(x1317.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst45;
cj6=gconst46;
j6=x1316;
new_r10=0;
IkReal gconst44=x1316;
IkReal x1318 = new_r00*new_r00;
if(IKabs(x1318)==0){
continue;
}
IkReal gconst45=(new_r00*(pow(x1318,-0.5)));
IkReal gconst46=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(new_r00,-1);
if(!x1319.valid){
continue;
}
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(gconst45,-1);
if(!x1320.valid){
continue;
}
if( IKabs(((-1.0)*gconst45*(x1319.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1320.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst45*(x1319.value)))+IKsqr((new_r01*(x1320.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst45*(x1319.value)), (new_r01*(x1320.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1321=IKcos(j4);
IkReal x1322=IKsin(j4);
IkReal x1323=((1.0)*gconst45);
evalcond[0]=(new_r00*x1321);
evalcond[1]=((-1.0)*gconst45*x1321);
evalcond[2]=(((new_r00*x1322))+gconst45);
evalcond[3]=(new_r00+((gconst45*x1322)));
evalcond[4]=((((-1.0)*x1321*x1323))+new_r01);
evalcond[5]=((((-1.0)*x1322*x1323))+new_r11);
evalcond[6]=(((new_r01*x1322))+(((-1.0)*new_r11*x1321)));
evalcond[7]=(((new_r01*x1321))+(((-1.0)*x1323))+((new_r11*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1324.value)))+(x1325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1326=IKcos(j4);
IkReal x1327=IKsin(j4);
IkReal x1328=((1.0)*gconst45);
evalcond[0]=(new_r00*x1326);
evalcond[1]=((-1.0)*gconst45*x1326);
evalcond[2]=(((new_r00*x1327))+gconst45);
evalcond[3]=(new_r00+((gconst45*x1327)));
evalcond[4]=((((-1.0)*x1326*x1328))+new_r01);
evalcond[5]=((((-1.0)*x1327*x1328))+new_r11);
evalcond[6]=(((new_r01*x1327))+(((-1.0)*new_r11*x1326)));
evalcond[7]=(((new_r01*x1326))+(((-1.0)*x1328))+((new_r11*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1329.valid){
continue;
}
CheckValue<IkReal> x1330 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1329.value)))+(x1330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1331=IKcos(j4);
IkReal x1332=IKsin(j4);
IkReal x1333=((1.0)*gconst45);
evalcond[0]=(new_r00*x1331);
evalcond[1]=((-1.0)*gconst45*x1331);
evalcond[2]=(gconst45+((new_r00*x1332)));
evalcond[3]=(((gconst45*x1332))+new_r00);
evalcond[4]=((((-1.0)*x1331*x1333))+new_r01);
evalcond[5]=((((-1.0)*x1332*x1333))+new_r11);
evalcond[6]=(((new_r01*x1332))+(((-1.0)*new_r11*x1331)));
evalcond[7]=(((new_r11*x1332))+((new_r01*x1331))+(((-1.0)*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1334=((1.0)*gconst46);
CheckValue<IkReal> x1335 = IKatan2WithCheck(IkReal(((gconst46*gconst46)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst45*x1334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1335.valid){
continue;
}
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1334))+((gconst45*new_r00)))),-1);
if(!x1336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1335.value)+(((1.5707963267949)*(x1336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1337=IKsin(j4);
IkReal x1338=IKcos(j4);
IkReal x1339=((1.0)*gconst45);
IkReal x1340=(gconst46*x1337);
IkReal x1341=(gconst46*x1338);
IkReal x1342=((1.0)*x1338);
IkReal x1343=(x1338*x1339);
evalcond[0]=(((new_r10*x1337))+gconst46+((new_r00*x1338)));
evalcond[1]=(x1341+((gconst45*x1337))+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1342))+gconst45+((new_r00*x1337)));
evalcond[3]=(((new_r01*x1337))+(((-1.0)*new_r11*x1342))+gconst46);
evalcond[4]=(x1340+(((-1.0)*x1343))+new_r01);
evalcond[5]=(x1340+(((-1.0)*x1343))+new_r10);
evalcond[6]=(((new_r11*x1337))+((new_r01*x1338))+(((-1.0)*x1339)));
evalcond[7]=((((-1.0)*x1337*x1339))+new_r11+(((-1.0)*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1344=((1.0)*gconst46);
CheckValue<IkReal> x1345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst45*new_r11))+(((-1.0)*new_r01*x1344)))),-1);
if(!x1345.valid){
continue;
}
CheckValue<IkReal> x1346 = IKatan2WithCheck(IkReal(((gconst46*gconst46)+((new_r00*new_r11)))),IkReal(((((-1.0)*gconst45*x1344))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1345.value)))+(x1346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1347=IKsin(j4);
IkReal x1348=IKcos(j4);
IkReal x1349=((1.0)*gconst45);
IkReal x1350=(gconst46*x1347);
IkReal x1351=(gconst46*x1348);
IkReal x1352=((1.0)*x1348);
IkReal x1353=(x1348*x1349);
evalcond[0]=(gconst46+((new_r00*x1348))+((new_r10*x1347)));
evalcond[1]=(x1351+new_r00+((gconst45*x1347)));
evalcond[2]=(gconst45+(((-1.0)*new_r10*x1352))+((new_r00*x1347)));
evalcond[3]=(gconst46+(((-1.0)*new_r11*x1352))+((new_r01*x1347)));
evalcond[4]=(x1350+(((-1.0)*x1353))+new_r01);
evalcond[5]=(x1350+(((-1.0)*x1353))+new_r10);
evalcond[6]=((((-1.0)*x1349))+((new_r01*x1348))+((new_r11*x1347)));
evalcond[7]=((((-1.0)*x1351))+(((-1.0)*x1347*x1349))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1354=((1.0)*new_r10);
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1354))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1355.valid){
continue;
}
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal((((gconst46*new_r11))+((gconst46*new_r00)))),IkReal((((gconst46*new_r01))+(((-1.0)*gconst46*x1354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1355.value)))+(x1356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1357=IKsin(j4);
IkReal x1358=IKcos(j4);
IkReal x1359=((1.0)*gconst45);
IkReal x1360=(gconst46*x1357);
IkReal x1361=(gconst46*x1358);
IkReal x1362=((1.0)*x1358);
IkReal x1363=(x1358*x1359);
evalcond[0]=(((new_r10*x1357))+gconst46+((new_r00*x1358)));
evalcond[1]=(x1361+((gconst45*x1357))+new_r00);
evalcond[2]=(gconst45+(((-1.0)*new_r10*x1362))+((new_r00*x1357)));
evalcond[3]=(gconst46+(((-1.0)*new_r11*x1362))+((new_r01*x1357)));
evalcond[4]=(x1360+new_r01+(((-1.0)*x1363)));
evalcond[5]=(x1360+new_r10+(((-1.0)*x1363)));
evalcond[6]=((((-1.0)*x1359))+((new_r11*x1357))+((new_r01*x1358)));
evalcond[7]=((((-1.0)*x1361))+new_r11+(((-1.0)*x1357*x1359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1364=((-1.0)*new_r00);
IkReal x1366 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1366)==0){
continue;
}
IkReal x1365=pow(x1366,-0.5);
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal(x1364),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1367.value))));
IkReal gconst48=(x1364*x1365);
IkReal gconst49=((1.0)*new_r10*x1365);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1368.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1369=((-1.0)*new_r00);
CheckValue<IkReal> x1372 = IKatan2WithCheck(IkReal(x1369),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1372.valid){
continue;
}
IkReal x1370=((1.0)*(x1372.value));
IkReal x1371=x1365;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1370)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1370)));
IkReal gconst48=(x1369*x1371);
IkReal gconst49=((1.0)*new_r10*x1371);
IkReal x1373=new_r10*new_r10;
IkReal x1374=(new_r10*new_r11);
IkReal x1375=((((-1.0)*x1374))+(((-1.0)*new_r00*new_r01)));
IkReal x1376=x1365;
IkReal x1377=(new_r10*x1376);
j4eval[0]=x1375;
j4eval[1]=((IKabs((((x1374*x1376))+((new_r00*x1377)))))+(IKabs(((((-1.0)*x1373*x1376))+((new_r01*x1377))))));
j4eval[2]=IKsign(x1375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1378=((-1.0)*new_r00);
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal(x1378),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
IkReal x1379=((1.0)*(x1381.value));
IkReal x1380=x1365;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1379)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1379)));
IkReal gconst48=(x1378*x1380);
IkReal gconst49=((1.0)*new_r10*x1380);
IkReal x1382=new_r10*new_r10;
IkReal x1383=new_r00*new_r00*new_r00;
CheckValue<IkReal> x1387=IKPowWithIntegerCheck((x1382+(new_r00*new_r00)),-1);
if(!x1387.valid){
continue;
}
IkReal x1384=x1387.value;
IkReal x1385=(x1382*x1384);
IkReal x1386=(x1383*x1384);
j4eval[0]=((IKabs((x1385+((new_r11*x1386))+((new_r00*new_r11*x1385)))))+(IKabs((((new_r00*new_r01*x1385))+((new_r01*x1386))+((new_r00*new_r10*x1384))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1388=((-1.0)*new_r00);
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal(x1388),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
IkReal x1389=((1.0)*(x1391.value));
IkReal x1390=x1365;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1389)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1389)));
IkReal gconst48=(x1388*x1390);
IkReal gconst49=((1.0)*new_r10*x1390);
IkReal x1392=new_r10*new_r10;
IkReal x1393=new_r00*new_r00;
CheckValue<IkReal> x1397=IKPowWithIntegerCheck((x1393+x1392),-1);
if(!x1397.valid){
continue;
}
IkReal x1394=x1397.value;
IkReal x1395=(new_r10*x1394);
IkReal x1396=(x1392*x1394);
j4eval[0]=((IKabs((x1396+(((-1.0)*x1393*x1396))+(((-1.0)*x1394*(x1393*x1393))))))+(IKabs((((x1395*(new_r00*new_r00*new_r00)))+((new_r00*x1395*(new_r10*new_r10)))+((new_r00*x1395))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
IkReal x1398=((1.0)*(x1399.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1398)));
new_r11=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1398)));
IkReal gconst48=0;
IkReal x1400 = new_r10*new_r10;
if(IKabs(x1400)==0){
continue;
}
IkReal gconst49=((1.0)*new_r10*(pow(x1400,-0.5)));
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(gconst49,-1);
if(!x1401.valid){
continue;
}
sj4array[0]=((-1.0)*new_r01*(x1401.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1402=IKcos(j4);
IkReal x1403=IKsin(j4);
evalcond[0]=(new_r01*x1402);
evalcond[1]=(gconst49*x1402);
evalcond[2]=((-1.0)*new_r10*x1402);
evalcond[3]=(((new_r01*x1403))+gconst49);
evalcond[4]=(gconst49+((new_r10*x1403)));
evalcond[5]=(((gconst49*x1403))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(new_r01,-1);
if(!x1404.valid){
continue;
}
sj4array[0]=((-1.0)*gconst49*(x1404.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKcos(j4);
IkReal x1406=IKsin(j4);
IkReal x1407=(gconst49*x1406);
evalcond[0]=(new_r01*x1405);
evalcond[1]=(gconst49*x1405);
evalcond[2]=((-1.0)*new_r10*x1405);
evalcond[3]=(x1407+new_r01);
evalcond[4]=(gconst49+((new_r10*x1406)));
evalcond[5]=(x1407+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst49;
evalcond[2]=gconst48;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1408=((-1.0)*new_r00);
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal(x1408),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
IkReal x1409=((1.0)*(x1410.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1409)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1409)));
IkReal gconst48=x1408;
IkReal gconst49=((1.0)*new_r10);
j4eval[0]=1.0;
j4eval[1]=1.0;
j4eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1411=((-1.0)*new_r00);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(x1411),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
IkReal x1412=((1.0)*(x1413.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1412)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1412)));
IkReal gconst48=x1411;
IkReal gconst49=((1.0)*new_r10);
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs(((1.0)*new_r00*new_r10)))+(IKabs(((-1.0)+(new_r10*new_r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1414=((-1.0)*new_r00);
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal(x1414),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
IkReal x1415=((1.0)*(x1416.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1415)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1415)));
IkReal gconst48=x1414;
IkReal gconst49=((1.0)*new_r10);
j4eval[0]=-1.0;
j4eval[1]=((IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j4eval[2]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1417=((1.0)*gconst49);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1417))+((gconst48*new_r00)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal(((gconst49*gconst49)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst48*x1417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKcos(j4);
IkReal x1421=IKsin(j4);
IkReal x1422=(gconst49*x1421);
IkReal x1423=(gconst49*x1420);
IkReal x1424=(gconst48*x1421);
IkReal x1425=((1.0)*x1420);
IkReal x1426=(gconst48*x1425);
evalcond[0]=(x1422+(((-1.0)*x1426)));
evalcond[1]=(gconst49+((new_r00*x1420))+((new_r10*x1421)));
evalcond[2]=(x1423+x1424+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1425))+gconst48+((new_r00*x1421)));
evalcond[4]=((((-1.0)*x1424))+(((-1.0)*x1423)));
evalcond[5]=(x1422+new_r10+(((-1.0)*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1427=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst49*gconst49)))+(((-1.0)*(gconst48*gconst48))))),-1);
if(!x1427.valid){
continue;
}
CheckValue<IkReal> x1428 = IKatan2WithCheck(IkReal((gconst48*new_r00)),IkReal((gconst49*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1427.value)))+(x1428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1429=IKcos(j4);
IkReal x1430=IKsin(j4);
IkReal x1431=(gconst49*x1430);
IkReal x1432=(gconst49*x1429);
IkReal x1433=(gconst48*x1430);
IkReal x1434=((1.0)*x1429);
IkReal x1435=(gconst48*x1434);
evalcond[0]=((((-1.0)*x1435))+x1431);
evalcond[1]=(gconst49+((new_r10*x1430))+((new_r00*x1429)));
evalcond[2]=(x1432+x1433+new_r00);
evalcond[3]=(((new_r00*x1430))+gconst48+(((-1.0)*new_r10*x1434)));
evalcond[4]=((((-1.0)*x1432))+(((-1.0)*x1433)));
evalcond[5]=((((-1.0)*x1435))+x1431+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r00))+((gconst49*new_r10)))),-1);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(gconst48*gconst48),IkReal((gconst48*gconst49)),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1436.value)))+(x1437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKcos(j4);
IkReal x1439=IKsin(j4);
IkReal x1440=(gconst49*x1439);
IkReal x1441=(gconst49*x1438);
IkReal x1442=(gconst48*x1439);
IkReal x1443=((1.0)*x1438);
IkReal x1444=(gconst48*x1443);
evalcond[0]=(x1440+(((-1.0)*x1444)));
evalcond[1]=(((new_r00*x1438))+gconst49+((new_r10*x1439)));
evalcond[2]=(x1442+x1441+new_r00);
evalcond[3]=(((new_r00*x1439))+gconst48+(((-1.0)*new_r10*x1443)));
evalcond[4]=((((-1.0)*x1442))+(((-1.0)*x1441)));
evalcond[5]=(x1440+(((-1.0)*x1444))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1445=IKPowWithIntegerCheck(gconst48,-1);
if(!x1445.valid){
continue;
}
sj4array[0]=(new_r11*(x1445.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1446=IKcos(j4);
IkReal x1447=IKsin(j4);
IkReal x1448=((-1.0)*x1446);
evalcond[0]=(new_r00*x1446);
evalcond[1]=(new_r11*x1448);
evalcond[2]=(gconst48*x1448);
evalcond[3]=(gconst48+((new_r00*x1447)));
evalcond[4]=(((gconst48*x1447))+new_r00);
evalcond[5]=((((-1.0)*gconst48))+((new_r11*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1449=((-1.0)*new_r00);
CheckValue<IkReal> x1451 = IKatan2WithCheck(IkReal(x1449),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1451.valid){
continue;
}
IkReal x1450=((1.0)*(x1451.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1450)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1450)));
IkReal x1452 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1452)==0){
continue;
}
IkReal gconst48=(x1449*(pow(x1452,-0.5)));
IkReal gconst49=0;
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1453=((-1.0)*new_r00);
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal(x1453),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
IkReal x1454=((1.0)*(x1455.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1454)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1454)));
IkReal x1456 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1456)==0){
continue;
}
IkReal gconst48=(x1453*(pow(x1456,-0.5)));
IkReal gconst49=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1457=((-1.0)*new_r00);
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal(x1457),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
IkReal x1458=((1.0)*(x1459.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1458)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1458)));
IkReal x1460 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1460)==0){
continue;
}
IkReal gconst48=(x1457*(pow(x1460,-0.5)));
IkReal gconst49=0;
j4eval[0]=new_r00;
j4eval[1]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(new_r00,-1);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(new_r01,-1);
if(!x1462.valid){
continue;
}
if( IKabs(((-1.0)*gconst48*(x1461.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst48*(x1462.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst48*(x1461.value)))+IKsqr((gconst48*(x1462.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst48*(x1461.value)), (gconst48*(x1462.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1463=IKsin(j4);
IkReal x1464=IKcos(j4);
IkReal x1465=((1.0)*gconst48);
IkReal x1466=((-1.0)*gconst48);
evalcond[0]=(new_r01*x1463);
evalcond[1]=(new_r00*x1464);
evalcond[2]=(x1463*x1466);
evalcond[3]=(x1464*x1466);
evalcond[4]=(((new_r00*x1463))+gconst48);
evalcond[5]=(((gconst48*x1463))+new_r00);
evalcond[6]=((((-1.0)*x1464*x1465))+new_r01);
evalcond[7]=(((new_r01*x1464))+(((-1.0)*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(new_r00,-1);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(gconst48,-1);
if(!x1468.valid){
continue;
}
if( IKabs(((-1.0)*gconst48*(x1467.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1468.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst48*(x1467.value)))+IKsqr((new_r01*(x1468.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst48*(x1467.value)), (new_r01*(x1468.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1469=IKsin(j4);
IkReal x1470=IKcos(j4);
IkReal x1471=((1.0)*gconst48);
IkReal x1472=((-1.0)*gconst48);
evalcond[0]=(new_r01*x1469);
evalcond[1]=(new_r00*x1470);
evalcond[2]=(x1469*x1472);
evalcond[3]=(x1470*x1472);
evalcond[4]=(((new_r00*x1469))+gconst48);
evalcond[5]=(((gconst48*x1469))+new_r00);
evalcond[6]=((((-1.0)*x1470*x1471))+new_r01);
evalcond[7]=(((new_r01*x1470))+(((-1.0)*x1471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1473 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1473.valid){
continue;
}
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1473.value)+(((1.5707963267949)*(x1474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1475=IKsin(j4);
IkReal x1476=IKcos(j4);
IkReal x1477=((1.0)*gconst48);
IkReal x1478=((-1.0)*gconst48);
evalcond[0]=(new_r01*x1475);
evalcond[1]=(new_r00*x1476);
evalcond[2]=(x1475*x1478);
evalcond[3]=(x1476*x1478);
evalcond[4]=(gconst48+((new_r00*x1475)));
evalcond[5]=(((gconst48*x1475))+new_r00);
evalcond[6]=((((-1.0)*x1476*x1477))+new_r01);
evalcond[7]=(((new_r01*x1476))+(((-1.0)*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1479=((-1.0)*new_r00);
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(x1479),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
IkReal x1480=((1.0)*(x1481.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1480)));
new_r10=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1480)));
IkReal x1482 = new_r00*new_r00;
if(IKabs(x1482)==0){
continue;
}
IkReal gconst48=(x1479*(pow(x1482,-0.5)));
IkReal gconst49=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1483=((-1.0)*new_r00);
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal(x1483),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
IkReal x1484=((1.0)*(x1485.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1484)));
new_r10=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1484)));
IkReal x1486 = new_r00*new_r00;
if(IKabs(x1486)==0){
continue;
}
IkReal gconst48=(x1483*(pow(x1486,-0.5)));
IkReal gconst49=0;
j4eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1487=((-1.0)*new_r00);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(x1487),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
IkReal x1488=((1.0)*(x1489.value));
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=gconst48;
cj6=gconst49;
j6=((3.14159265)+(((-1.0)*x1488)));
new_r10=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1488)));
IkReal x1490 = new_r00*new_r00;
if(IKabs(x1490)==0){
continue;
}
IkReal gconst48=(x1487*(pow(x1490,-0.5)));
IkReal gconst49=0;
j4eval[0]=new_r00;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(new_r00,-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(gconst48,-1);
if(!x1492.valid){
continue;
}
if( IKabs(((-1.0)*gconst48*(x1491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1492.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst48*(x1491.value)))+IKsqr((new_r01*(x1492.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*gconst48*(x1491.value)), (new_r01*(x1492.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1493=IKcos(j4);
IkReal x1494=IKsin(j4);
IkReal x1495=((1.0)*gconst48);
evalcond[0]=(new_r00*x1493);
evalcond[1]=((-1.0)*gconst48*x1493);
evalcond[2]=(gconst48+((new_r00*x1494)));
evalcond[3]=(((gconst48*x1494))+new_r00);
evalcond[4]=((((-1.0)*x1493*x1495))+new_r01);
evalcond[5]=((((-1.0)*x1494*x1495))+new_r11);
evalcond[6]=(((new_r01*x1494))+(((-1.0)*new_r11*x1493)));
evalcond[7]=((((-1.0)*x1495))+((new_r01*x1493))+((new_r11*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1496.value)+(((1.5707963267949)*(x1497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1498=IKcos(j4);
IkReal x1499=IKsin(j4);
IkReal x1500=((1.0)*gconst48);
evalcond[0]=(new_r00*x1498);
evalcond[1]=((-1.0)*gconst48*x1498);
evalcond[2]=(gconst48+((new_r00*x1499)));
evalcond[3]=(((gconst48*x1499))+new_r00);
evalcond[4]=((((-1.0)*x1498*x1500))+new_r01);
evalcond[5]=((((-1.0)*x1499*x1500))+new_r11);
evalcond[6]=(((new_r01*x1499))+(((-1.0)*new_r11*x1498)));
evalcond[7]=((((-1.0)*x1500))+((new_r01*x1498))+((new_r11*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1501.value)))+(x1502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1503=IKcos(j4);
IkReal x1504=IKsin(j4);
IkReal x1505=((1.0)*gconst48);
evalcond[0]=(new_r00*x1503);
evalcond[1]=((-1.0)*gconst48*x1503);
evalcond[2]=(gconst48+((new_r00*x1504)));
evalcond[3]=(new_r00+((gconst48*x1504)));
evalcond[4]=((((-1.0)*x1503*x1505))+new_r01);
evalcond[5]=((((-1.0)*x1504*x1505))+new_r11);
evalcond[6]=(((new_r01*x1504))+(((-1.0)*new_r11*x1503)));
evalcond[7]=((((-1.0)*x1505))+((new_r01*x1503))+((new_r11*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1506=((1.0)*gconst49);
CheckValue<IkReal> x1507=IKPowWithIntegerCheck(IKsign((((gconst48*new_r00))+(((-1.0)*new_r10*x1506)))),-1);
if(!x1507.valid){
continue;
}
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal(((gconst49*gconst49)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst48*x1506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1507.value)))+(x1508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1509=IKcos(j4);
IkReal x1510=IKsin(j4);
IkReal x1511=((1.0)*gconst48);
IkReal x1512=(gconst49*x1510);
IkReal x1513=(gconst49*x1509);
IkReal x1514=((1.0)*x1509);
IkReal x1515=(x1509*x1511);
evalcond[0]=(((new_r10*x1510))+gconst49+((new_r00*x1509)));
evalcond[1]=(x1513+new_r00+((gconst48*x1510)));
evalcond[2]=((((-1.0)*new_r10*x1514))+gconst48+((new_r00*x1510)));
evalcond[3]=((((-1.0)*new_r11*x1514))+gconst49+((new_r01*x1510)));
evalcond[4]=((((-1.0)*x1515))+x1512+new_r01);
evalcond[5]=((((-1.0)*x1515))+x1512+new_r10);
evalcond[6]=((((-1.0)*x1511))+((new_r01*x1509))+((new_r11*x1510)));
evalcond[7]=((((-1.0)*x1513))+(((-1.0)*x1510*x1511))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1516=((1.0)*gconst49);
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal(((gconst49*gconst49)+((new_r00*new_r11)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst48*x1516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r11))+(((-1.0)*new_r01*x1516)))),-1);
if(!x1518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1517.value)+(((1.5707963267949)*(x1518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1519=IKcos(j4);
IkReal x1520=IKsin(j4);
IkReal x1521=((1.0)*gconst48);
IkReal x1522=(gconst49*x1520);
IkReal x1523=(gconst49*x1519);
IkReal x1524=((1.0)*x1519);
IkReal x1525=(x1519*x1521);
evalcond[0]=(gconst49+((new_r00*x1519))+((new_r10*x1520)));
evalcond[1]=(x1523+new_r00+((gconst48*x1520)));
evalcond[2]=(gconst48+((new_r00*x1520))+(((-1.0)*new_r10*x1524)));
evalcond[3]=((((-1.0)*new_r11*x1524))+gconst49+((new_r01*x1520)));
evalcond[4]=((((-1.0)*x1525))+x1522+new_r01);
evalcond[5]=((((-1.0)*x1525))+x1522+new_r10);
evalcond[6]=((((-1.0)*x1521))+((new_r01*x1519))+((new_r11*x1520)));
evalcond[7]=(new_r11+(((-1.0)*x1520*x1521))+(((-1.0)*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=((1.0)*new_r10);
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1526))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal((((gconst49*new_r00))+((gconst49*new_r11)))),IkReal(((((-1.0)*gconst49*x1526))+((gconst49*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1529=IKcos(j4);
IkReal x1530=IKsin(j4);
IkReal x1531=((1.0)*gconst48);
IkReal x1532=(gconst49*x1530);
IkReal x1533=(gconst49*x1529);
IkReal x1534=((1.0)*x1529);
IkReal x1535=(x1529*x1531);
evalcond[0]=(gconst49+((new_r00*x1529))+((new_r10*x1530)));
evalcond[1]=(x1533+new_r00+((gconst48*x1530)));
evalcond[2]=((((-1.0)*new_r10*x1534))+gconst48+((new_r00*x1530)));
evalcond[3]=(gconst49+((new_r01*x1530))+(((-1.0)*new_r11*x1534)));
evalcond[4]=((((-1.0)*x1535))+x1532+new_r01);
evalcond[5]=((((-1.0)*x1535))+x1532+new_r10);
evalcond[6]=((((-1.0)*x1531))+((new_r01*x1529))+((new_r11*x1530)));
evalcond[7]=((((-1.0)*x1533))+(((-1.0)*x1530*x1531))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1536=IKsin(j4);
IkReal x1537=IKcos(j4);
IkReal x1538=((1.0)*x1537);
evalcond[0]=(x1536+new_r00);
evalcond[1]=((((-1.0)*x1538))+new_r01);
evalcond[2]=((((-1.0)*x1536))+new_r11);
evalcond[3]=((((-1.0)*x1538))+new_r10);
evalcond[4]=(((new_r00*x1537))+((new_r10*x1536)));
evalcond[5]=(((new_r01*x1536))+(((-1.0)*new_r11*x1538)));
evalcond[6]=((-1.0)+((new_r01*x1537))+((new_r11*x1536)));
evalcond[7]=((1.0)+(((-1.0)*new_r10*x1538))+((new_r00*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1539=IKcos(j4);
IkReal x1540=IKsin(j4);
IkReal x1541=((1.0)*x1539);
evalcond[0]=(x1539+new_r01);
evalcond[1]=(x1540+new_r11);
evalcond[2]=(x1539+new_r10);
evalcond[3]=((((-1.0)*x1540))+new_r00);
evalcond[4]=(((new_r10*x1540))+((new_r00*x1539)));
evalcond[5]=((((-1.0)*new_r11*x1541))+((new_r01*x1540)));
evalcond[6]=((1.0)+((new_r11*x1540))+((new_r01*x1539)));
evalcond[7]=((-1.0)+((new_r00*x1540))+(((-1.0)*new_r10*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r11=0;
new_r00=0;
j4eval[0]=new_r10;
j4eval[1]=((IKabs(cj6))+(IKabs(sj6)));
j4eval[2]=IKsign(new_r10);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r11=0;
new_r00=0;
j4eval[0]=new_r01;
j4eval[1]=((IKabs(cj6))+(IKabs(sj6)));
j4eval[2]=IKsign(new_r01);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r11=0;
new_r00=0;
j4eval[0]=new_r01;
j4eval[1]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(new_r01,-1);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543=IKPowWithIntegerCheck(new_r10,-1);
if(!x1543.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x1542.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj6*(x1543.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x1542.value)))+IKsqr((sj6*(x1543.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj6*(x1542.value)), (sj6*(x1543.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x1544=IKsin(j4);
IkReal x1545=IKcos(j4);
IkReal x1546=((1.0)*sj6);
IkReal x1547=(cj6*x1544);
IkReal x1548=(x1545*x1546);
evalcond[0]=(((new_r01*x1544))+cj6);
evalcond[1]=(cj6+((new_r10*x1544)));
evalcond[2]=(sj6+(((-1.0)*new_r10*x1545)));
evalcond[3]=(((new_r01*x1545))+(((-1.0)*x1546)));
evalcond[4]=(((cj6*x1545))+((sj6*x1544)));
evalcond[5]=(x1547+new_r01+(((-1.0)*x1548)));
evalcond[6]=(x1547+new_r10+(((-1.0)*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal(((-1.0)*cj6)),IkReal(sj6),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=((1.0)*sj6);
IkReal x1554=(cj6*x1551);
IkReal x1555=(x1552*x1553);
evalcond[0]=(((new_r01*x1551))+cj6);
evalcond[1]=(cj6+((new_r10*x1551)));
evalcond[2]=(sj6+(((-1.0)*new_r10*x1552)));
evalcond[3]=(((new_r01*x1552))+(((-1.0)*x1553)));
evalcond[4]=(((cj6*x1552))+((sj6*x1551)));
evalcond[5]=(x1554+(((-1.0)*x1555))+new_r01);
evalcond[6]=(x1554+(((-1.0)*x1555))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal(((-1.0)*cj6)),IkReal(sj6),IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1556.value)))+(x1557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x1558=IKsin(j4);
IkReal x1559=IKcos(j4);
IkReal x1560=((1.0)*sj6);
IkReal x1561=(cj6*x1558);
IkReal x1562=(x1559*x1560);
evalcond[0]=(((new_r01*x1558))+cj6);
evalcond[1]=(cj6+((new_r10*x1558)));
evalcond[2]=(sj6+(((-1.0)*new_r10*x1559)));
evalcond[3]=(((new_r01*x1559))+(((-1.0)*x1560)));
evalcond[4]=(((cj6*x1559))+((sj6*x1558)));
evalcond[5]=(x1561+new_r01+(((-1.0)*x1562)));
evalcond[6]=(x1561+new_r10+(((-1.0)*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1564 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1564.valid){
continue;
}
IkReal x1563=x1564.value;
j4array[0]=((-1.0)*x1563);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1563)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j4))))+((new_r00*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1566 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1566.valid){
continue;
}
IkReal x1565=x1566.value;
j4array[0]=((-1.0)*x1565);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1565)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j4))))+((new_r01*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r01=0;
new_r10=0;
j4eval[0]=new_r00;
j4eval[1]=((IKabs(cj6))+(IKabs(sj6)));
j4eval[2]=IKsign(new_r00);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r01=0;
new_r10=0;
j4eval[0]=new_r00;
j4eval[1]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1567=IKPowWithIntegerCheck(new_r00,-1);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(new_r11,-1);
if(!x1568.valid){
continue;
}
if( IKabs(((-1.0)*sj6*(x1567.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj6*(x1568.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj6*(x1567.value)))+IKsqr((cj6*(x1568.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj6*(x1567.value)), (cj6*(x1568.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x1569=IKcos(j4);
IkReal x1570=IKsin(j4);
IkReal x1571=((1.0)*x1569);
IkReal x1572=(sj6*x1570);
evalcond[0]=(((new_r00*x1570))+sj6);
evalcond[1]=(((new_r00*x1569))+cj6);
evalcond[2]=((((-1.0)*new_r11*x1571))+cj6);
evalcond[3]=((((-1.0)*sj6))+((new_r11*x1570)));
evalcond[4]=(((cj6*x1570))+(((-1.0)*sj6*x1571)));
evalcond[5]=(((cj6*x1569))+x1572+new_r00);
evalcond[6]=((((-1.0)*cj6*x1571))+new_r11+(((-1.0)*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1573.valid){
continue;
}
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((-1.0)*sj6)),IkReal(((-1.0)*cj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1573.value)))+(x1574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x1575=IKcos(j4);
IkReal x1576=IKsin(j4);
IkReal x1577=((1.0)*x1575);
IkReal x1578=(sj6*x1576);
evalcond[0]=(((new_r00*x1576))+sj6);
evalcond[1]=(((new_r00*x1575))+cj6);
evalcond[2]=((((-1.0)*new_r11*x1577))+cj6);
evalcond[3]=((((-1.0)*sj6))+((new_r11*x1576)));
evalcond[4]=(((cj6*x1576))+(((-1.0)*sj6*x1577)));
evalcond[5]=(((cj6*x1575))+x1578+new_r00);
evalcond[6]=((((-1.0)*cj6*x1577))+new_r11+(((-1.0)*x1578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1579=((1.0)*new_r00);
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal(((((-1.0)*(cj6*cj6)))+(new_r00*new_r00))),IkReal((((cj6*sj6))+(((-1.0)*new_r10*x1579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x1579))+((cj6*new_r10)))),-1);
if(!x1581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1580.value)+(((1.5707963267949)*(x1581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1582=IKsin(j4);
IkReal x1583=IKcos(j4);
IkReal x1584=((1.0)*sj6);
IkReal x1585=(cj6*x1582);
IkReal x1586=((1.0)*x1583);
IkReal x1587=(x1583*x1584);
evalcond[0]=(((new_r10*x1582))+cj6+((new_r00*x1583)));
evalcond[1]=(((cj6*x1583))+new_r00+((sj6*x1582)));
evalcond[2]=(sj6+((new_r00*x1582))+(((-1.0)*new_r10*x1586)));
evalcond[3]=(cj6+((new_r01*x1582))+(((-1.0)*new_r11*x1586)));
evalcond[4]=((((-1.0)*x1587))+x1585+new_r01);
evalcond[5]=((((-1.0)*x1587))+x1585+new_r10);
evalcond[6]=((((-1.0)*x1584))+((new_r11*x1582))+((new_r01*x1583)));
evalcond[7]=(new_r11+(((-1.0)*cj6*x1586))+(((-1.0)*x1582*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1588=((1.0)*new_r10);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal((((cj6*sj6))+((new_r00*new_r01)))),IkReal(((((-1.0)*new_r01*x1588))+(cj6*cj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x1588))+(((-1.0)*cj6*new_r00)))),-1);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1591=IKsin(j4);
IkReal x1592=IKcos(j4);
IkReal x1593=((1.0)*sj6);
IkReal x1594=(cj6*x1591);
IkReal x1595=((1.0)*x1592);
IkReal x1596=(x1592*x1593);
evalcond[0]=(((new_r10*x1591))+cj6+((new_r00*x1592)));
evalcond[1]=(((cj6*x1592))+new_r00+((sj6*x1591)));
evalcond[2]=(sj6+((new_r00*x1591))+(((-1.0)*new_r10*x1595)));
evalcond[3]=(((new_r01*x1591))+cj6+(((-1.0)*new_r11*x1595)));
evalcond[4]=((((-1.0)*x1596))+x1594+new_r01);
evalcond[5]=((((-1.0)*x1596))+x1594+new_r10);
evalcond[6]=((((-1.0)*x1593))+((new_r01*x1592))+((new_r11*x1591)));
evalcond[7]=((((-1.0)*x1591*x1593))+new_r11+(((-1.0)*cj6*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=((1.0)*new_r10);
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1597))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((((cj6*new_r11))+((cj6*new_r00)))),IkReal((((cj6*new_r01))+(((-1.0)*cj6*x1597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1598.value)))+(x1599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1600=IKsin(j4);
IkReal x1601=IKcos(j4);
IkReal x1602=((1.0)*sj6);
IkReal x1603=(cj6*x1600);
IkReal x1604=((1.0)*x1601);
IkReal x1605=(x1601*x1602);
evalcond[0]=(cj6+((new_r10*x1600))+((new_r00*x1601)));
evalcond[1]=(((sj6*x1600))+((cj6*x1601))+new_r00);
evalcond[2]=(sj6+(((-1.0)*new_r10*x1604))+((new_r00*x1600)));
evalcond[3]=(cj6+(((-1.0)*new_r11*x1604))+((new_r01*x1600)));
evalcond[4]=((((-1.0)*x1605))+x1603+new_r01);
evalcond[5]=((((-1.0)*x1605))+x1603+new_r10);
evalcond[6]=((((-1.0)*x1602))+((new_r11*x1600))+((new_r01*x1601)));
evalcond[7]=((((-1.0)*x1600*x1602))+new_r11+(((-1.0)*cj6*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
IkReal x1606=x1607.value;
j4array[0]=((-1.0)*x1606);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1606)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1608=IKcos(j4);
IkReal x1609=IKsin(j4);
IkReal x1610=(new_r00*x1608);
IkReal x1611=((1.0)*x1608);
IkReal x1612=(new_r10*x1609);
evalcond[0]=(((new_r11*x1609))+((new_r01*x1608)));
evalcond[1]=(x1612+x1610);
evalcond[2]=((((-1.0)*new_r10*x1611))+((new_r00*x1609)));
evalcond[3]=((((-1.0)*new_r11*x1611))+((new_r01*x1609)));
evalcond[4]=(((new_r22*x1610))+((new_r22*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
IkReal x1613=x1614.value;
j4array[0]=((-1.0)*x1613);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1613)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(new_r11*x1615);
IkReal x1618=(new_r01*x1616);
IkReal x1619=((1.0)*x1616);
evalcond[0]=(x1618+x1617);
evalcond[1]=((((-1.0)*new_r10*x1619))+((new_r00*x1615)));
evalcond[2]=((((-1.0)*new_r11*x1619))+((new_r01*x1615)));
evalcond[3]=(((new_r22*x1618))+((new_r22*x1617)));
evalcond[4]=(((new_r00*new_r22*x1616))+((new_r10*new_r22*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
IkReal x1620=x1621.value;
j4array[0]=((-1.0)*x1620);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1620)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1622=IKsin(j4);
IkReal x1623=IKcos(j4);
IkReal x1624=(new_r22*x1622);
IkReal x1625=(new_r00*x1623);
IkReal x1626=((1.0)*x1623);
evalcond[0]=(((new_r10*x1622))+x1625);
evalcond[1]=((((-1.0)*new_r10*x1626))+((new_r00*x1622)));
evalcond[2]=((((-1.0)*new_r11*x1626))+((new_r01*x1622)));
evalcond[3]=(((new_r11*x1624))+((new_r01*new_r22*x1623)));
evalcond[4]=(((new_r22*x1625))+((new_r10*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1628=IKPowWithIntegerCheck(sj5,-1);
if(!x1628.valid){
continue;
}
IkReal x1627=x1628.value;
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(new_r12,-1);
if(!x1629.valid){
continue;
}
if( IKabs((x1627*(x1629.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1627)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1627*(x1629.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))))+IKsqr(((-1.0)*new_r02*x1627))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1627*(x1629.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))), ((-1.0)*new_r02*x1627));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x1630=IKcos(j4);
IkReal x1631=IKsin(j4);
IkReal x1632=((1.0)*cj6);
IkReal x1633=((1.0)*new_r10);
IkReal x1634=((1.0)*new_r02);
IkReal x1635=((1.0)*sj5);
IkReal x1636=(sj6*x1630);
IkReal x1637=(cj5*x1631);
IkReal x1638=(sj5*x1630);
IkReal x1639=(new_r11*x1631);
IkReal x1640=(cj5*x1630);
IkReal x1641=(new_r12*x1631);
IkReal x1642=(sj5*x1631);
evalcond[0]=(x1638+new_r02);
evalcond[1]=(x1642+new_r12);
evalcond[2]=((((-1.0)*x1631*x1634))+((new_r12*x1630)));
evalcond[3]=(sj5+x1641+((new_r02*x1630)));
evalcond[4]=(sj6+(((-1.0)*x1630*x1633))+((new_r00*x1631)));
evalcond[5]=(cj6+((new_r01*x1631))+(((-1.0)*new_r11*x1630)));
evalcond[6]=(((cj6*x1631))+new_r01+((cj5*x1636)));
evalcond[7]=(x1639+((cj5*sj6))+((new_r01*x1630)));
evalcond[8]=(((sj6*x1631))+new_r00+(((-1.0)*x1632*x1640)));
evalcond[9]=((((-1.0)*x1630*x1632))+((sj6*x1637))+new_r11);
evalcond[10]=(((new_r10*x1631))+((new_r00*x1630))+(((-1.0)*cj5*x1632)));
evalcond[11]=((((-1.0)*x1636))+(((-1.0)*x1632*x1637))+new_r10);
evalcond[12]=(((new_r22*sj5))+((new_r02*x1640))+((new_r12*x1637)));
evalcond[13]=(((new_r11*x1637))+sj6+((new_r01*x1640))+((new_r21*sj5)));
evalcond[14]=(((cj5*new_r20))+(((-1.0)*x1633*x1642))+(((-1.0)*new_r00*x1630*x1635)));
evalcond[15]=((((-1.0)*x1635*x1639))+(((-1.0)*new_r01*x1630*x1635))+((cj5*new_r21)));
evalcond[16]=((-1.0)+(((-1.0)*x1635*x1641))+(((-1.0)*x1634*x1638))+((cj5*new_r22)));
evalcond[17]=(((new_r20*sj5))+((new_r10*x1637))+(((-1.0)*x1632))+((new_r00*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1643.value)))+(x1644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x1645=IKcos(j4);
IkReal x1646=IKsin(j4);
IkReal x1647=((1.0)*cj6);
IkReal x1648=((1.0)*new_r10);
IkReal x1649=((1.0)*new_r02);
IkReal x1650=((1.0)*sj5);
IkReal x1651=(sj6*x1645);
IkReal x1652=(cj5*x1646);
IkReal x1653=(sj5*x1645);
IkReal x1654=(new_r11*x1646);
IkReal x1655=(cj5*x1645);
IkReal x1656=(new_r12*x1646);
IkReal x1657=(sj5*x1646);
evalcond[0]=(x1653+new_r02);
evalcond[1]=(x1657+new_r12);
evalcond[2]=(((new_r12*x1645))+(((-1.0)*x1646*x1649)));
evalcond[3]=(sj5+x1656+((new_r02*x1645)));
evalcond[4]=(sj6+(((-1.0)*x1645*x1648))+((new_r00*x1646)));
evalcond[5]=((((-1.0)*new_r11*x1645))+cj6+((new_r01*x1646)));
evalcond[6]=(((cj5*x1651))+((cj6*x1646))+new_r01);
evalcond[7]=(x1654+((cj5*sj6))+((new_r01*x1645)));
evalcond[8]=((((-1.0)*x1647*x1655))+new_r00+((sj6*x1646)));
evalcond[9]=((((-1.0)*x1645*x1647))+new_r11+((sj6*x1652)));
evalcond[10]=(((new_r10*x1646))+((new_r00*x1645))+(((-1.0)*cj5*x1647)));
evalcond[11]=((((-1.0)*x1647*x1652))+(((-1.0)*x1651))+new_r10);
evalcond[12]=(((new_r02*x1655))+((new_r12*x1652))+((new_r22*sj5)));
evalcond[13]=(sj6+((new_r01*x1655))+((new_r21*sj5))+((new_r11*x1652)));
evalcond[14]=(((cj5*new_r20))+(((-1.0)*new_r00*x1645*x1650))+(((-1.0)*x1648*x1657)));
evalcond[15]=((((-1.0)*x1650*x1654))+((cj5*new_r21))+(((-1.0)*new_r01*x1645*x1650)));
evalcond[16]=((-1.0)+(((-1.0)*x1650*x1656))+((cj5*new_r22))+(((-1.0)*x1649*x1653)));
evalcond[17]=(((new_r10*x1652))+((new_r20*sj5))+(((-1.0)*x1647))+((new_r00*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - kinovagen3 (3bda670766835341c36af6991147ee12)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

IkReal point_sqrd_dist(IkReal* A, IkReal* B){
    return IKsqrt((A[0] - B[0])*(A[0] - B[0]) + (A[1] - B[1])*(A[1] - B[1]) + (A[2] - B[2])*(A[2] - B[2]));
}

bool valid_solution(IkReal* sol_joints){
    IkReal u_lims[7], l_lims[7];
    int i;
    u_lims[0] = IKPI;
    u_lims[1] = (128.9*IKPI)/180.0;
    u_lims[2] = IKPI;
    u_lims[3] = (147.8*IKPI)/180.0;
    u_lims[4] = IKPI;
    u_lims[5] = (120.3*IKPI)/180.0;
    u_lims[6] = IKPI;

    l_lims[0] = -u_lims[0];
    l_lims[1] = -u_lims[1];
    l_lims[2] = -u_lims[2];
    l_lims[3] = -u_lims[3];
    l_lims[4] = -u_lims[4];
    l_lims[5] = -u_lims[5];
    l_lims[6] = -u_lims[6];

    for(i = 0; i < 7; i++){
        if ((sol_joints[i] < l_lims[i]) || (sol_joints[i] > u_lims[i])){
            return false;
        }
    }
    return true;
}

IKFAST_API void ComputeL4TFk(const IkReal* j, IkReal* eetrans) {
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8;
    x0=IKcos(j[0]);
    x1=IKsin(j[0]);
    x2=IKcos(j[1]);
    x3=IKsin(j[2]);
    x4=IKcos(j[2]);
    x5=IKsin(j[1]);
    x6=((0.421)*x5);
    x7=((0.006)*x3);
    x8=((0.006)*x4);
    eetrans[0]=(((x0*x6))+(((-0.012)*x1))+(((-1.0)*x1*x8))+(((-1.0)*x0*x2*x7)));
    eetrans[1]=(((x1*x2*x7))+(((-0.012)*x0))+(((-1.0)*x0*x8))+(((-1.0)*x1*x6)));
    eetrans[2]=((0.285)+((x5*x7))+(((0.421)*x2)));
}

IKFAST_API void ComputeL6TFk(const IkReal* j, IkReal* eetrans) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
    x0=IKcos(j[0]);
    x1=IKcos(j[3]);
    x2=IKcos(j[1]);
    x3=IKcos(j[2]);
    x4=IKsin(j[1]);
    x5=IKsin(j[3]);
    x6=IKsin(j[2]);
    x7=IKsin(j[0]);
    x8=IKsin(j[4]);
    x9=IKcos(j[4]);
    x10=IKcos(j[5]);
    x11=IKsin(j[5]);
    x12=((1.0)*x4);
    x13=((0.314)*x7);
    x14=((1.0)*x9);
    x15=((0.013)*x0);
    x16=((0.013)*x6);
    x17=((0.421)*x4);
    x18=((1.0)*x0);
    x19=((1.0)*x5);
    x20=((1.0)*x7);
    x21=((0.314)*x4);
    x22=(x2*x3);
    x23=(x0*x1);
    x24=(x1*x2);
    x25=(x2*x7);
    x26=(x3*x5);
    x27=(x2*x6);
    x28=(x0*x6);
    x29=(x1*x4);
    x30=(x20*x6);
    x31=(x12*x23);
    x32=(x12*x5*x7);
    x33=(x1*x12*x7);
    x34=(x12*x26);
    x35=(((x22*x7))+x28);
    x36=(((x0*x3))+(((-1.0)*x20*x27)));
    x37=((((-1.0)*x18*x22))+x30);
    x38=(((x18*x27))+((x20*x3)));
    x39=((((-1.0)*x18*x6))+(((-1.0)*x20*x22)));
    x40=(x1*x35);
    x41=(x39*x5);
    x42=(((x1*(((((-1.0)*x30))+((x0*x22))))))+(((-1.0)*x0*x12*x5)));
    x43=(((x12*x6*x8))+((x14*(((((-1.0)*x29*x3))+(((-1.0)*x2*x5)))))));
    x44=((((-1.0)*x38*x8))+((x42*x9)));
    x45=(((x14*(((((-1.0)*x40))+x32))))+(((-1.0)*x36*x8)));
    eetrans[0]=((((-1.0)*x15*x27))+((x21*x23))+((x0*x17))+(((-0.012)*x7))+((x5*(((((0.314)*x0*x22))+(((-1.0)*x13*x6))))))+(((-0.013)*x3*x7)));
    IkReal x46=((1.0)*x13);
    eetrans[1]=((((-1.0)*x29*x46))+(((-0.012)*x0))+((x5*(((((-1.0)*x22*x46))+(((-0.314)*x28))))))+(((-1.0)*x17*x7))+((x16*x25))+(((-1.0)*x15*x3)));
    IkReal x47=((1.0)*x12);
    eetrans[2]=((0.285)+(((-1.0)*x21*x26))+((x16*x4))+(((0.421)*x2))+(((0.314)*x24)));
}

IKFAST_API void ComputeL7TFk(const IkReal* j, IkReal* eetrans) {
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[2]);
    x5=IKsin(j[3]);
    x6=IKcos(j[3]);
    x7=IKsin(j[1]);
    x8=IKcos(j[4]);
    x9=IKsin(j[4]);
    x10=IKsin(j[6]);
    x11=IKcos(j[5]);
    x12=IKcos(j[6]);
    x13=IKsin(j[5]);
    x14=((1.0)*x6);
    x15=((1.0)*x5);
    x16=((1.0)*x4);
    x17=((1.0)*x8);
    x18=((1.0)*x3);
    x19=((1.0)*x9);
    x20=((0.106)*x5);
    x21=((1.0)*x11);
    x22=((0.106)*x8);
    x23=((0.013)*x1);
    x24=((0.314)*x3);
    x25=((1.0)*x0);
    x26=((0.314)*x0);
    x27=((0.106)*x9);
    x28=((1.0)*x13);
    x29=(x6*x7);
    x30=(x2*x7);
    x31=(x1*x6);
    x32=(x7*x9);
    x33=(x0*x4);
    x34=(x3*x4);
    x35=(x0*x7);
    x36=(x1*x2);
    x37=(x0*x2);
    x38=(x3*x7);
    x39=(x16*x3);
    x40=(x15*x35);
    x41=(x14*x35);
    x42=(x15*x38);
    x43=(x16*x7*x8);
    x44=(x16*x32);
    x45=((((-1.0)*x39))+((x0*x36)));
    x46=(((x3*x36))+x33);
    x47=((((-1.0)*x1*x39))+x37);
    x48=(x31+(((-1.0)*x15*x30)));
    x49=(((x1*x5))+((x2*x29)));
    x50=((((-1.0)*x25*x36))+x39);
    x51=((((-1.0)*x0*x1*x16))+(((-1.0)*x18*x2)));
    x52=(x45*x6);
    x53=((((-1.0)*x18*x36))+(((-1.0)*x0*x16)));
    x54=((((-1.0)*x1*x15))+(((-1.0)*x14*x30)));
    x55=(x49*x8);
    x56=(x47*x8);
    x57=(x47*x9);
    x58=(x51*x9);
    x59=(x51*x8);
    x60=(x54*x9);
    x61=((((-1.0)*x40))+x52);
    x62=((((-1.0)*x42))+((x46*x6)));
    x63=((((-1.0)*x14*x46))+x42);
    x64=((((-1.0)*x14*x38))+((x5*x53)));
    x65=(x61*x8);
    x66=(x13*(((((-1.0)*x41))+((x5*x50)))));
    x67=(x63*x9);
    x68=(x58+x65);
    x69=(((x21*((x44+(((-1.0)*x55))))))+(((-1.0)*x28*x48)));
    x70=(((x21*(((((-1.0)*x62*x8))+(((-1.0)*x57))))))+(((-1.0)*x28*x64)));
    eetrans[0]=((((-0.012)*x3))+(((-0.013)*x2*x3))+((x13*((((x27*x51))+((x22*x61))))))+((x11*(((((-1.0)*x20*x50))+(((0.106)*x0*x29))))))+((x26*x29))+((x5*((((x26*x36))+(((-1.0)*x24*x4))))))+(((-1.0)*x23*x33))+(((0.421)*x35)));
    IkReal x71=((1.0)*x24);
    eetrans[1]=(((x13*(((((-1.0)*x27*x47))+(((-1.0)*x22*x62))))))+((x5*(((((-1.0)*x36*x71))+(((-1.0)*x26*x4))))))+((x23*x34))+(((-0.012)*x0))+(((-0.421)*x38))+((x11*((((x20*x53))+(((-0.106)*x29*x3))))))+(((-0.013)*x37))+(((-1.0)*x29*x71)));
    IkReal x72=(x4*x7);
    eetrans[2]=((0.285)+(((0.314)*x31))+(((-0.314)*x30*x5))+((x11*(((((-1.0)*x20*x30))+(((0.106)*x31))))))+(((0.013)*x72))+(((0.421)*x1))+((x13*((((x27*x72))+(((-1.0)*x22*x49)))))));
}

IkReal get_sol_sqrd_distance(IkReal* sol_values, IkReal* l4_p, IkReal* l6_p, IkReal* l7_p){
    IkReal sl4_p[3], sl6_p[3], sl7_p[3];
    ComputeL4TFk(sol_values, sl4_p);
    ComputeL6TFk(sol_values, sl6_p);
    ComputeL7TFk(sol_values, sl7_p);
    return point_sqrd_dist(l4_p, sl4_p) + point_sqrd_dist(l6_p, sl6_p) + point_sqrd_dist(l7_p, sl7_p);
}
IkReal trig_dist(IkReal A, IkReal B){
    IkReal xA, yA, xB, yB;
    xA = IKcos(A);
    xB = IKcos(B);
    yA = IKsin(A);
    yB = IKsin(B);
    return (xA - xB)*(xA - xB) + (yA - yB)*(yA - yB);
}
IkReal get_sol_sqrd_distance_joint(IkReal* sol_values, IkReal* curr_values){
    IkReal d;
    d = 0;
    for(int i = 0; i < 7; i++)
        d += trig_dist(sol_values[i], curr_values[i]);
    return d;
}


IKFAST_API int UnityIk(IkReal* t, IkReal* r, IkReal* current_ja, bool allow_big_jumps, int max_tries, IkReal max_joint_dist, IkReal max_cart_dist, IkReal cart_tol, IkReal joint_tol, bool joint_limit_check){
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal l4_p[3], l6_p[3], l7_p[3];
    // IkReal l4_p[3], l6_p[3], l7_p[3];
    int no_sols;
    bool bSuccess, cart_dist_is_equivalent, joint_dist_is_equivalent;
    std::size_t closest_index, k;
    IkReal diff, cart_dist, joint_dist, min_cart_dist, min_joint_dist;
    vfree[0] = current_ja[2];

    bSuccess = ComputeIk(t, r, &vfree[0], solutions);

    no_sols = 0;
    closest_index = 99;
    min_cart_dist = 9999999.0;
    min_joint_dist = 9999999.0;
    ComputeL4TFk(current_ja, l4_p);
    ComputeL6TFk(current_ja, l6_p);
    ComputeL7TFk(current_ja, l7_p);
    // no_sols = solutions.GetNumSolutions();
    std::vector<IkReal> solvalues(GetNumJoints());
    if(bSuccess){
        for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
            const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
            std::vector<IkReal> vsolfree(sol.GetFree().size());
            sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
            if (!joint_limit_check || valid_solution(&solvalues[0])){
                cart_dist = get_sol_sqrd_distance(&solvalues[0], l4_p, l6_p, l7_p);
                joint_dist = get_sol_sqrd_distance_joint(&solvalues[0], current_ja);
                no_sols = no_sols + 1;
                cart_dist_is_equivalent = (IKabs(cart_dist - min_cart_dist) < cart_tol);                
                if ((allow_big_jumps || (cart_dist <= max_cart_dist)) && ( (cart_dist < min_cart_dist) || cart_dist_is_equivalent) ){
                    joint_dist_is_equivalent = (IKabs(joint_dist - min_joint_dist) < joint_tol);
                    if (allow_big_jumps || (joint_dist <= max_joint_dist)){
                        if((!cart_dist_is_equivalent) || (cart_dist_is_equivalent && (joint_dist < min_joint_dist) && !joint_dist_is_equivalent)){                            
                            min_joint_dist = joint_dist;
                            min_cart_dist = cart_dist;
                            closest_index = i;
                        }                        
                    }
                }
            }
        }
    }
    if(closest_index != 99){
        // we found a valid solution, now checking if it meet our requirements:        
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(closest_index);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            current_ja[j] = solvalues[j];        
    }
    else if(max_tries > 0){
        t[0] += ((double)rand()/RAND_MAX*2.0-1.0)/1000.0;
        t[1] += ((double)rand()/RAND_MAX*2.0-1.0)/1000.0;
        t[2] += ((double)rand()/RAND_MAX*2.0-1.0)/1000.0;

        no_sols = UnityIk(t, r, current_ja, allow_big_jumps, max_tries - 1, max_joint_dist, max_cart_dist, cart_tol, joint_tol, joint_limit_check);
    }
    else{
        no_sols = 0;
    }
    
    return no_sols;
}


#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
// int main(int argc, char** argv)
// {
//     if( argc != 7+1 ) {
//         printf("\nUsage: ./ik j1 j2 j3 j4 j5 j6 j7\n");
//         return 1;
//     }

//     IkReal eetrans[3], joint_values[7];
//     joint_values[0] = (IKPI*atof(argv[1]))/180.0;
//     joint_values[1] = (IKPI*atof(argv[2]))/180.0;
//     joint_values[2] = (IKPI*atof(argv[3]))/180.0;
//     joint_values[3] = (IKPI*atof(argv[4]))/180.0;
//     joint_values[4] = (IKPI*atof(argv[5]))/180.0;
//     joint_values[5] = (IKPI*atof(argv[6]))/180.0;
//     joint_values[6] = (IKPI*atof(argv[7]))/180.0;

//     ComputeL4TFk(joint_values, eetrans);
//     printf("Link 4 pos: (%f, %f, %f)\n", -eetrans[0], eetrans[2], -eetrans[1]);
//     ComputeL6TFk(joint_values, eetrans);
//     printf("Link 6 pos: (%f, %f, %f)\n", -eetrans[0], eetrans[2], -eetrans[1]);
//     ComputeL7TFk(joint_values, eetrans);
//     printf("Link 7 pos: (%f, %f, %f)\n", -eetrans[0], eetrans[2], -eetrans[1]);

//     return 0;
// }
int main(int argc, char** argv)
{
    if( argc != 12+7+1+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 j1 j2 j3 j4 j5 j6 j7 tol ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3], joint_values[7], l4_p[3], l6_p[3], l7_p[3];
    IkReal jdist, cdist, diff, sol_tol;
    std::size_t closest_index = 99;
    IkReal closest_value = 9999999.0;
    IkReal closest_joint_value = 9999999.0;

    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    joint_values[0] = atof(argv[13]);
    // joint_values[0] = -2.52442;
    joint_values[1] = atof(argv[14]);
    joint_values[2] = atof(argv[15]);
    joint_values[3] = atof(argv[16]);
    joint_values[4] = atof(argv[17]);
    joint_values[5] = atof(argv[18]);
    joint_values[6] = atof(argv[19]);
    sol_tol = atof(argv[20]);
    // eerot[0] = strtof(argv[1], NULL);
    // eerot[1] = strtof(argv[2], NULL);
    // eerot[2] = strtof(argv[3], NULL);
    // eetrans[0] = strtof(argv[4], NULL);
    // eerot[3] = strtof(argv[5], NULL);
    // eerot[4] = strtof(argv[6], NULL);
    // eerot[5] = strtof(argv[7], NULL);
    // eetrans[1] = strtof(argv[8], NULL);
    // eerot[6] = strtof(argv[9], NULL);
    // eerot[7] = strtof(argv[10], NULL);
    // eerot[8] = strtof(argv[11], NULL);
    // eetrans[2] = strtof(argv[12], NULL);
    // joint_values[0] = strtof(argv[13], NULL);
    // joint_values[1] = strtof(argv[14], NULL);
    // joint_values[2] = strtof(argv[15], NULL);
    // joint_values[3] = strtof(argv[16], NULL);
    // joint_values[4] = strtof(argv[17], NULL);
    // joint_values[5] = strtof(argv[18], NULL);
    // joint_values[6] = strtof(argv[19], NULL);
    // sol_tol = strtof(argv[20], NULL);

    float ap_v = 1e7;
    for(int i = 0; i < 3; i++)
        eetrans[i] = roundf(eetrans[i] * ap_v) / ap_v;

    for(int i = 0; i < 9; i++)
        eerot[i] = roundf(eerot[i] * ap_v) / ap_v;

    for(int i = 0; i < 7; i++)
        joint_values[i] = roundf(joint_values[i] * ap_v) / ap_v;

    vfree[0] = joint_values[2];

    ComputeL4TFk(joint_values, l4_p);
    ComputeL6TFk(joint_values, l6_p);
    ComputeL7TFk(joint_values, l7_p);

    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }
    printf("Given joint angles:\n");
    for(std::size_t i = 0; i < 7; ++i) {
        // printf("%.8f, ", (180.0*joint_values[i])/IKPI);
        printf("%.12f, ", joint_values[i]);
    }
    printf("\n");
    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        // if (valid_solution(&solvalues[0])){
            printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
            for( std::size_t j = 0; j < solvalues.size(); ++j){
                // printf("%.8f, ", (180.0*solvalues[j])/IKPI);
                printf("%.12f, ", solvalues[j]);
            }
            jdist = get_sol_sqrd_distance_joint(&solvalues[0], joint_values);
            cdist = get_sol_sqrd_distance(&solvalues[0], l4_p, l6_p, l7_p);
            // printf("J4: %.12f %.12f %.12f, J6: %.12f %.12f %.12f, J7: %.12f %.12f %.12f", l4_p[0], l4_p[1], l4_p[2], l6_p[0], l6_p[1], l6_p[2], l7_p[0], l7_p[1], l7_p[2]);
            printf(". JDist: %.12f, CDist: %.12f\n", jdist, cdist);
            // value = get_sol_sqrd_distance(&solvalues[0], l4_p, l6_p, l7_p);
            diff = cdist - closest_value;
            if(diff < 0){
                // joint_value = get_sol_sqrd_distance_joint(&solvalues[0], joint_angles);
                if((IKabs(diff) > sol_tol) || (jdist < closest_joint_value)){
                    // Difference in position is high enough or joint difference is lower
                    printf("Setting new min: jdist=%.12f, cdist=%.12f. Old: jdist=%.12f, cdist=%.12f\n", jdist, cdist, closest_joint_value, closest_value);
                    closest_joint_value = jdist;
                    closest_value = cdist;
                    closest_index = i;
                }
            }
        // }
    }
    printf("Best solution index = %lu. Solution:\n", closest_index);
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(closest_index);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    printf("sol%d (free=%d): ", (int)closest_index, (int)sol.GetFree().size());
    for( std::size_t j = 0; j < solvalues.size(); ++j)
        printf("%.12f, ", solvalues[j]);
    printf("\n");
    printf("Unity IK:\n");
    int no_of_sols = UnityIk(eetrans, eerot, joint_values, true, 0, 1e-5);
    printf("UnityIk found %d solutions. The best one is:\n", no_of_sols);
    for( std::size_t j = 0; j < 7; ++j)
        printf("%.12f, ", joint_values[j]);
    printf("\n");
    return 0;
}

#endif
